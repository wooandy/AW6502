ca65 V2.18 - Git N/A
Main file   : ../../common/source/../../rom/microsoft_basic/msbasic.s
Current file: ../../common/source/../../rom/microsoft_basic/msbasic.s

000000r 1               ; Microsoft BASIC for 6502
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ; This is a single integrated assembly source tree that can generate seven different versions of
000000r 1               ; Microsoft BASIC for 6502.
000000r 1               ;
000000r 1               ; By running ./make.sh, this will generate all versions and compare them to the original files
000000r 1               ; byte by byte. The CC65 compiler suite is need to build this project.
000000r 1               ;
000000r 1               ; These are the first eight (known) versions of Microsoft BASIC for 6502:
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions   .define
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; Commodore BASIC 1     1977                    Y      Y          ZP          CBM
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -        CONFIG_10A
000000r 1               ; AppleSoft I           1977     1.1            N      Y        $0200         Apple      CONFIG_11
000000r 1               ; KIM BASIC             1977     1.1            N      Y          ZP            -        CONFIG_11A
000000r 1               ; AppleSoft II          1978                    Y      Y        $0200         Apple      CONFIG_2
000000r 1               ; Commodore BASIC 2     1979                    Y      Y        $0200          CBM       CONFIG_2A
000000r 1               ; KBD BASIC             1982                    Y      N        $0700          KBD       CONFIG_2B
000000r 1               ; MicroTAN              1980                    Y      Y          ZP            -        CONFIG_2C
000000r 1               ;
000000r 1               ; (Note that this assembly source cannot (yet) build AppleSoft II.)
000000r 1               ;
000000r 1               ; This lists the versions in the order in which they were forked from the Microsoft source base.
000000r 1               ; Commodore BASIC 1, as used on the original PET is the oldest known version of Microsoft BASIC
000000r 1               ; for 6502. It contains some additions to Microsoft's version, like Commodore-style file I/O.
000000r 1               ;
000000r 1               ; The CONFIG_n defines specify what Microsoft-version the OEM version is based on. If CONFIG_2B
000000r 1               ; is defined, for example, CONFIG_2A, CONFIG_2, CONFIG_11A, CONFIG_11 and CONFIG_10A will be
000000r 1               ; defined as well, and all bugfixes up to version 2B will be enabled.
000000r 1               ;
000000r 1               ; The following symbols can be defined in addition:
000000r 1               ;
000000r 1               ; CONFIG_CBM1_PATCHES				jump out into CBM1's binary patches instead of doing the right thing inline
000000r 1               ; CONFIG_CBM_ALL					add all Commodore-specific additions except file I/O
000000r 1               ; CONFIG_DATAFLG					?
000000r 1               ; CONFIG_EASTER_EGG					include the CBM2 "WAIT 6502" easter egg
000000r 1               ; CONFIG_FILE						support Commodore PRINT#, INPUT#, GET#, CMD
000000r 1               ; CONFIG_IO_MSB						all I/O has bit #7 set
000000r 1               ; CONFIG_MONCOUT_DESTROYS_Y			Y needs to be preserved when calling MONCOUT
000000r 1               ; CONFIG_NO_CR						terminal doesn't need explicit CRs on line ends
000000r 1               ; CONFIG_NO_LINE_EDITING			disable support for Microsoft-style "@", "_", BEL etc.
000000r 1               ; CONFIG_NO_POKE					don't support PEEK, POKE and WAIT
000000r 1               ; CONFIG_NO_READ_Y_IS_ZERO_HACK		don't do a very volatile trick that saves one byte
000000r 1               ; CONFIG_NULL						support for the NULL statement
000000r 1               ; CONFIG_PEEK_SAVE_LINNUM			preserve LINNUM on a PEEK
000000r 1               ; CONFIG_PRINTNULLS					whether PRINTNULLS does anything
000000r 1               ; CONFIG_PRINT_CR					print CR when line end reached
000000r 1               ; CONFIG_RAM						optimizations for RAM version of BASIC, only use on 1.x
000000r 1               ; CONFIG_ROR_WORKAROUND				use workaround for buggy 6502s from 1975/1976; not safe for CONFIG_SMALL!
000000r 1               ; CONFIG_SAFE_NAMENOTFOUND			check both bytes of the caller's address in NAMENOTFOUND
000000r 1               ; CONFIG_SCRTCH_ORDER				where in the init code to call SCRTCH
000000r 1               ; CONFIG_SMALL						use 6 digit FP instead of 9 digit, use 2 character error messages, don't have GET
000000r 1               ;
000000r 1               ; Changing symbol definitions can alter an existing base configuration, but it not guaranteed to assemble
000000r 1               ; or work correctly.
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               ;.debuginfo +
000000r 1               
000000r 1               .setcpu "65C02"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(db6502)
000000r 2               DB6502 := 1
000000r 2               .include "defines_db6502.s"
000000r 3               .import __USERRAM_START__
000000r 3               
000000r 3               ; configuration
000000r 3               CONFIG_2C := 1
000000r 3               
000000r 3               CONFIG_DATAFLG := 1
000000r 3               CONFIG_NULL := 1
000000r 3               CONFIG_PRINT_CR := 0 ; print CR when line end reached
000000r 3               CONFIG_SCRTCH_ORDER := 3
000000r 3               CONFIG_SMALL := 1
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $0D
000000r 3               ZP_START3 = $5B
000000r 3               ZP_START4 = $65
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR             := $000A
000000r 3               
000000r 3               ; inputbuffer
000000r 3               INPUTBUFFER     := $0900
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $FC
000000r 3               SPACE_FOR_GOSUB := $33
000000r 3               NULL_MAX		:= $0A
000000r 3               WIDTH			:= 72
000000r 3               WIDTH2			:= 56
000000r 3               
000000r 3               ; memory layout
000000r 3               RAMSTART2		:= __USERRAM_START__
000000r 3               
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "BAS_VEC"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "BAS_KEY"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "BAS_DUM"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "BAS_DUM"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "BAS_KEY"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "BAS_VEC"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "BAS_VEC"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "BAS_DUM"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "BAS_ERR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "BAS_ERR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "basic_zp.s"
000000r 2               
000000r 2               ;.feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               ;.org ZP_START1
000000r 2               
000000r 2               GORESTART:
000000r 2  xx xx xx     	.res 3
000003r 2               GOSTROUT:
000003r 2  xx xx xx     	.res 3
000006r 2               GOAYINT:
000006r 2  xx xx        	.res 2
000008r 2               GOGIVEAYF:
000008r 2  xx xx        	.res 2
00000Ar 2               
00000Ar 2               ;.org ZP_START2
00000Ar 2               Z15:
00000Ar 2  xx           	.res 1
00000Br 2               .ifndef POSX; allow override
00000Br 2               POSX:
00000Br 2               .endif
00000Br 2  xx           	.res 1
00000Cr 2               .ifndef Z17; allow override
00000Cr 2               Z17:
00000Cr 2               .endif
00000Cr 2  xx           	.res 1
00000Dr 2               .ifndef Z18; allow override
00000Dr 2               Z18:
00000Dr 2               .endif
00000Dr 2  xx           	.res 1
00000Er 2               LINNUM:
00000Er 2               .ifndef TXPSV; allow override
00000Er 2               TXPSV:
00000Er 2               .endif
00000Er 2  xx xx        	.res 2
000010r 2               .ifndef INPUTBUFFER; allow override
000010r 2               INPUTBUFFER:
000010r 2               .endif
000010r 2               
000010r 2               ;.org ZP_START3
000010r 2               
000010r 2               CHARAC:
000010r 2  xx           	.res 1
000011r 2               ENDCHR:
000011r 2  xx           	.res 1
000012r 2               EOLPNTR:
000012r 2  xx           	.res 1
000013r 2               DIMFLG:
000013r 2  xx           	.res 1
000014r 2               VALTYP:
000014r 2               .ifdef CONFIG_SMALL
000014r 2  xx           	.res 1
000015r 2               .else
000015r 2               	.res 2
000015r 2               .endif
000015r 2               DATAFLG:
000015r 2  xx           	.res 1
000016r 2               SUBFLG:
000016r 2  xx           	.res 1
000017r 2               INPUTFLG:
000017r 2  xx           	.res 1
000018r 2               CPRMASK:
000018r 2  xx           	.res 1
000019r 2               Z14:
000019r 2  xx           	.res 1
00001Ar 2               
00001Ar 2               ;.org ZP_START4
00001Ar 2               
00001Ar 2               TEMPPT:
00001Ar 2  xx           	.res 1
00001Br 2               LASTPT:
00001Br 2  xx xx        	.res 2
00001Dr 2               TEMPST:
00001Dr 2  xx xx xx xx  	.res 9
000021r 2  xx xx xx xx  
000025r 2  xx           
000026r 2               INDEX:
000026r 2  xx xx        	.res 2
000028r 2               DEST:
000028r 2  xx xx        	.res 2
00002Ar 2               RESULT:
00002Ar 2  xx xx xx xx  	.res BYTES_FP
00002Er 2               RESULT_LAST = RESULT + BYTES_FP-1
00002Er 2               TXTTAB:
00002Er 2  xx xx        	.res 2
000030r 2               VARTAB:
000030r 2  xx xx        	.res 2
000032r 2               ARYTAB:
000032r 2  xx xx        	.res 2
000034r 2               STREND:
000034r 2  xx xx        	.res 2
000036r 2               FRETOP:
000036r 2  xx xx        	.res 2
000038r 2               FRESPC:
000038r 2  xx xx        	.res 2
00003Ar 2               MEMSIZ:
00003Ar 2  xx xx        	.res 2
00003Cr 2               CURLIN:
00003Cr 2  xx xx        	.res 2
00003Er 2               OLDLIN:
00003Er 2  xx xx        	.res 2
000040r 2               OLDTEXT:
000040r 2  xx xx        	.res 2
000042r 2               Z8C:
000042r 2  xx xx        	.res 2
000044r 2               DATPTR:
000044r 2  xx xx        	.res 2
000046r 2               INPTR:
000046r 2  xx xx        	.res 2
000048r 2               VARNAM:
000048r 2  xx xx        	.res 2
00004Ar 2               VARPNT:
00004Ar 2  xx xx        	.res 2
00004Cr 2               FORPNT:
00004Cr 2  xx xx        	.res 2
00004Er 2               LASTOP:
00004Er 2  xx xx        	.res 2
000050r 2               CPRTYP:
000050r 2  xx           	.res 1
000051r 2               FNCNAM:
000051r 2               TEMP3:
000051r 2  xx xx        	.res 2
000053r 2               DSCPTR:
000053r 2               .ifdef CONFIG_SMALL
000053r 2  xx xx        		.res 2
000055r 2               .else
000055r 2               		.res 3
000055r 2               .endif
000055r 2               DSCLEN:
000055r 2  xx xx        	.res 2
000057r 2               .ifndef JMPADRS ; allow override
000057r 2               JMPADRS			:= DSCLEN + 1
000057r 2               .endif
000057r 2               Z52:
000057r 2  xx           	.res 1
000058r 2               ARGEXTENSION:
000058r 2               .ifndef CONFIG_SMALL
000058r 2               	.res 1
000058r 2               .endif
000058r 2               TEMP1:
000058r 2  xx           	.res 1
000059r 2               HIGHDS:
000059r 2  xx xx        	.res 2
00005Br 2               HIGHTR:
00005Br 2  xx xx        	.res 2
00005Dr 2               .ifndef CONFIG_SMALL
00005Dr 2               TEMP2:
00005Dr 2               	.res 1
00005Dr 2               .endif
00005Dr 2               INDX:
00005Dr 2               TMPEXP:
00005Dr 2               .ifdef CONFIG_SMALL
00005Dr 2               TEMP2:
00005Dr 2               .endif
00005Dr 2  xx           	.res 1
00005Er 2               EXPON:
00005Er 2  xx           	.res 1
00005Fr 2               LOWTR:
00005Fr 2               .ifndef LOWTRX ; allow override
00005Fr 2               LOWTRX:
00005Fr 2               .endif
00005Fr 2  xx           	.res 1
000060r 2               EXPSGN:
000060r 2  xx           	.res 1
000061r 2               FAC:
000061r 2  xx xx xx xx  	.res BYTES_FP
000065r 2               FAC_LAST = FAC + BYTES_FP-1
000065r 2               FACSIGN:
000065r 2  xx           	.res 1
000066r 2               SERLEN:
000066r 2  xx           	.res 1
000067r 2               SHIFTSIGNEXT:
000067r 2  xx           	.res 1
000068r 2               ARG:
000068r 2  xx xx xx xx  	.res BYTES_FP
00006Cr 2               ARG_LAST = ARG + BYTES_FP-1
00006Cr 2               ARGSIGN:
00006Cr 2  xx           	.res 1
00006Dr 2               STRNG1:
00006Dr 2  xx xx        	.res 2
00006Fr 2               SGNCPR = STRNG1
00006Fr 2               FACEXTENSION = STRNG1+1
00006Fr 2               STRNG2:
00006Fr 2  xx xx        	.res 2
000071r 2               CHRGET:
000071r 2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
000071r 2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
000071r 2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
000071r 2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
000071r 2               
000071r 2               
000071r 2               
000071r 1               
000071r 1               .include "header.s"
000071r 2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               
000000r 1               .include "token.s"
000000r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2               		keyword_rts "PLT", PLT
000007r 2               .else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               .ifdef APPLE
00000Er 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Er 2               .else
00000Er 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000012r 2  CD xx        
00000Fr 2               .endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2  rr rr 4E 55  		keyword_rts "NULL", NULL
000015r 2  4C CC xx     
000012r 2               .endif
000012r 2               .ifdef KBD
000012r 2               		keyword_rts "PLOD", PLOD
000012r 2               		keyword_rts "PSAV", PSAV
000012r 2               		keyword_rts "VLOD", VLOD
000012r 2               		keyword_rts "VSAV", VSAV
000012r 2               .endif
000012r 2               .ifndef CONFIG_NO_POKE
000012r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000016r 2  49 D4 xx     
000013r 2               .endif
000013r 2               .ifndef KBD
000013r 2  rr rr 4C 4F  		keyword_rts "LOAD", LOAD
000017r 2  41 C4 xx     
000014r 2  rr rr 53 41  		keyword_rts "SAVE", SAVE
000018r 2  56 C5 xx     
000015r 2               .endif
000015r 2               .ifdef CONFIG_CBM_ALL
000015r 2               		keyword_rts "VERIFY", VERIFY
000015r 2               .endif
000015r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000019r 2  C6 xx        
000016r 2               .ifdef KBD
000016r 2               		keyword_rts "SLOD", SLOD
000016r 2               .endif
000016r 2               .ifndef CONFIG_NO_POKE
000016r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Ar 2  4B C5 xx     
000017r 2               .endif
000017r 2               .ifdef CONFIG_FILE
000017r 2               		keyword_rts "PRINT#", PRINTH
000017r 2               .endif
000017r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Br 2  49 4E D4 xx  
000018r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Cr 2  4E D4 xx     
000019r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Dr 2  53 D4 xx     
00001Ar 2               .ifdef CONFIG_CBM_ALL
00001Ar 2               		keyword_rts "CLR", CLEAR
00001Ar 2               .else
00001Ar 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Er 2  45 41 D2 xx  
00001Br 2               .endif
00001Br 2               .ifdef CONFIG_FILE
00001Br 2               		keyword_rts "CMD", CMD
00001Br 2               		keyword_rts "SYS", SYS
00001Br 2               		keyword_rts "OPEN", OPEN
00001Br 2               		keyword_rts "CLOSE", CLOSE
00001Br 2               .endif
00001Br 2               .ifndef CONFIG_SMALL
00001Br 2               		keyword_rts "GET", GET
00001Br 2               .endif
00001Br 2               .ifdef KBD
00001Br 2               		keyword_rts "PRT", PRT
00001Br 2               .endif
00001Br 2  rr rr 4E 45  		keyword_rts "NEW", NEW
00001Fr 2  D7 xx        
00001Cr 2               
00001Cr 2               		count_tokens
00001Cr 2               
00001Cr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000020r 2  xx           
00001Dr 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Er 2  46 CE xx     		keyword	"FN", TOKEN_FN
00001Fr 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000023r 2  xx           
000020r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000024r 2  xx           
000021r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000022r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000026r 2  xx           
000023r 2  AB xx        		keyword	"+", TOKEN_PLUS
000024r 2  AD xx        		keyword	"-", TOKEN_MINUS
000025r 2  AA xx        		keyword	"*"
000026r 2  AF xx        		keyword	"/"
000027r 2               .ifdef KBD
000027r 2               		keyword	"#"
000027r 2               .else
000027r 2  DE xx        		keyword	"^"
000028r 2               .endif
000028r 2  41 4E C4 xx  		keyword	"AND"
000029r 2  4F D2 xx     		keyword	"OR"
00002Ar 2  BE xx        		keyword	">", TOKEN_GREATER
00002Br 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Cr 2  BC xx        		keyword	"<"
00002Dr 2               
00002Dr 2                       .segment "BAS_VEC"
000038r 2               UNFNC:
000038r 2               
000038r 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Cr 2  CE xx        
00002Er 2  rr rr 49 4E  		keyword_addr "INT", INT
000032r 2  D4 xx        
00002Fr 2  rr rr 41 42  		keyword_addr "ABS", ABS
000033r 2  D3 xx        
000030r 2               .ifdef KBD
000030r 2               		keyword_addr "VER", VER
000030r 2               .endif
000030r 2               .ifndef CONFIG_NO_POKE
000030r 2                 .ifdef CONFIG_RAM
000030r 2               		keyword_addr "USR", IQERR
000030r 2                 .else
000030r 2  0A 00 55 53  		keyword_addr "USR", USR
000034r 2  D2 xx        
000031r 2                 .endif
000031r 2               .endif
000031r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000035r 2  C5 xx        
000032r 2  rr rr 50 4F  		keyword_addr "POS", POS
000036r 2  D3 xx        
000033r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000037r 2  D2 xx        
000034r 2  rr rr 52 4E  		keyword_addr "RND", RND
000038r 2  C4 xx        
000035r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
000039r 2  C7 xx        
000036r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Ar 2  D0 xx        
000037r 2               .segment "BAS_VEC"
00004Cr 2               UNFNC_COS:
00004Cr 2  rr rr 43 4F  		keyword_addr "COS", COS
000050r 2  D3 xx        
000038r 2               .segment "BAS_VEC"
00004Er 2               UNFNC_SIN:
00004Er 2  rr rr 53 49  		keyword_addr "SIN", SIN
000052r 2  CE xx        
000039r 2               .segment "BAS_VEC"
000050r 2               UNFNC_TAN:
000050r 2  rr rr 54 41  		keyword_addr "TAN", TAN
000054r 2  CE xx        
00003Ar 2               .segment "BAS_VEC"
000052r 2               UNFNC_ATN:
000052r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000056r 2  CE xx        
00003Br 2               .ifdef KBD
00003Br 2               		keyword_addr "GETC", GETC
00003Br 2               .endif
00003Br 2               .ifndef CONFIG_NO_POKE
00003Br 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
00003Fr 2  45 CB xx     
00003Cr 2               .endif
00003Cr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000040r 2  CE xx        
00003Dr 2  rr rr 53 54  		keyword_addr "STR$", STR
000041r 2  52 A4 xx     
00003Er 2  rr rr 56 41  		keyword_addr "VAL", VAL
000042r 2  CC xx        
00003Fr 2  rr rr 41 53  		keyword_addr "ASC", ASC
000043r 2  C3 xx        
000040r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000044r 2  52 A4 xx     
000041r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000045r 2  46 54 A4 xx  
000042r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000046r 2  47 48 54 A4  
00004Ar 2  xx           
000043r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000047r 2  44 A4 xx     
000044r 2               .ifdef CONFIG_2
000044r 2  47 CF xx     		keyword	"GO", TOKEN_GO
000045r 2               .endif
000045r 2                       .segment "BAS_KEY"
0000E1r 2  00           		.byte   0
0000E2r 2               
0000E2r 2                       .segment "BAS_VEC"
000066r 2               MATHTBL:
000066r 2  79                   .byte   $79
000067r 2  rr rr                .word   FADDT-1
000069r 2  79                   .byte   $79
00006Ar 2  rr rr                .word   FSUBT-1
00006Cr 2  7B                   .byte   $7B
00006Dr 2  rr rr                .word   FMULTT-1
00006Fr 2  7B                   .byte   $7B
000070r 2  rr rr                .word   FDIVT-1
000072r 2  7F                   .byte   $7F
000073r 2  rr rr                .word   FPWRT-1
000075r 2  50                   .byte   $50
000076r 2  rr rr                .word   TAND-1
000078r 2  46                   .byte   $46
000079r 2  rr rr                .word   OR-1
00007Br 2  7D                   .byte   $7D
00007Cr 2  rr rr                .word   NEGOP-1
00007Er 2  5A                   .byte   $5A
00007Fr 2  rr rr                .word   EQUOP-1
000081r 2  64                   .byte   $64
000082r 2  rr rr                .word   RELOPS-1
000084r 2               
000084r 1               .include "error.s"
000084r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2  4E C6        define_error ERR_NOFOR, "NF"
000002r 2  53 CE        define_error ERR_SYNTAX, "SN"
000004r 2  52 C7        define_error ERR_NOGOSUB, "RG"
000006r 2  4F C4        define_error ERR_NODATA, "OD"
000008r 2  46 C3        define_error ERR_ILLQTY, "FC"
00000Ar 2  4F D6        define_error ERR_OVERFLOW, "OV"
00000Cr 2  4F CD        define_error ERR_MEMFULL, "OM"
00000Er 2  55 D3        define_error ERR_UNDEFSTAT, "US"
000010r 2  42 D3        define_error ERR_BADSUBS, "BS"
000012r 2  44 C4        define_error ERR_REDIMD, "DD"
000014r 2  2F B0        define_error ERR_ZERODIV, "/0"
000016r 2  49 C4        define_error ERR_ILLDIR, "ID"
000018r 2  54 CD        define_error ERR_BADTYPE, "TM"
00001Ar 2  4C D3        define_error ERR_STRLONG, "LS"
00001Cr 2  53 D4        define_error ERR_FRMCPX, "ST"
00001Er 2  43 CE        define_error ERR_CANTCONT, "CN"
000020r 2  55 C6        define_error ERR_UNDEFFN, "UF"
000022r 2               .else
000022r 2               define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000022r 2               define_error ERR_SYNTAX, "SYNTAX"
000022r 2               define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
000022r 2               define_error ERR_NODATA, "OUT OF DATA"
000022r 2               define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000022r 2               .ifdef CBM1
000022r 2               	.byte 0,0,0,0,0
000022r 2               .endif
000022r 2               define_error ERR_OVERFLOW, "OVERFLOW"
000022r 2               define_error ERR_MEMFULL, "OUT OF MEMORY"
000022r 2               define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
000022r 2               define_error ERR_BADSUBS, "BAD SUBSCRIPT"
000022r 2               define_error ERR_REDIMD, "REDIM'D ARRAY"
000022r 2               define_error ERR_ZERODIV, "DIVISION BY ZERO"
000022r 2               define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000022r 2               define_error ERR_BADTYPE, "TYPE MISMATCH"
000022r 2               define_error ERR_STRLONG, "STRING TOO LONG"
000022r 2               .ifdef CONFIG_FILE
000022r 2                 .ifdef CBM1
000022r 2               define_error ERR_BADDATA, "BAD DATA"
000022r 2                 .else
000022r 2               define_error ERR_BADDATA, "FILE DATA"
000022r 2                 .endif
000022r 2               .endif
000022r 2               define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
000022r 2               define_error ERR_CANTCONT, "CAN'T CONTINUE"
000022r 2               define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
000022r 2               .endif
000022r 2               
000022r 1               .include "message.s"
000022r 2               ; global messages: "error", "in", "ready", "break"
000022r 2               
000022r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2                       .byte   CR,0,0,"K",CR,LF
00000Cr 2                   .else
00000Cr 2  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
000010r 2  0D 0A        
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2               .endif
000013r 2               
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN)
000013r 2               		.byte CR,LF," BREAK"
000013r 2                       .byte   0
000013r 2               .else
000013r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
000017r 2  45 41 4B     
00001Ar 2  00                   .byte   0
00001Br 2               .endif
00001Br 2               
00001Br 1               .include "memory.s"
00001Br 2               ; generic stack and memory management code
00001Br 2               ; this code is identical across all versions of
00001Br 2               ; BASIC
00001Br 2               
00001Br 2               .segment "CODE"
00001Br 2               
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Br 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Br 2               ;
00001Br 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Br 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Br 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Br 2               ;
00001Br 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Br 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Br 2               ;
00001Br 2               ;	.EQ. IF FOUND
00001Br 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GTFORPNT:
00001Br 2  BA                   tsx
00001Cr 2  E8                   inx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2               L2279:
000020r 2  BD 01 01             lda     STACK+1,x
000023r 2  C9 81                cmp     #$81
000025r 2  D0 21                bne     L22A1
000027r 2  A5 rr                lda     FORPNT+1
000029r 2  D0 0A                bne     L228E
00002Br 2  BD 02 01             lda     STACK+2,x
00002Er 2  85 rr                sta     FORPNT
000030r 2  BD 03 01             lda     STACK+3,x
000033r 2  85 rr                sta     FORPNT+1
000035r 2               L228E:
000035r 2  DD 03 01             cmp     STACK+3,x
000038r 2  D0 07                bne     L229A
00003Ar 2  A5 rr                lda     FORPNT
00003Cr 2  DD 02 01             cmp     STACK+2,x
00003Fr 2  F0 07                beq     L22A1
000041r 2               L229A:
000041r 2  8A                   txa
000042r 2  18                   clc
000043r 2  69 10                adc     #BYTES_PER_FRAME
000045r 2  AA                   tax
000046r 2  D0 D8                bne     L2279
000048r 2               L22A1:
000048r 2  60                   rts
000049r 2               
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               ; MOVE BLOCK OF MEMORY UP
000049r 2               ;
000049r 2               ; ON ENTRY:
000049r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000049r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000049r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               BLTU:
000049r 2  20 rr rr             jsr     REASON
00004Cr 2  85 rr                sta     STREND
00004Er 2  84 rr                sty     STREND+1
000050r 2               BLTU2:
000050r 2  38                   sec
000051r 2  A5 rr                lda     HIGHTR
000053r 2  E5 rr                sbc     LOWTR
000055r 2  85 rr                sta     INDEX
000057r 2  A8                   tay
000058r 2  A5 rr                lda     HIGHTR+1
00005Ar 2  E5 rr                sbc     LOWTR+1
00005Cr 2  AA                   tax
00005Dr 2  E8                   inx
00005Er 2  98                   tya
00005Fr 2  F0 23                beq     L22DD
000061r 2  A5 rr                lda     HIGHTR
000063r 2  38                   sec
000064r 2  E5 rr                sbc     INDEX
000066r 2  85 rr                sta     HIGHTR
000068r 2  B0 03                bcs     L22C6
00006Ar 2  C6 rr                dec     HIGHTR+1
00006Cr 2  38                   sec
00006Dr 2               L22C6:
00006Dr 2  A5 rr                lda     HIGHDS
00006Fr 2  E5 rr                sbc     INDEX
000071r 2  85 rr                sta     HIGHDS
000073r 2  B0 08                bcs     L22D6
000075r 2  C6 rr                dec     HIGHDS+1
000077r 2  90 04                bcc     L22D6
000079r 2               L22D2:
000079r 2  B1 rr                lda     (HIGHTR),y
00007Br 2  91 rr                sta     (HIGHDS),y
00007Dr 2               L22D6:
00007Dr 2  88                   dey
00007Er 2  D0 F9                bne     L22D2
000080r 2  B1 rr                lda     (HIGHTR),y
000082r 2  91 rr                sta     (HIGHDS),y
000084r 2               L22DD:
000084r 2  C6 rr                dec     HIGHTR+1
000086r 2  C6 rr                dec     HIGHDS+1
000088r 2  CA                   dex
000089r 2  D0 F2                bne     L22D6
00008Br 2  60                   rts
00008Cr 2               
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Cr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               CHKMEM:
00008Cr 2  0A                   asl     a
00008Dr 2  69 33                adc     #SPACE_FOR_GOSUB
00008Fr 2  B0 35                bcs     MEMERR
000091r 2  85 rr                sta     INDEX
000093r 2  BA                   tsx
000094r 2  E4 rr                cpx     INDEX
000096r 2  90 2E                bcc     MEMERR
000098r 2  60                   rts
000099r 2               
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000099r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               REASON:
000099r 2  C4 rr                cpy     FRETOP+1
00009Br 2  90 28                bcc     L231E
00009Dr 2  D0 04                bne     L22FC
00009Fr 2  C5 rr                cmp     FRETOP
0000A1r 2  90 22                bcc     L231E
0000A3r 2               L22FC:
0000A3r 2  48                   pha
0000A4r 2  A2 08                ldx     #FAC-TEMP1-1
0000A6r 2  98                   tya
0000A7r 2               L2300:
0000A7r 2  48                   pha
0000A8r 2  B5 rr                lda     TEMP1,x
0000AAr 2  CA                   dex
0000ABr 2  10 FA                bpl     L2300
0000ADr 2  20 rr rr             jsr     GARBAG
0000B0r 2  A2 F8                ldx     #<(TEMP1-FAC+1)
0000B2r 2               L230B:
0000B2r 2  68                   pla
0000B3r 2  95 rr                sta     FAC,x
0000B5r 2  E8                   inx
0000B6r 2  30 FA                bmi     L230B
0000B8r 2  68                   pla
0000B9r 2  A8                   tay
0000BAr 2  68                   pla
0000BBr 2  C4 rr                cpy     FRETOP+1
0000BDr 2  90 06                bcc     L231E
0000BFr 2  D0 05                bne     MEMERR
0000C1r 2  C5 rr                cmp     FRETOP
0000C3r 2  B0 01                bcs     MEMERR
0000C5r 2               L231E:
0000C5r 2  60                   rts
0000C6r 2               
0000C6r 1               .include "program.s"
0000C6r 2               ; error
0000C6r 2               ; line input, line editing
0000C6r 2               ; tokenize
0000C6r 2               ; detokenize
0000C6r 2               ; BASIC program memory management
0000C6r 2               
0000C6r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C6r 2               
0000C6r 2               .segment "CODE"
0000C6r 2               
0000C6r 2               MEMERR:
0000C6r 2  A2 0C                ldx     #ERR_MEMFULL
0000C8r 2               
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ; HANDLE AN ERROR
0000C8r 2               ;
0000C8r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C8r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C8r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ERROR:
0000C8r 2  46 rr                lsr     Z14
0000CAr 2               .ifdef CONFIG_FILE
0000CAr 2                       lda     CURDVC    ; output
0000CAr 2                       beq     LC366     ; is screen
0000CAr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CAr 2                       lda     #$00
0000CAr 2                       sta     CURDVC
0000CAr 2               LC366:
0000CAr 2               .endif
0000CAr 2  20 rr rr             jsr     CRDO
0000CDr 2  20 rr rr             jsr     OUTQUES
0000D0r 2               L2329:
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D3r 2               .ifndef CONFIG_SMALL
0000D3r 2                       pha
0000D3r 2                       and     #$7F
0000D3r 2               .endif
0000D3r 2  20 rr rr             jsr     OUTDO
0000D6r 2               .ifdef CONFIG_SMALL
0000D6r 2  BD rr rr             lda     ERROR_MESSAGES+1,x
0000D9r 2                 .if .def(KBD) || .def(DB6502)
0000D9r 2  29 7F                and     #$7F
0000DBr 2                 .endif
0000DBr 2  20 rr rr             jsr     OUTDO
0000DEr 2               .else
0000DEr 2                       inx
0000DEr 2                       pla
0000DEr 2                       bpl     L2329
0000DEr 2               .endif
0000DEr 2  20 rr rr             jsr     STKINI
0000E1r 2  A9 rr                lda     #<QT_ERROR
0000E3r 2  A0 rr                ldy     #>QT_ERROR
0000E5r 2               
0000E5r 2               ; ----------------------------------------------------------------------------
0000E5r 2               ; PRINT STRING AT (Y,A)
0000E5r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E5r 2               ; FALL INTO WARM RESTART
0000E5r 2               ; ----------------------------------------------------------------------------
0000E5r 2               PRINT_ERROR_LINNUM:
0000E5r 2  20 rr rr             jsr     STROUT
0000E8r 2  A4 rr                ldy     CURLIN+1
0000EAr 2  C8                   iny
0000EBr 2  F0 03                beq     RESTART
0000EDr 2  20 rr rr             jsr     INPRT
0000F0r 2               
0000F0r 2               ; ----------------------------------------------------------------------------
0000F0r 2               ; WARM RESTART ENTRY
0000F0r 2               ; ----------------------------------------------------------------------------
0000F0r 2               RESTART:
0000F0r 2               .ifdef KBD
0000F0r 2                       jsr     CRDO
0000F0r 2                       nop
0000F0r 2               L2351X:
0000F0r 2                       jsr     OKPRT
0000F0r 2               L2351:
0000F0r 2                       jsr     INLIN
0000F0r 2               LE28E:
0000F0r 2                       bpl     RESTART
0000F0r 2               .else
0000F0r 2  46 rr                lsr     Z14
0000F2r 2  A9 rr                lda     #<QT_OK
0000F4r 2  A0 rr                ldy     #>QT_OK
0000F6r 2                 .ifdef CONFIG_CBM_ALL
0000F6r 2                       jsr     STROUT
0000F6r 2                 .else
0000F6r 2  20 rr rr             jsr     GOSTROUT
0000F9r 2                 .endif
0000F9r 2               L2351:
0000F9r 2  20 rr rr             jsr     INLIN
0000FCr 2               .endif
0000FCr 2  86 rr                stx     TXTPTR
0000FEr 2  84 rr                sty     TXTPTR+1
000100r 2  20 rr rr             jsr     CHRGET
000103r 2               .ifdef CONFIG_11
000103r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000103r 2               ; and ':' - a line starting with ':' in
000103r 2               ; direct mode gets ignored
000103r 2  AA                   tax
000104r 2               .endif
000104r 2               .ifdef KBD
000104r 2                       beq     L2351X
000104r 2               .else
000104r 2  F0 F3                beq     L2351
000106r 2               .endif
000106r 2  A2 FF                ldx     #$FF
000108r 2  86 rr                stx     CURLIN+1
00010Ar 2  90 06                bcc     NUMBERED_LINE
00010Cr 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Fr 2  4C rr rr             jmp     NEWSTT2
000112r 2               
000112r 2               ; ----------------------------------------------------------------------------
000112r 2               ; HANDLE NUMBERED LINE
000112r 2               ; ----------------------------------------------------------------------------
000112r 2               NUMBERED_LINE:
000112r 2  20 rr rr             jsr     LINGET
000115r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000118r 2  84 rr                sty     EOLPNTR
00011Ar 2               .ifdef KBD
00011Ar 2                       jsr     FNDLIN2
00011Ar 2                       lda     JMPADRS+1
00011Ar 2                       sta     LOWTR
00011Ar 2                       sta     Z96
00011Ar 2                       lda     JMPADRS+2
00011Ar 2                       sta     LOWTR+1
00011Ar 2                       sta     Z96+1
00011Ar 2                       lda     LINNUM
00011Ar 2                       sta     L06FE
00011Ar 2                       lda     LINNUM+1
00011Ar 2                       sta     L06FE+1
00011Ar 2                       inc     LINNUM
00011Ar 2                       bne     LE2D2
00011Ar 2                       inc     LINNUM+1
00011Ar 2                       bne     LE2D2
00011Ar 2                       jmp     SYNERR
00011Ar 2               LE2D2:
00011Ar 2                       jsr     LF457
00011Ar 2                       ldx     #Z96
00011Ar 2                       jsr     CMPJMPADRS
00011Ar 2                       bcs     LE2FD
00011Ar 2               LE2DC:
00011Ar 2                       ldx     #$00
00011Ar 2                       lda     (JMPADRS+1,x)
00011Ar 2                       sta     (Z96,x)
00011Ar 2                       inc     JMPADRS+1
00011Ar 2                       bne     LE2E8
00011Ar 2                       inc     JMPADRS+2
00011Ar 2               LE2E8:
00011Ar 2                       inc     Z96
00011Ar 2                       bne     LE2EE
00011Ar 2                       inc     Z96+1
00011Ar 2               LE2EE:
00011Ar 2                       ldx     #VARTAB
00011Ar 2                       jsr     CMPJMPADRS
00011Ar 2                       bne     LE2DC
00011Ar 2                       lda     Z96
00011Ar 2                       sta     VARTAB
00011Ar 2                       lda     Z96+1
00011Ar 2                       sta     VARTAB+1
00011Ar 2               LE2FD:
00011Ar 2                       jsr     SETPTRS
00011Ar 2                       jsr     LE33D
00011Ar 2                       lda     INPUTBUFFER
00011Ar 2               LE306:
00011Ar 2                       beq     LE28E
00011Ar 2                       cmp     #$A5
00011Ar 2                       beq     LE306
00011Ar 2                       clc
00011Ar 2               .else
00011Ar 2  20 rr rr             jsr     FNDLIN
00011Dr 2  90 44                bcc     PUT_NEW_LINE
00011Fr 2  A0 01                ldy     #$01
000121r 2  B1 rr                lda     (LOWTR),y
000123r 2  85 rr                sta     INDEX+1
000125r 2  A5 rr                lda     VARTAB
000127r 2  85 rr                sta     INDEX
000129r 2  A5 rr                lda     LOWTR+1
00012Br 2  85 rr                sta     DEST+1
00012Dr 2  A5 rr                lda     LOWTR
00012Fr 2  88                   dey
000130r 2  F1 rr                sbc     (LOWTR),y
000132r 2  18                   clc
000133r 2  65 rr                adc     VARTAB
000135r 2  85 rr                sta     VARTAB
000137r 2  85 rr                sta     DEST
000139r 2  A5 rr                lda     VARTAB+1
00013Br 2  69 FF                adc     #$FF
00013Dr 2  85 rr                sta     VARTAB+1
00013Fr 2  E5 rr                sbc     LOWTR+1
000141r 2  AA                   tax
000142r 2  38                   sec
000143r 2  A5 rr                lda     LOWTR
000145r 2  E5 rr                sbc     VARTAB
000147r 2  A8                   tay
000148r 2  B0 03                bcs     L23A5
00014Ar 2  E8                   inx
00014Br 2  C6 rr                dec     DEST+1
00014Dr 2               L23A5:
00014Dr 2  18                   clc
00014Er 2  65 rr                adc     INDEX
000150r 2  90 03                bcc     L23AD
000152r 2  C6 rr                dec     INDEX+1
000154r 2  18                   clc
000155r 2               L23AD:
000155r 2  B1 rr                lda     (INDEX),y
000157r 2  91 rr                sta     (DEST),y
000159r 2  C8                   iny
00015Ar 2  D0 F9                bne     L23AD
00015Cr 2  E6 rr                inc     INDEX+1
00015Er 2  E6 rr                inc     DEST+1
000160r 2  CA                   dex
000161r 2  D0 F2                bne     L23AD
000163r 2               .endif
000163r 2               ; ----------------------------------------------------------------------------
000163r 2               PUT_NEW_LINE:
000163r 2               .ifndef KBD
000163r 2                 .ifdef CONFIG_2
000163r 2  20 rr rr             jsr     SETPTRS
000166r 2  20 rr rr             jsr     LE33D
000169r 2  AD 00 09             lda     INPUTBUFFER
00016Cr 2  F0 8B                beq     L2351
00016Er 2  18                   clc
00016Fr 2                 .else
00016Fr 2                       lda     INPUTBUFFER
00016Fr 2                       beq     FIX_LINKS
00016Fr 2                       lda     MEMSIZ
00016Fr 2                       ldy     MEMSIZ+1
00016Fr 2                       sta     FRETOP
00016Fr 2                       sty     FRETOP+1
00016Fr 2                 .endif
00016Fr 2               .endif
00016Fr 2  A5 rr                lda     VARTAB
000171r 2  85 rr                sta     HIGHTR
000173r 2  65 rr                adc     EOLPNTR
000175r 2  85 rr                sta     HIGHDS
000177r 2  A4 rr                ldy     VARTAB+1
000179r 2  84 rr                sty     HIGHTR+1
00017Br 2  90 01                bcc     L23D6
00017Dr 2  C8                   iny
00017Er 2               L23D6:
00017Er 2  84 rr                sty     HIGHDS+1
000180r 2  20 rr rr             jsr     BLTU
000183r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && (!.def(KBD))
000183r 2  A5 rr                lda     LINNUM
000185r 2  A4 rr                ldy     LINNUM+1
000187r 2  8D FE 08             sta     INPUTBUFFER-2
00018Ar 2  8C FF 08             sty     INPUTBUFFER-1
00018Dr 2               .endif
00018Dr 2  A5 rr                lda     STREND
00018Fr 2  A4 rr                ldy     STREND+1
000191r 2  85 rr                sta     VARTAB
000193r 2  84 rr                sty     VARTAB+1
000195r 2  A4 rr                ldy     EOLPNTR
000197r 2  88                   dey
000198r 2               ; ---COPY LINE INTO PROGRAM-------
000198r 2               L23E6:
000198r 2  B9 FC 08             lda     INPUTBUFFER-4,y
00019Br 2  91 rr                sta     (LOWTR),y
00019Dr 2  88                   dey
00019Er 2  10 F8                bpl     L23E6
0001A0r 2               
0001A0r 2               ; ----------------------------------------------------------------------------
0001A0r 2               ; CLEAR ALL VARIABLES
0001A0r 2               ; RE-ESTABLISH ALL FORWARD LINKS
0001A0r 2               ; ----------------------------------------------------------------------------
0001A0r 2               FIX_LINKS:
0001A0r 2  20 rr rr             jsr     SETPTRS
0001A3r 2               .ifdef CONFIG_2
0001A3r 2  20 rr rr             jsr     LE33D
0001A6r 2  4C rr rr             jmp     L2351
0001A9r 2               LE33D:
0001A9r 2               .endif
0001A9r 2  A5 rr                lda     TXTTAB
0001ABr 2  A4 rr                ldy     TXTTAB+1
0001ADr 2  85 rr                sta     INDEX
0001AFr 2  84 rr                sty     INDEX+1
0001B1r 2  18                   clc
0001B2r 2               L23FA:
0001B2r 2  A0 01                ldy     #$01
0001B4r 2  B1 rr                lda     (INDEX),y
0001B6r 2               .ifdef CONFIG_2
0001B6r 2  F0 1D                beq     RET3
0001B8r 2               .else
0001B8r 2                       jeq     L2351
0001B8r 2               .endif
0001B8r 2  A0 04                ldy     #$04
0001BAr 2               L2405:
0001BAr 2  C8                   iny
0001BBr 2  B1 rr                lda     (INDEX),y
0001BDr 2  D0 FB                bne     L2405
0001BFr 2  C8                   iny
0001C0r 2  98                   tya
0001C1r 2  65 rr                adc     INDEX
0001C3r 2  AA                   tax
0001C4r 2  A0 00                ldy     #$00
0001C6r 2  91 rr                sta     (INDEX),y
0001C8r 2  A5 rr                lda     INDEX+1
0001CAr 2  69 00                adc     #$00
0001CCr 2  C8                   iny
0001CDr 2  91 rr                sta     (INDEX),y
0001CFr 2  86 rr                stx     INDEX
0001D1r 2  85 rr                sta     INDEX+1
0001D3r 2  90 DD                bcc     L23FA	; always
0001D5r 2               
0001D5r 2               ; ----------------------------------------------------------------------------
0001D5r 2               .ifdef KBD
0001D5r 2               .include "kbd_loadsave.s"
0001D5r 2               .endif
0001D5r 2               
0001D5r 2               .ifdef CONFIG_2
0001D5r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001D5r 2               RET3:
0001D5r 2  60           		rts
0001D6r 2               .endif
0001D6r 2               
0001D6r 2               .include "inline.s"
0001D6r 3               .ifdef DB6502
0001D6r 3                       .include "tty.inc"
0001D6r 4                       .include "zeropage.inc"
0001D6r 5               .globalzp sp
0001D6r 5               .globalzp sreg
0001D6r 5               .globalzp regsave
0001D6r 5               .globalzp tmp1
0001D6r 5               .globalzp tmp2
0001D6r 5               .globalzp tmp3
0001D6r 5               .globalzp tmp4
0001D6r 5               .globalzp ptr1
0001D6r 5               .globalzp ptr2
0001D6r 5               .globalzp ptr3
0001D6r 5               .globalzp ptr4
0001D6r 5               .globalzp lcd_temp_char1
0001D6r 5               .globalzp lcd_temp_char2
0001D6r 5               .globalzp lcd_temp_char3
0001D6r 5               .globalzp acia_conn
0001D6r 5               .globalzp acia_rx_rptr
0001D6r 5               .globalzp acia_rx_wptr
0001D6r 5               .globalzp acia_tx_rptr
0001D6r 5               .globalzp acia_tx_wptr
0001D6r 5               .globalzp keyboard_conn
0001D6r 5               .globalzp keyboard_rptr
0001D6r 5               .globalzp keyboard_wptr
0001D6r 5               .globalzp tty_config
0001D6r 5               .globalzp system_break_flag
0001D6r 5               .globalzp system_break_address
0001D6r 5               .globalzp system_break_sp
0001D6r 5               .globalzp user_break_address
0001D6r 5               .globalzp user_break_sp
0001D6r 5               .globalzp user_irq_address
0001D6r 5               .globalzp zp_sd_address  ; 2 bytes
0001D6r 5               .globalzp zp_sd_currentsector  ; 4 bytes
0001D6r 5               .globalzp zp_fat32_variables  ; 24 bytes
0001D6r 5               
0001D6r 5               
0001D6r 5               
0001D6r 4               
0001D6r 4                       .import _tty_init
0001D6r 4                       .import _tty_read_line
0001D6r 4                       .import tty_read_line
0001D6r 4                       .import _tty_write
0001D6r 4                       .import _tty_writeln
0001D6r 4                       .import _tty_write_hex
0001D6r 4                       .import _tty_write_dec
0001D6r 4                       .import _tty_send_newline
0001D6r 4                       .import _tty_send_character
0001D6r 4               
0001D6r 4                       .macro tty_read_line buffer, buffer_size
0001D6r 4                       pha
0001D6r 4                       phx
0001D6r 4                       phy
0001D6r 4                       .if (.match (.left (1, {buffer}), #))
0001D6r 4                           ; immediate mode
0001D6r 4                           lda #<(.right (.tcount ({buffer})-1, {buffer}))
0001D6r 4                           ldx #>(.right (.tcount ({buffer})-1, {buffer}))
0001D6r 4                       .else
0001D6r 4                           ; assume absolute or zero page
0001D6r 4                           lda buffer
0001D6r 4                           ldx 1+(buffer)
0001D6r 4                       .endif
0001D6r 4                       ldy #(buffer_size)
0001D6r 4                       jsr tty_read_line
0001D6r 4                       ply
0001D6r 4                       plx
0001D6r 4                       pla
0001D6r 4                       .endmacro
0001D6r 4               
0001D6r 4                       .macro write_tty string
0001D6r 4                       pha
0001D6r 4                       phx
0001D6r 4                       .if (.match (.left (1, {string}), #))
0001D6r 4                           ; immediate mode
0001D6r 4                           lda #<(.right (.tcount ({string})-1, {string}))
0001D6r 4                           ldx #>(.right (.tcount ({string})-1, {string}))
0001D6r 4                       .else
0001D6r 4                           ; assume absolute or zero page
0001D6r 4                           lda string
0001D6r 4                           ldx 1+(string)
0001D6r 4                       .endif
0001D6r 4                       jsr _tty_write
0001D6r 4                       plx
0001D6r 4                       pla
0001D6r 4                       .endmacro
0001D6r 4               
0001D6r 4                       .macro writeln_tty string
0001D6r 4                       pha
0001D6r 4                       phx
0001D6r 4                       .if (.match (.left (1, {string}), #))
0001D6r 4                           ; immediate mode
0001D6r 4                           lda #<(.right (.tcount ({string})-1, {string}))
0001D6r 4                           ldx #>(.right (.tcount ({string})-1, {string}))
0001D6r 4                       .else
0001D6r 4                           ; assume absolute or zero page
0001D6r 4                           lda string
0001D6r 4                           ldx 1+(string)
0001D6r 4                       .endif
0001D6r 4                       jsr _tty_writeln
0001D6r 4                       plx
0001D6r 4                       pla
0001D6r 4                       .endmacro
0001D6r 4               
0001D6r 4                       .macro write_tty_hex
0001D6r 4                       jsr _tty_write_hex
0001D6r 4                       .endmacro
0001D6r 4               
0001D6r 4                       .macro write_tty_address pointer
0001D6r 4                       pha
0001D6r 4                       .if (.match (.left (1, {pointer}), #))
0001D6r 4                           ; immediate mode
0001D6r 4                           lda #>(.right (.tcount ({pointer})-1, {pointer}))
0001D6r 4                           jsr _tty_write_hex
0001D6r 4                           lda #<(.right (.tcount ({pointer})-1, {pointer}))
0001D6r 4                           jsr _tty_write_hex
0001D6r 4                       .else
0001D6r 4                           ; assume absolute or zero page
0001D6r 4                           lda 1+(pointer)
0001D6r 4                           jsr _tty_write_hex
0001D6r 4                           lda pointer
0001D6r 4                           jsr _tty_write_hex
0001D6r 4                       .endif
0001D6r 4                       pla
0001D6r 4                       .endmacro
0001D6r 4               
0001D6r 4                       .macro write_tty_dec value
0001D6r 4                       pha
0001D6r 4                       phx
0001D6r 4                       .if (.match (.left (1, {value}), #))
0001D6r 4                           ; immediate mode
0001D6r 4                           lda #<(.right (.tcount ({value})-1, {value}))
0001D6r 4                           ldx #>(.right (.tcount ({value})-1, {value}))
0001D6r 4                       .else
0001D6r 4                           ; assume absolute or zero page
0001D6r 4                           lda value
0001D6r 4                           ldx 1+(value)
0001D6r 4                       .endif
0001D6r 4                       jsr _tty_write_dec
0001D6r 4                       plx
0001D6r 4                       pla
0001D6r 4                       .endmacro
0001D6r 4               
0001D6r 4               TTY_CONFIG_INPUT_SERIAL   = %00000001
0001D6r 4               TTY_CONFIG_INPUT_KEYBOARD = %00000010
0001D6r 4               TTY_CONFIG_OUTPUT_SERIAL  = %00000100
0001D6r 4               TTY_CONFIG_OUTPUT_LCD     = %00001000
0001D6r 4               TTY_CONFIG_DISABLE_SERIAL = %00001010
0001D6r 4               
0001D6r 3               .endif
0001D6r 3               
0001D6r 3               .segment "CODE"
0001D6r 3               
0001D6r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001D6r 3               L2420:
0001D6r 3                 .ifdef OSI
0001D6r 3                       jsr     OUTDO
0001D6r 3                 .endif
0001D6r 3                 .ifdef DB6502
0001D6r 3                       jsr SEND_BACKSPACE
0001D6r 3                 .endif
0001D6r 3                       dex
0001D6r 3                       bpl     INLIN2
0001D6r 3               L2423:
0001D6r 3                 .ifdef OSI
0001D6r 3                       jsr     OUTDO
0001D6r 3                 .endif
0001D6r 3                       jsr     CRDO
0001D6r 3               .endif
0001D6r 3               
0001D6r 3               ; ----------------------------------------------------------------------------
0001D6r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001D6r 3               ; ----------------------------------------------------------------------------
0001D6r 3               .ifndef KBD
0001D6r 3               INLIN:
0001D6r 3                 .ifdef APPLE
0001D6r 3                       ldx     #$DD
0001D6r 3               INLIN1:
0001D6r 3                       stx     $33
0001D6r 3                       jsr     L2900
0001D6r 3                       cpx     #$EF
0001D6r 3                       bcs     L0C32
0001D6r 3                       ldx     #$EF
0001D6r 3               L0C32:
0001D6r 3                       lda     #$00
0001D6r 3                       sta     INPUTBUFFER,x
0001D6r 3                       ldx     #<INPUTBUFFER-1
0001D6r 3                       ldy     #>INPUTBUFFER-1
0001D6r 3                       rts
0001D6r 3                 .endif
0001D6r 3                 .ifdef DB6502
0001D6r 3  48 DA 5A A9          tty_read_line #INPUTBUFFER, 80
0001DAr 3  00 A2 09 A0  
0001DEr 3  50 20 rr rr  
0001E5r 3  A2 FF                ldx     #<(INPUTBUFFER-1)
0001E7r 3  A0 08                ldy     #>(INPUTBUFFER-1)
0001E9r 3  60                   rts
0001EAr 3                 .endif
0001EAr 3               
0001EAr 3                 .if (!.def(APPLE)) && (!.def(DB6502))
0001EAr 3                 ;.ifndef APPLE
0001EAr 3                       ldx     #$00
0001EAr 3               INLIN2:
0001EAr 3                       jsr     GETLN
0001EAr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001EAr 3                       cmp     #$07
0001EAr 3                       beq     L2443
0001EAr 3                   .endif
0001EAr 3                       cmp     #$0D
0001EAr 3                       beq     L2453
0001EAr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001EAr 3                       cmp     #$20
0001EAr 3                       bcc     INLIN2
0001EAr 3                     .if .def(MICROTAN) || .def(DB6502)
0001EAr 3                       cmp     #$80
0001EAr 3                     .else
0001EAr 3                       cmp     #$7D
0001EAr 3                     .endif
0001EAr 3                       bcs     INLIN2
0001EAr 3                       cmp     #$40 ; @
0001EAr 3                       beq     L2423
0001EAr 3                     .if .def(MICROTAN) || .def(DB6502)
0001EAr 3                       cmp     #$7F ; DEL
0001EAr 3                     .else
0001EAr 3                       cmp     #$5F ; _
0001EAr 3                     .endif
0001EAr 3                       beq     L2420
0001EAr 3               L2443:
0001EAr 3                     .ifdef MICROTAN
0001EAr 3                       cpx     #$4F
0001EAr 3                     .else
0001EAr 3                       cpx     #$47
0001EAr 3                     .endif
0001EAr 3                       bcs     L244C
0001EAr 3                   .endif
0001EAr 3                       sta     INPUTBUFFER,x
0001EAr 3                       inx
0001EAr 3                   .if .def(OSI) || .def(DB6502)
0001EAr 3                       .byte   $2C
0001EAr 3                   .else
0001EAr 3                       bne     INLIN2
0001EAr 3                   .endif
0001EAr 3               L244C:
0001EAr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001EAr 3                       lda     #$07 ; BEL
0001EAr 3                       jsr     OUTDO
0001EAr 3                       bne     INLIN2
0001EAr 3                   .endif
0001EAr 3               L2453:
0001EAr 3                       jmp     L29B9
0001EAr 3                 .endif
0001EAr 3               .endif
0001EAr 3               
0001EAr 3               .ifndef KBD
0001EAr 3                 .ifndef APPLE
0001EAr 3               GETLN:
0001EAr 3                   .ifdef CONFIG_FILE
0001EAr 3                       jsr     CHRIN
0001EAr 3                       ldy     CURDVC
0001EAr 3                       bne     L2465
0001EAr 3                   .else
0001EAr 3  20 rr rr             jsr     MONRDKEY
0001EDr 3                   .endif
0001EDr 3                   .ifdef OSI
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       nop
0001EDr 3                       and     #$7F
0001EDr 3                   .endif
0001EDr 3                 .endif ;/* APPLE */
0001EDr 3                 .ifdef APPLE
0001EDr 3               RDKEY:
0001EDr 3                       jsr     LFD0C
0001EDr 3                       and     #$7F
0001EDr 3                 .endif
0001EDr 3  C9 0F                cmp     #$0F
0001EFr 3  D0 08                bne     L2465
0001F1r 3  48                   pha
0001F2r 3  A5 rr                lda     Z14
0001F4r 3  49 FF                eor     #$FF
0001F6r 3  85 rr                sta     Z14
0001F8r 3  68                   pla
0001F9r 3               L2465:
0001F9r 3  60                   rts
0001FAr 3               .endif ;/* KBD */
0001FAr 3               
0001FAr 2               
0001FAr 2               ; ----------------------------------------------------------------------------
0001FAr 2               ; TOKENIZE THE INPUT LINE
0001FAr 2               ; ----------------------------------------------------------------------------
0001FAr 2               PARSE_INPUT_LINE:
0001FAr 2  A6 rr                ldx     TXTPTR
0001FCr 2  A0 04                ldy     #$04
0001FEr 2  84 rr                sty     DATAFLG
000200r 2               L246C:
000200r 2  BD 00 09             lda     INPUTBUFFERX,x
000203r 2               .ifdef CONFIG_CBM_ALL
000203r 2                       bpl     LC49E
000203r 2                       cmp     #$FF
000203r 2                       beq     L24AC
000203r 2                       inx
000203r 2                       bne     L246C
000203r 2               LC49E:
000203r 2               .endif
000203r 2  C9 20                cmp     #$20
000205r 2  F0 37                beq     L24AC
000207r 2  85 rr                sta     ENDCHR
000209r 2  C9 22                cmp     #$22
00020Br 2  F0 56                beq     L24D0
00020Dr 2  24 rr                bit     DATAFLG
00020Fr 2  70 2D                bvs     L24AC
000211r 2  C9 3F                cmp     #$3F
000213r 2  D0 04                bne     L2484
000215r 2  A9 97                lda     #TOKEN_PRINT
000217r 2  D0 25                bne     L24AC
000219r 2               L2484:
000219r 2  C9 30                cmp     #$30
00021Br 2  90 04                bcc     L248C
00021Dr 2  C9 3C                cmp     #$3C
00021Fr 2  90 1D                bcc     L24AC
000221r 2               ; ----------------------------------------------------------------------------
000221r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000221r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000221r 2               ; ----------------------------------------------------------------------------
000221r 2               L248C:
000221r 2  84 rr                sty     STRNG2
000223r 2  A0 00                ldy     #$00
000225r 2  84 rr                sty     EOLPNTR
000227r 2  88                   dey
000228r 2  86 rr                stx     TXTPTR
00022Ar 2  CA                   dex
00022Br 2               L2496:
00022Br 2  C8                   iny
00022Cr 2               L2497:
00022Cr 2  E8                   inx
00022Dr 2               L2498:
00022Dr 2               .ifdef KBD
00022Dr 2                       jsr     GET_UPPER
00022Dr 2               .else
00022Dr 2  BD 00 09             lda     INPUTBUFFERX,x
000230r 2                 .ifndef CONFIG_2
000230r 2                       cmp     #$20
000230r 2                       beq     L2497
000230r 2                 .endif
000230r 2               .endif
000230r 2  38                   sec
000231r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
000234r 2  F0 F5                beq     L2496
000236r 2  C9 80                cmp     #$80
000238r 2  D0 30                bne     L24D7
00023Ar 2  05 rr                ora     EOLPNTR
00023Cr 2               ; ----------------------------------------------------------------------------
00023Cr 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
00023Cr 2               ; ----------------------------------------------------------------------------
00023Cr 2               L24AA:
00023Cr 2  A4 rr                ldy     STRNG2
00023Er 2               L24AC:
00023Er 2  E8                   inx
00023Fr 2  C8                   iny
000240r 2  99 FB 08             sta     INPUTBUFFER-5,y
000243r 2  B9 FB 08             lda     INPUTBUFFER-5,y
000246r 2  F0 36                beq     L24EA
000248r 2  38                   sec
000249r 2  E9 3A                sbc     #$3A
00024Br 2  F0 04                beq     L24BF
00024Dr 2  C9 49                cmp     #$49
00024Fr 2  D0 02                bne     L24C1
000251r 2               L24BF:
000251r 2  85 rr                sta     DATAFLG
000253r 2               L24C1:
000253r 2  38                   sec
000254r 2  E9 54                sbc     #TOKEN_REM-':'
000256r 2  D0 A8                bne     L246C
000258r 2  85 rr                sta     ENDCHR
00025Ar 2               ; ----------------------------------------------------------------------------
00025Ar 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00025Ar 2               ; BY COPYING CHARS UP TO ENDCHR.
00025Ar 2               ; ----------------------------------------------------------------------------
00025Ar 2               L24C8:
00025Ar 2  BD 00 09             lda     INPUTBUFFERX,x
00025Dr 2  F0 DF                beq     L24AC
00025Fr 2  C5 rr                cmp     ENDCHR
000261r 2  F0 DB                beq     L24AC
000263r 2               L24D0:
000263r 2  C8                   iny
000264r 2  99 FB 08             sta     INPUTBUFFER-5,y
000267r 2  E8                   inx
000268r 2  D0 F0                bne     L24C8
00026Ar 2               ; ----------------------------------------------------------------------------
00026Ar 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
00026Ar 2               ; ----------------------------------------------------------------------------
00026Ar 2               L24D7:
00026Ar 2  A6 rr                ldx     TXTPTR
00026Cr 2  E6 rr                inc     EOLPNTR
00026Er 2               L24DB:
00026Er 2  C8                   iny
00026Fr 2  B9 rr rr             lda     MATHTBL+28+1,y
000272r 2  10 FA                bpl     L24DB
000274r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000277r 2  D0 B4                bne     L2498
000279r 2  BD 00 09             lda     INPUTBUFFERX,x
00027Cr 2  10 BE                bpl     L24AA
00027Er 2               ; ---END OF LINE------------------
00027Er 2               L24EA:
00027Er 2  99 FD 08             sta     INPUTBUFFER-3,y
000281r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000281r 2  C6 rr                dec     TXTPTR+1
000283r 2               .endif
000283r 2  A9 FF                lda     #<(INPUTBUFFER-1)
000285r 2  85 rr                sta     TXTPTR
000287r 2  60                   rts
000288r 2               
000288r 2               ; ----------------------------------------------------------------------------
000288r 2               ; SEARCH FOR LINE
000288r 2               ;
000288r 2               ; (LINNUM) = LINE # TO FIND
000288r 2               ; IF NOT FOUND:  CARRY = 0
000288r 2               ;	LOWTR POINTS AT NEXT LINE
000288r 2               ; IF FOUND:      CARRY = 1
000288r 2               ;	LOWTR POINTS AT LINE
000288r 2               ; ----------------------------------------------------------------------------
000288r 2               FNDLIN:
000288r 2               .ifdef KBD
000288r 2                       jsr     CHRGET
000288r 2                       jmp     LE444
000288r 2               LE440:
000288r 2                       php
000288r 2                       jsr     LINGET
000288r 2               LE444:
000288r 2                       jsr     LF457
000288r 2                       ldx     #$FF
000288r 2                       plp
000288r 2                       beq     LE464
000288r 2                       jsr     CHRGOT
000288r 2                       beq     L2520
000288r 2                       cmp     #$A5
000288r 2                       bne     L2520
000288r 2                       jsr     CHRGET
000288r 2                       beq     LE464
000288r 2                       bcs     LE461
000288r 2                       jsr     LINGET
000288r 2                       beq     L2520
000288r 2               LE461:
000288r 2                       jmp     SYNERR
000288r 2               LE464:
000288r 2                       stx     LINNUM
000288r 2                       stx     LINNUM+1
000288r 2               .else
000288r 2  A5 rr                lda     TXTTAB
00028Ar 2  A6 rr                ldx     TXTTAB+1
00028Cr 2               FL1:
00028Cr 2  A0 01                ldy     #$01
00028Er 2  85 rr                sta     LOWTR
000290r 2  86 rr                stx     LOWTR+1
000292r 2  B1 rr                lda     (LOWTR),y
000294r 2  F0 1F                beq     L251F
000296r 2  C8                   iny
000297r 2  C8                   iny
000298r 2  A5 rr                lda     LINNUM+1
00029Ar 2  D1 rr                cmp     (LOWTR),y
00029Cr 2  90 18                bcc     L2520
00029Er 2  F0 03                beq     L250D
0002A0r 2  88                   dey
0002A1r 2  D0 09                bne     L2516
0002A3r 2               L250D:
0002A3r 2  A5 rr                lda     LINNUM
0002A5r 2  88                   dey
0002A6r 2  D1 rr                cmp     (LOWTR),y
0002A8r 2  90 0C                bcc     L2520
0002AAr 2  F0 0A                beq     L2520
0002ACr 2               L2516:
0002ACr 2  88                   dey
0002ADr 2  B1 rr                lda     (LOWTR),y
0002AFr 2  AA                   tax
0002B0r 2  88                   dey
0002B1r 2  B1 rr                lda     (LOWTR),y
0002B3r 2  B0 D7                bcs     FL1
0002B5r 2               L251F:
0002B5r 2  18                   clc
0002B6r 2               .endif
0002B6r 2               L2520:
0002B6r 2  60                   rts
0002B7r 2               
0002B7r 2               ; ----------------------------------------------------------------------------
0002B7r 2               ; "NEW" STATEMENT
0002B7r 2               ; ----------------------------------------------------------------------------
0002B7r 2               NEW:
0002B7r 2  D0 FD                bne     L2520
0002B9r 2               SCRTCH:
0002B9r 2  A9 00                lda     #$00
0002BBr 2  A8                   tay
0002BCr 2  91 rr                sta     (TXTTAB),y
0002BEr 2  C8                   iny
0002BFr 2  91 rr                sta     (TXTTAB),y
0002C1r 2  A5 rr                lda     TXTTAB
0002C3r 2               .ifdef CONFIG_2
0002C3r 2  18           		clc
0002C4r 2               .endif
0002C4r 2  69 02                adc     #$02
0002C6r 2  85 rr                sta     VARTAB
0002C8r 2  A5 rr                lda     TXTTAB+1
0002CAr 2  69 00                adc     #$00
0002CCr 2  85 rr                sta     VARTAB+1
0002CEr 2               ; ----------------------------------------------------------------------------
0002CEr 2               SETPTRS:
0002CEr 2  20 rr rr             jsr     STXTPT
0002D1r 2               .ifdef CONFIG_11A
0002D1r 2  A9 00                lda     #$00
0002D3r 2               
0002D3r 2               ; ----------------------------------------------------------------------------
0002D3r 2               ; "CLEAR" STATEMENT
0002D3r 2               ; ----------------------------------------------------------------------------
0002D3r 2               CLEAR:
0002D3r 2  D0 2A                bne     L256A
0002D5r 2               .endif
0002D5r 2               CLEARC:
0002D5r 2               .ifdef KBD
0002D5r 2                       lda     #<CONST_MEMSIZ
0002D5r 2                       ldy     #>CONST_MEMSIZ
0002D5r 2               .else
0002D5r 2  A5 rr                lda     MEMSIZ
0002D7r 2  A4 rr                ldy     MEMSIZ+1
0002D9r 2               .endif
0002D9r 2  85 rr                sta     FRETOP
0002DBr 2  84 rr                sty     FRETOP+1
0002DDr 2               .ifdef CONFIG_CBM_ALL
0002DDr 2                       jsr     CLALL
0002DDr 2               .endif
0002DDr 2  A5 rr                lda     VARTAB
0002DFr 2  A4 rr                ldy     VARTAB+1
0002E1r 2  85 rr                sta     ARYTAB
0002E3r 2  84 rr                sty     ARYTAB+1
0002E5r 2  85 rr                sta     STREND
0002E7r 2  84 rr                sty     STREND+1
0002E9r 2  20 rr rr             jsr     RESTORE
0002ECr 2               ; ----------------------------------------------------------------------------
0002ECr 2               STKINI:
0002ECr 2  A2 rr                ldx     #TEMPST
0002EEr 2  86 rr                stx     TEMPPT
0002F0r 2  68                   pla
0002F1r 2               .ifdef CONFIG_2
0002F1r 2  A8           		tay
0002F2r 2               .else
0002F2r 2                       sta     STACK+STACK_TOP+1
0002F2r 2               .endif
0002F2r 2  68                   pla
0002F3r 2               .ifndef CONFIG_2
0002F3r 2                       sta     STACK+STACK_TOP+2
0002F3r 2               .endif
0002F3r 2  A2 FC                ldx     #STACK_TOP
0002F5r 2  9A                   txs
0002F6r 2               .ifdef CONFIG_2
0002F6r 2  48                   pha
0002F7r 2  98                   tya
0002F8r 2  48                   pha
0002F9r 2               .endif
0002F9r 2  A9 00                lda     #$00
0002FBr 2  85 rr                sta     OLDTEXT+1
0002FDr 2  85 rr                sta     SUBFLG
0002FFr 2               L256A:
0002FFr 2  60                   rts
000300r 2               
000300r 2               ; ----------------------------------------------------------------------------
000300r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
000300r 2               ; ----------------------------------------------------------------------------
000300r 2               STXTPT:
000300r 2  18                   clc
000301r 2  A5 rr                lda     TXTTAB
000303r 2  69 FF                adc     #$FF
000305r 2  85 rr                sta     TXTPTR
000307r 2  A5 rr                lda     TXTTAB+1
000309r 2  69 FF                adc     #$FF
00030Br 2  85 rr                sta     TXTPTR+1
00030Dr 2  60                   rts
00030Er 2               
00030Er 2               ; ----------------------------------------------------------------------------
00030Er 2               .ifdef KBD
00030Er 2               LE4C0:
00030Er 2                       ldy     #<LE444
00030Er 2                       ldx     #>LE444
00030Er 2               LE4C4:
00030Er 2                       jsr     LFFD6
00030Er 2                       jsr     LFFED
00030Er 2                       lda     $0504
00030Er 2                       clc
00030Er 2                       adc     #$08
00030Er 2                       sta     $0504
00030Er 2                       rts
00030Er 2               
00030Er 2               CMPJMPADRS:
00030Er 2                       lda     1,x
00030Er 2                       cmp     JMPADRS+2
00030Er 2                       bne     LE4DE
00030Er 2                       lda     0,x
00030Er 2                       cmp     JMPADRS+1
00030Er 2               LE4DE:
00030Er 2                       rts
00030Er 2               .endif
00030Er 2               
00030Er 2               ; ----------------------------------------------------------------------------
00030Er 2               ; "LIST" STATEMENT
00030Er 2               ; ----------------------------------------------------------------------------
00030Er 2               LIST:
00030Er 2               .ifdef KBD
00030Er 2                       jsr     LE440
00030Er 2                       bne     LE4DE
00030Er 2                       pla
00030Er 2                       pla
00030Er 2               L25A6:
00030Er 2                       jsr     CRDO
00030Er 2               .else
00030Er 2                 .ifdef MICROTAN
00030Er 2                       php
00030Er 2                       jmp     LE21C ; patch
00030Er 2               LC57E:
00030Er 2                 .else
00030Er 2  90 06                bcc     L2581
000310r 2  F0 04                beq     L2581
000312r 2  C9 A4                cmp     #TOKEN_MINUS
000314r 2  D0 E9                bne     L256A
000316r 2               L2581:
000316r 2  20 rr rr             jsr     LINGET
000319r 2                 .endif
000319r 2  20 rr rr             jsr     FNDLIN
00031Cr 2                 .ifdef MICROTAN
00031Cr 2                       plp
00031Cr 2                       beq     L2598
00031Cr 2                 .endif
00031Cr 2  20 rr rr             jsr     CHRGOT
00031Fr 2                 .ifdef MICROTAN
00031Fr 2                       beq     L25A6
00031Fr 2                 .else
00031Fr 2  F0 0C                beq     L2598
000321r 2                 .endif
000321r 2  C9 A4                cmp     #TOKEN_MINUS
000323r 2  D0 91                bne     L2520
000325r 2  20 rr rr             jsr     CHRGET
000328r 2                 .ifdef MICROTAN
000328r 2                       beq     L2598
000328r 2                       jsr     LINGET
000328r 2                       beq     L25A6
000328r 2                       rts
000328r 2                 .else
000328r 2  20 rr rr             jsr     LINGET
00032Br 2  D0 89                bne     L2520
00032Dr 2                 .endif
00032Dr 2               L2598:
00032Dr 2                 .ifndef MICROTAN
00032Dr 2  68                   pla
00032Er 2  68                   pla
00032Fr 2  A5 rr                lda     LINNUM
000331r 2  05 rr                ora     LINNUM+1
000333r 2  D0 06                bne     L25A6
000335r 2                 .endif
000335r 2  A9 FF                lda     #$FF
000337r 2  85 rr                sta     LINNUM
000339r 2  85 rr                sta     LINNUM+1
00033Br 2               L25A6:
00033Br 2                 .ifdef MICROTAN
00033Br 2                       pla
00033Br 2                       pla
00033Br 2                 .endif
00033Br 2               L25A6X:
00033Br 2               .endif
00033Br 2  A0 01                ldy     #$01
00033Dr 2               .ifdef CONFIG_DATAFLG
00033Dr 2  84 rr                sty     DATAFLG
00033Fr 2               .endif
00033Fr 2  B1 rr                lda     (LOWTRX),y
000341r 2  F0 43                beq     L25E5
000343r 2               .ifdef MICROTAN
000343r 2                       jmp     LE21F
000343r 2               LC5A9:
000343r 2               .else
000343r 2  20 rr rr             jsr     ISCNTC
000346r 2               .endif
000346r 2               .ifndef KBD
000346r 2  20 rr rr             jsr     CRDO
000349r 2               .endif
000349r 2  C8                   iny
00034Ar 2  B1 rr                lda     (LOWTRX),y
00034Cr 2  AA                   tax
00034Dr 2  C8                   iny
00034Er 2  B1 rr                lda     (LOWTRX),y
000350r 2  C5 rr                cmp     LINNUM+1
000352r 2  D0 04                bne     L25C1
000354r 2  E4 rr                cpx     LINNUM
000356r 2  F0 02                beq     L25C3
000358r 2               L25C1:
000358r 2  B0 2C                bcs     L25E5
00035Ar 2               ; ---LIST ONE LINE----------------
00035Ar 2               L25C3:
00035Ar 2  84 rr                sty     FORPNT
00035Cr 2  20 rr rr             jsr     LINPRT
00035Fr 2  A9 20                lda     #$20
000361r 2               L25CA:
000361r 2  A4 rr                ldy     FORPNT
000363r 2  29 7F                and     #$7F
000365r 2               L25CE:
000365r 2  20 rr rr             jsr     OUTDO
000368r 2               .ifdef CONFIG_DATAFLG
000368r 2  C9 22                cmp     #$22
00036Ar 2  D0 06                bne     LA519
00036Cr 2  A5 rr                lda     DATAFLG
00036Er 2  49 FF                eor     #$FF
000370r 2  85 rr                sta     DATAFLG
000372r 2               LA519:
000372r 2               .endif
000372r 2  C8                   iny
000373r 2               .ifdef CONFIG_11
000373r 2  F0 11                beq     L25E5
000375r 2               .endif
000375r 2  B1 rr                lda     (LOWTRX),y
000377r 2  D0 10                bne     L25E8
000379r 2  A8                   tay
00037Ar 2  B1 rr                lda     (LOWTRX),y
00037Cr 2  AA                   tax
00037Dr 2  C8                   iny
00037Er 2  B1 rr                lda     (LOWTRX),y
000380r 2  86 rr                stx     LOWTRX
000382r 2  85 rr                sta     LOWTRX+1
000384r 2               .ifdef MICROTAN
000384r 2                       bne     L25A6X
000384r 2               .else
000384r 2  D0 B5                bne     L25A6
000386r 2               .endif
000386r 2               L25E5:
000386r 2  4C rr rr             jmp     RESTART
000389r 2               L25E8:
000389r 2  10 DA                bpl     L25CE
00038Br 2               .ifdef CONFIG_DATAFLG
00038Br 2  C9 FF                cmp     #$FF
00038Dr 2  F0 D6                beq     L25CE
00038Fr 2  24 rr                bit     DATAFLG
000391r 2  30 D2                bmi     L25CE
000393r 2               .endif
000393r 2  38                   sec
000394r 2  E9 7F                sbc     #$7F
000396r 2  AA                   tax
000397r 2  84 rr                sty     FORPNT
000399r 2  A0 FF                ldy     #$FF
00039Br 2               L25F2:
00039Br 2  CA                   dex
00039Cr 2  F0 08                beq     L25FD
00039Er 2               L25F5:
00039Er 2  C8                   iny
00039Fr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003A2r 2  10 FA                bpl     L25F5
0003A4r 2  30 F5                bmi     L25F2
0003A6r 2               L25FD:
0003A6r 2  C8                   iny
0003A7r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003AAr 2  30 B5                bmi     L25CA
0003ACr 2  20 rr rr             jsr     OUTDO
0003AFr 2  D0 F5                bne     L25FD	; always
0003B1r 2               
0003B1r 2               
0003B1r 1               .include "flow1.s"
0003B1r 2               .segment "CODE"
0003B1r 2               
0003B1r 2               ; ----------------------------------------------------------------------------
0003B1r 2               ; "FOR" STATEMENT
0003B1r 2               ;
0003B1r 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003B1r 2               ; 2 -- TXTPTR
0003B1r 2               ; 2 -- LINE NUMBER
0003B1r 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003B1r 2               ; 1 -- STEP SIGN
0003B1r 2               ; 5 -- STEP VALUE
0003B1r 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003B1r 2               ; 1 -- FOR TOKEN ($81)
0003B1r 2               ; ----------------------------------------------------------------------------
0003B1r 2               FOR:
0003B1r 2  A9 80                lda     #$80
0003B3r 2  85 rr                sta     SUBFLG
0003B5r 2  20 rr rr             jsr     LET
0003B8r 2  20 rr rr             jsr     GTFORPNT
0003BBr 2  D0 05                bne     L2619
0003BDr 2  8A                   txa
0003BEr 2  69 0D                adc     #FOR_STACK1
0003C0r 2  AA                   tax
0003C1r 2  9A                   txs
0003C2r 2               L2619:
0003C2r 2  68                   pla
0003C3r 2  68                   pla
0003C4r 2  A9 08                lda     #FOR_STACK2
0003C6r 2  20 rr rr             jsr     CHKMEM
0003C9r 2  20 rr rr             jsr     DATAN
0003CCr 2  18                   clc
0003CDr 2  98                   tya
0003CEr 2  65 rr                adc     TXTPTR
0003D0r 2  48                   pha
0003D1r 2  A5 rr                lda     TXTPTR+1
0003D3r 2  69 00                adc     #$00
0003D5r 2  48                   pha
0003D6r 2  A5 rr                lda     CURLIN+1
0003D8r 2  48                   pha
0003D9r 2  A5 rr                lda     CURLIN
0003DBr 2  48                   pha
0003DCr 2  A9 9D                lda     #TOKEN_TO
0003DEr 2  20 rr rr             jsr     SYNCHR
0003E1r 2  20 rr rr             jsr     CHKNUM
0003E4r 2  20 rr rr             jsr     FRMNUM
0003E7r 2  A5 rr                lda     FACSIGN
0003E9r 2  09 7F                ora     #$7F
0003EBr 2  25 rr                and     FAC+1
0003EDr 2  85 rr                sta     FAC+1
0003EFr 2  A9 rr                lda     #<STEP
0003F1r 2  A0 rr                ldy     #>STEP
0003F3r 2  85 rr                sta     INDEX
0003F5r 2  84 rr                sty     INDEX+1
0003F7r 2  4C rr rr             jmp     FRM_STACK3
0003FAr 2               
0003FAr 2               ; ----------------------------------------------------------------------------
0003FAr 2               ; "STEP" PHRASE OF "FOR" STATEMENT
0003FAr 2               ; ----------------------------------------------------------------------------
0003FAr 2               STEP:
0003FAr 2  A9 rr                lda     #<CON_ONE
0003FCr 2  A0 rr                ldy     #>CON_ONE
0003FEr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000401r 2  20 rr rr             jsr     CHRGOT
000404r 2  C9 A2                cmp     #TOKEN_STEP
000406r 2  D0 06                bne     L2665
000408r 2  20 rr rr             jsr     CHRGET
00040Br 2  20 rr rr             jsr     FRMNUM
00040Er 2               L2665:
00040Er 2  20 rr rr             jsr     SIGN
000411r 2  20 rr rr             jsr     FRM_STACK2
000414r 2  A5 rr                lda     FORPNT+1
000416r 2  48                   pha
000417r 2  A5 rr                lda     FORPNT
000419r 2  48                   pha
00041Ar 2  A9 81                lda     #$81
00041Cr 2  48                   pha
00041Dr 2               
00041Dr 2               ; ----------------------------------------------------------------------------
00041Dr 2               ; PERFORM NEXT STATEMENT
00041Dr 2               ; ----------------------------------------------------------------------------
00041Dr 2               NEWSTT:
00041Dr 2  20 rr rr             jsr     ISCNTC
000420r 2  A5 rr                lda     TXTPTR
000422r 2  A4 rr                ldy     TXTPTR+1
000424r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000424r 2  C0 09                cpy     #>INPUTBUFFER
000426r 2                 .ifdef CBM2
000426r 2                       nop
000426r 2                 .endif
000426r 2  F0 04                beq     LC6D4
000428r 2               .else
000428r 2               ; BUG on AppleSoft I,
000428r 2               ; fixed differently on AppleSoft II (ldx/inx)
000428r 2                       beq     L2683
000428r 2               .endif
000428r 2  85 rr                sta     OLDTEXT
00042Ar 2  84 rr                sty     OLDTEXT+1
00042Cr 2               LC6D4:
00042Cr 2  A0 00                ldy     #$00
00042Er 2               L2683:
00042Er 2  B1 rr                lda     (TXTPTR),y
000430r 2               .ifndef CONFIG_11
000430r 2                       beq     LA5DC	; old: 1 cycle more on generic case
000430r 2                       cmp     #$3A
000430r 2                       beq     NEWSTT2
000430r 2               SYNERR1:
000430r 2                       jmp     SYNERR
000430r 2               LA5DC:
000430r 2               .else
000430r 2  D0 40                bne     COLON; new: 1 cycle more on ":" case
000432r 2               .endif
000432r 2  A0 02                ldy     #$02
000434r 2  B1 rr                lda     (TXTPTR),y
000436r 2  18                   clc
000437r 2               .ifdef CONFIG_2
000437r 2  D0 03 4C rr          jeq     L2701
00043Br 2  rr           
00043Cr 2               .else
00043Cr 2                       beq     L2701
00043Cr 2               .endif
00043Cr 2  C8                   iny
00043Dr 2  B1 rr                lda     (TXTPTR),y
00043Fr 2  85 rr                sta     CURLIN
000441r 2  C8                   iny
000442r 2  B1 rr                lda     (TXTPTR),y
000444r 2  85 rr                sta     CURLIN+1
000446r 2  98                   tya
000447r 2  65 rr                adc     TXTPTR
000449r 2  85 rr                sta     TXTPTR
00044Br 2  90 02                bcc     NEWSTT2
00044Dr 2  E6 rr                inc     TXTPTR+1
00044Fr 2               NEWSTT2:
00044Fr 2  20 rr rr             jsr     CHRGET
000452r 2  20 rr rr             jsr     EXECUTE_STATEMENT
000455r 2  4C rr rr             jmp     NEWSTT
000458r 2               
000458r 2               ; ----------------------------------------------------------------------------
000458r 2               ; EXECUTE A STATEMENT
000458r 2               ;
000458r 2               ; (A) IS FIRST CHAR OF STATEMENT
000458r 2               ; CARRY IS SET
000458r 2               ; ----------------------------------------------------------------------------
000458r 2               EXECUTE_STATEMENT:
000458r 2               .ifndef CONFIG_11A
000458r 2                       beq     RET1
000458r 2               .else
000458r 2  F0 3C                beq     RET2
00045Ar 2               .endif
00045Ar 2               .ifndef CONFIG_11
00045Ar 2                       sec
00045Ar 2               .endif
00045Ar 2               EXECUTE_STATEMENT1:
00045Ar 2  E9 80                sbc     #$80
00045Cr 2               .ifndef CONFIG_11
00045Cr 2                       jcc     LET	; old: 1 cycle more on instr.
00045Cr 2               .else
00045Cr 2  90 11                bcc     LET1; new: 1 cycle more on assignment
00045Er 2               .endif
00045Er 2  C9 1C                cmp     #NUM_TOKENS
000460r 2               .ifdef CONFIG_2
000460r 2  B0 17                bcs     LC721
000462r 2               .else
000462r 2                       bcs     SYNERR1
000462r 2               .endif
000462r 2  0A                   asl     a
000463r 2  A8                   tay
000464r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
000467r 2  48                   pha
000468r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
00046Br 2  48                   pha
00046Cr 2  4C rr rr             jmp     CHRGET
00046Fr 2               
00046Fr 2               .ifdef CONFIG_11
00046Fr 2               LET1:
00046Fr 2  4C rr rr             jmp     LET
000472r 2               
000472r 2               COLON:
000472r 2  C9 3A                cmp     #$3A
000474r 2  F0 D9                beq     NEWSTT2
000476r 2               SYNERR1:
000476r 2  4C rr rr             jmp     SYNERR
000479r 2               .endif
000479r 2               
000479r 2               .ifdef CONFIG_2; GO TO
000479r 2               LC721:
000479r 2  C9 44                cmp     #TOKEN_GO-$80
00047Br 2  D0 F9                bne     SYNERR1
00047Dr 2  20 rr rr             jsr     CHRGET
000480r 2  A9 9D                lda     #TOKEN_TO
000482r 2  20 rr rr             jsr     SYNCHR
000485r 2  4C rr rr             jmp     GOTO
000488r 2               .endif
000488r 2               
000488r 2               ; ----------------------------------------------------------------------------
000488r 2               ; "RESTORE" STATEMENT
000488r 2               ; ----------------------------------------------------------------------------
000488r 2               RESTORE:
000488r 2  38                   sec
000489r 2  A5 rr                lda     TXTTAB
00048Br 2  E9 01                sbc     #$01
00048Dr 2  A4 rr                ldy     TXTTAB+1
00048Fr 2  B0 01                bcs     SETDA
000491r 2  88                   dey
000492r 2               SETDA:
000492r 2  85 rr                sta     DATPTR
000494r 2  84 rr                sty     DATPTR+1
000496r 2               RET2:
000496r 2  60                   rts
000497r 2               
000497r 2               .include "iscntc.s"
000497r 3               .segment "CODE"
000497r 3               ; ----------------------------------------------------------------------------
000497r 3               ; SEE IF CONTROL-C TYPED
000497r 3               ; ----------------------------------------------------------------------------
000497r 3               .ifndef CONFIG_CBM_ALL
000497r 3               .include "cbm_iscntc.s"
000497r 4               ; nothing - ISCNTC is a KERNAL function
000497r 4               
000497r 3               .endif
000497r 3               .ifdef KBD
000497r 3               .include "kbd_iscntc.s"
000497r 3               .endif
000497r 3               .ifdef OSI
000497r 3               .include "osi_iscntc.s"
000497r 3               .endif
000497r 3               .ifdef APPLE
000497r 3               .include "apple_iscntc.s"
000497r 3               .endif
000497r 3               .ifdef KIM
000497r 3               .include "kim_iscntc.s"
000497r 3               .endif
000497r 3               .ifdef MICROTAN
000497r 3               .include "microtan_iscntc.s"
000497r 3               .endif
000497r 3               ;!!! runs into "STOP"
000497r 3               
000497r 2               ;!!! runs into "STOP"
000497r 2               ; ----------------------------------------------------------------------------
000497r 2               ; "STOP" STATEMENT
000497r 2               ; ----------------------------------------------------------------------------
000497r 2               STOP:
000497r 2  B0 01                bcs     END2
000499r 2               
000499r 2               ; ----------------------------------------------------------------------------
000499r 2               ; "END" STATEMENT
000499r 2               ; ----------------------------------------------------------------------------
000499r 2               END:
000499r 2  18                   clc
00049Ar 2               END2:
00049Ar 2  D0 40                bne     RET1
00049Cr 2  A5 rr                lda     TXTPTR
00049Er 2  A4 rr                ldy     TXTPTR+1
0004A0r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
0004A0r 2               ; BUG on AppleSoft I
0004A0r 2               ; fix exists on AppleSoft II
0004A0r 2               ; TXTPTR+1 will always be > 0
0004A0r 2  A6 rr                ldx     CURLIN+1
0004A2r 2  E8                   inx
0004A3r 2               .endif
0004A3r 2  F0 0C                beq     END4
0004A5r 2  85 rr                sta     OLDTEXT
0004A7r 2  84 rr                sty     OLDTEXT+1
0004A9r 2               CONTROL_C_TYPED:
0004A9r 2  A5 rr                lda     CURLIN
0004ABr 2  A4 rr                ldy     CURLIN+1
0004ADr 2  85 rr                sta     OLDLIN
0004AFr 2  84 rr                sty     OLDLIN+1
0004B1r 2               END4:
0004B1r 2  68                   pla
0004B2r 2  68                   pla
0004B3r 2               L2701:
0004B3r 2  A9 rr                lda     #<QT_BREAK
0004B5r 2  A0 rr                ldy     #>QT_BREAK
0004B7r 2               .ifndef KBD
0004B7r 2  A2 00                ldx     #$00
0004B9r 2  86 rr                stx     Z14
0004BBr 2               .endif
0004BBr 2  90 03                bcc     L270E
0004BDr 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004C0r 2               L270E:
0004C0r 2  4C rr rr             jmp     RESTART
0004C3r 2               .ifdef KBD
0004C3r 2               LE664:
0004C3r 2                       tay
0004C3r 2                       jmp     SNGFLT
0004C3r 2               .endif
0004C3r 2               
0004C3r 2               ; ----------------------------------------------------------------------------
0004C3r 2               ; "CONT" COMMAND
0004C3r 2               ; ----------------------------------------------------------------------------
0004C3r 2               CONT:
0004C3r 2  D0 17                bne     RET1
0004C5r 2  A2 1E                ldx     #ERR_CANTCONT
0004C7r 2  A4 rr                ldy     OLDTEXT+1
0004C9r 2  D0 03                bne     L271C
0004CBr 2  4C rr rr             jmp     ERROR
0004CEr 2               L271C:
0004CEr 2  A5 rr                lda     OLDTEXT
0004D0r 2  85 rr                sta     TXTPTR
0004D2r 2  84 rr                sty     TXTPTR+1
0004D4r 2  A5 rr                lda     OLDLIN
0004D6r 2  A4 rr                ldy     OLDLIN+1
0004D8r 2  85 rr                sta     CURLIN
0004DAr 2  84 rr                sty     CURLIN+1
0004DCr 2               RET1:
0004DCr 2  60                   rts
0004DDr 2               
0004DDr 2               .ifdef KBD
0004DDr 2               PRT:
0004DDr 2                       jsr     GETBYT
0004DDr 2                       txa
0004DDr 2               ; not ROR bug safe
0004DDr 2                       ror     a
0004DDr 2                       ror     a
0004DDr 2                       ror     a
0004DDr 2                       sta     $8F
0004DDr 2                       rts
0004DDr 2               
0004DDr 2               LE68C:
0004DDr 2                       ldy     #$12
0004DDr 2               LE68E:
0004DDr 2                       lda     LEA30,y
0004DDr 2                       sta     $03A2,y
0004DDr 2                       dey
0004DDr 2                       bpl     LE68E
0004DDr 2                       rts
0004DDr 2               .endif
0004DDr 2               
0004DDr 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004DDr 2               ; CBM1 has the keyword removed,
0004DDr 2               ; but the code is still here
0004DDr 2               NULL:
0004DDr 2  20 rr rr             jsr     GETBYT
0004E0r 2  D0 FA                bne     RET1
0004E2r 2  E8                   inx
0004E3r 2  E0 0A                cpx     #NULL_MAX
0004E5r 2  B0 04                bcs     L2739
0004E7r 2  CA                   dex
0004E8r 2  86 rr                stx     Z15
0004EAr 2  60                   rts
0004EBr 2               L2739:
0004EBr 2  4C rr rr             jmp     IQERR
0004EEr 2               .endif
0004EEr 2               .ifndef CONFIG_11A
0004EEr 2               CLEAR:
0004EEr 2                       bne     RET1
0004EEr 2                       jmp     CLEARC
0004EEr 2               .endif
0004EEr 2               
0004EEr 1               .include "loadsave.s"
0004EEr 2               .segment "CODE"
0004EEr 2               
0004EEr 2               .ifdef APPLE
0004EEr 2               .include "apple_loadsave.s"
0004EEr 2               .endif
0004EEr 2               .ifdef KIM
0004EEr 2               .include "kim_loadsave.s"
0004EEr 2               .endif
0004EEr 2               .ifdef MICROTAN
0004EEr 2               .include "microtan_loadsave.s"
0004EEr 2               .endif
0004EEr 2               
0004EEr 1               .include "flow2.s"
0004EEr 2               .segment "CODE"
0004EEr 2               ; ----------------------------------------------------------------------------
0004EEr 2               ; "RUN" COMMAND
0004EEr 2               ; ----------------------------------------------------------------------------
0004EEr 2               RUN:
0004EEr 2  D0 03                bne     L27CF
0004F0r 2  4C rr rr             jmp     SETPTRS
0004F3r 2               L27CF:
0004F3r 2  20 rr rr             jsr     CLEARC
0004F6r 2  4C rr rr             jmp     L27E9
0004F9r 2               
0004F9r 2               ; ----------------------------------------------------------------------------
0004F9r 2               ; "GOSUB" STATEMENT
0004F9r 2               ;
0004F9r 2               ; LEAVES 7 BYTES ON STACK:
0004F9r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
0004F9r 2               ; 2 -- TXTPTR
0004F9r 2               ; 2 -- LINE #
0004F9r 2               ; 1 -- GOSUB TOKEN
0004F9r 2               ; ----------------------------------------------------------------------------
0004F9r 2               GOSUB:
0004F9r 2  A9 03                lda     #$03
0004FBr 2  20 rr rr             jsr     CHKMEM
0004FEr 2  A5 rr                lda     TXTPTR+1
000500r 2  48                   pha
000501r 2  A5 rr                lda     TXTPTR
000503r 2  48                   pha
000504r 2  A5 rr                lda     CURLIN+1
000506r 2  48                   pha
000507r 2  A5 rr                lda     CURLIN
000509r 2  48                   pha
00050Ar 2  A9 8C                lda     #TOKEN_GOSUB
00050Cr 2  48                   pha
00050Dr 2               L27E9:
00050Dr 2  20 rr rr             jsr     CHRGOT
000510r 2  20 rr rr             jsr     GOTO
000513r 2  4C rr rr             jmp     NEWSTT
000516r 2               
000516r 2               ; ----------------------------------------------------------------------------
000516r 2               ; "GOTO" STATEMENT
000516r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000516r 2               ; ----------------------------------------------------------------------------
000516r 2               GOTO:
000516r 2  20 rr rr             jsr     LINGET
000519r 2  20 rr rr             jsr     REMN
00051Cr 2  A5 rr                lda     CURLIN+1
00051Er 2  C5 rr                cmp     LINNUM+1
000520r 2  B0 0B                bcs     L2809
000522r 2  98                   tya
000523r 2  38                   sec
000524r 2  65 rr                adc     TXTPTR
000526r 2  A6 rr                ldx     TXTPTR+1
000528r 2  90 07                bcc     L280D
00052Ar 2  E8                   inx
00052Br 2  B0 04                bcs     L280D
00052Dr 2               L2809:
00052Dr 2  A5 rr                lda     TXTTAB
00052Fr 2  A6 rr                ldx     TXTTAB+1
000531r 2               L280D:
000531r 2               .ifdef KBD
000531r 2                       jsr     LF457
000531r 2                       bne     UNDERR
000531r 2               .else
000531r 2  20 rr rr             jsr     FL1
000534r 2  90 1E                bcc     UNDERR
000536r 2               .endif
000536r 2  A5 rr                lda     LOWTRX
000538r 2  E9 01                sbc     #$01
00053Ar 2  85 rr                sta     TXTPTR
00053Cr 2  A5 rr                lda     LOWTRX+1
00053Er 2  E9 00                sbc     #$00
000540r 2  85 rr                sta     TXTPTR+1
000542r 2               L281E:
000542r 2  60                   rts
000543r 2               
000543r 2               ; ----------------------------------------------------------------------------
000543r 2               ; "POP" AND "RETURN" STATEMENTS
000543r 2               ; ----------------------------------------------------------------------------
000543r 2               POP:
000543r 2  D0 FD                bne     L281E
000545r 2  A9 FF                lda     #$FF
000547r 2               .ifdef CONFIG_2A
000547r 2  85 rr                sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
000549r 2               .else
000549r 2                       sta     FORPNT
000549r 2               .endif
000549r 2  20 rr rr             jsr     GTFORPNT
00054Cr 2  9A                   txs
00054Dr 2  C9 8C                cmp     #TOKEN_GOSUB
00054Fr 2  F0 0B                beq     RETURN
000551r 2  A2 04                ldx     #ERR_NOGOSUB
000553r 2  2C                   .byte   $2C
000554r 2               UNDERR:
000554r 2  A2 0E                ldx     #ERR_UNDEFSTAT
000556r 2  4C rr rr             jmp     ERROR
000559r 2               ; ----------------------------------------------------------------------------
000559r 2               SYNERR2:
000559r 2  4C rr rr             jmp     SYNERR
00055Cr 2               ; ----------------------------------------------------------------------------
00055Cr 2               RETURN:
00055Cr 2  68                   pla
00055Dr 2  68                   pla
00055Er 2  85 rr                sta     CURLIN
000560r 2  68                   pla
000561r 2  85 rr                sta     CURLIN+1
000563r 2  68                   pla
000564r 2  85 rr                sta     TXTPTR
000566r 2  68                   pla
000567r 2  85 rr                sta     TXTPTR+1
000569r 2               
000569r 2               ; ----------------------------------------------------------------------------
000569r 2               ; "DATA" STATEMENT
000569r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
000569r 2               ; ----------------------------------------------------------------------------
000569r 2               DATA:
000569r 2  20 rr rr             jsr     DATAN
00056Cr 2               
00056Cr 2               ; ----------------------------------------------------------------------------
00056Cr 2               ; ADD (Y) TO TXTPTR
00056Cr 2               ; ----------------------------------------------------------------------------
00056Cr 2               ADDON:
00056Cr 2  98                   tya
00056Dr 2  18                   clc
00056Er 2  65 rr                adc     TXTPTR
000570r 2  85 rr                sta     TXTPTR
000572r 2  90 02                bcc     L2852
000574r 2  E6 rr                inc     TXTPTR+1
000576r 2               L2852:
000576r 2  60                   rts
000577r 2               
000577r 2               ; ----------------------------------------------------------------------------
000577r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
000577r 2               ; ----------------------------------------------------------------------------
000577r 2               DATAN:
000577r 2  A2 3A                ldx     #$3A
000579r 2  2C                   .byte   $2C
00057Ar 2               REMN:
00057Ar 2  A2 00                ldx     #$00
00057Cr 2  86 rr                stx     CHARAC
00057Er 2  A0 00                ldy     #$00
000580r 2  84 rr                sty     ENDCHR
000582r 2               L285E:
000582r 2  A5 rr                lda     ENDCHR
000584r 2  A6 rr                ldx     CHARAC
000586r 2  85 rr                sta     CHARAC
000588r 2  86 rr                stx     ENDCHR
00058Ar 2               L2866:
00058Ar 2  B1 rr                lda     (TXTPTR),y
00058Cr 2  F0 E8                beq     L2852
00058Er 2  C5 rr                cmp     ENDCHR
000590r 2  F0 E4                beq     L2852
000592r 2  C8                   iny
000593r 2  C9 22                cmp     #$22
000595r 2               .ifndef CONFIG_11
000595r 2                       beq     L285E; old: swap & cont is faster
000595r 2                       bne     L2866
000595r 2               .else
000595r 2  D0 F3                bne     L2866; new: cont is faster
000597r 2  F0 E9                beq     L285E
000599r 2               .endif
000599r 2               
000599r 2               ; ----------------------------------------------------------------------------
000599r 2               ; "IF" STATEMENT
000599r 2               ; ----------------------------------------------------------------------------
000599r 2               IF:
000599r 2  20 rr rr             jsr     FRMEVL
00059Cr 2  20 rr rr             jsr     CHRGOT
00059Fr 2  C9 88                cmp     #TOKEN_GOTO
0005A1r 2  F0 05                beq     L2884
0005A3r 2  A9 A0                lda     #TOKEN_THEN
0005A5r 2  20 rr rr             jsr     SYNCHR
0005A8r 2               L2884:
0005A8r 2  A5 rr                lda     FAC
0005AAr 2  D0 05                bne     L288D
0005ACr 2               
0005ACr 2               ; ----------------------------------------------------------------------------
0005ACr 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
0005ACr 2               ; ----------------------------------------------------------------------------
0005ACr 2               REM:
0005ACr 2  20 rr rr             jsr     REMN
0005AFr 2  F0 BB                beq     ADDON
0005B1r 2               L288D:
0005B1r 2  20 rr rr             jsr     CHRGOT
0005B4r 2  B0 03                bcs     L2895
0005B6r 2  4C rr rr             jmp     GOTO
0005B9r 2               L2895:
0005B9r 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005BCr 2               
0005BCr 2               ; ----------------------------------------------------------------------------
0005BCr 2               ; "ON" STATEMENT
0005BCr 2               ;
0005BCr 2               ; ON <EXP> GOTO <LIST>
0005BCr 2               ; ON <EXP> GOSUB <LIST>
0005BCr 2               ; ----------------------------------------------------------------------------
0005BCr 2               ON:
0005BCr 2  20 rr rr             jsr     GETBYT
0005BFr 2  48                   pha
0005C0r 2  C9 8C                cmp     #TOKEN_GOSUB
0005C2r 2  F0 04                beq     L28A4
0005C4r 2               L28A0:
0005C4r 2  C9 88                cmp     #TOKEN_GOTO
0005C6r 2  D0 91                bne     SYNERR2
0005C8r 2               L28A4:
0005C8r 2  C6 rr                dec     FAC_LAST
0005CAr 2  D0 04                bne     L28AC
0005CCr 2  68                   pla
0005CDr 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005D0r 2               L28AC:
0005D0r 2  20 rr rr             jsr     CHRGET
0005D3r 2  20 rr rr             jsr     LINGET
0005D6r 2  C9 2C                cmp     #$2C
0005D8r 2  F0 EE                beq     L28A4
0005DAr 2  68                   pla
0005DBr 2               L28B7:
0005DBr 2  60                   rts
0005DCr 2               
0005DCr 1               .include "misc1.s"
0005DCr 2               .segment "CODE"
0005DCr 2               
0005DCr 2               ; ----------------------------------------------------------------------------
0005DCr 2               ; CONVERT LINE NUMBER
0005DCr 2               ; ----------------------------------------------------------------------------
0005DCr 2               LINGET:
0005DCr 2  A2 00                ldx     #$00
0005DEr 2  86 rr                stx     LINNUM
0005E0r 2  86 rr                stx     LINNUM+1
0005E2r 2               L28BE:
0005E2r 2  B0 F7                bcs     L28B7
0005E4r 2  E9 2F                sbc     #$2F
0005E6r 2  85 rr                sta     CHARAC
0005E8r 2  A5 rr                lda     LINNUM+1
0005EAr 2  85 rr                sta     INDEX
0005ECr 2  C9 19                cmp     #$19
0005EEr 2  B0 D4                bcs     L28A0
0005F0r 2               ; <<<<<DANGEROUS CODE>>>>>
0005F0r 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
0005F0r 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
0005F0r 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
0005F0r 2               ; FOR OTHER CALLS TO LINGET.
0005F0r 2               ;
0005F0r 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
0005F0r 2               ; THEN TYPE "GO TO 437761".
0005F0r 2               ;
0005F0r 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
0005F0r 2               ; THE PROBLEM.  ($AB00 - $ABFF)
0005F0r 2               ; <<<<<DANGEROUS CODE>>>>>
0005F0r 2  A5 rr                lda     LINNUM
0005F2r 2  0A                   asl     a
0005F3r 2  26 rr                rol     INDEX
0005F5r 2  0A                   asl     a
0005F6r 2  26 rr                rol     INDEX
0005F8r 2  65 rr                adc     LINNUM
0005FAr 2  85 rr                sta     LINNUM
0005FCr 2  A5 rr                lda     INDEX
0005FEr 2  65 rr                adc     LINNUM+1
000600r 2  85 rr                sta     LINNUM+1
000602r 2  06 rr                asl     LINNUM
000604r 2  26 rr                rol     LINNUM+1
000606r 2  A5 rr                lda     LINNUM
000608r 2  65 rr                adc     CHARAC
00060Ar 2  85 rr                sta     LINNUM
00060Cr 2  90 02                bcc     L28EC
00060Er 2  E6 rr                inc     LINNUM+1
000610r 2               L28EC:
000610r 2  20 rr rr             jsr     CHRGET
000613r 2  4C rr rr             jmp     L28BE
000616r 2               
000616r 2               ; ----------------------------------------------------------------------------
000616r 2               ; "LET" STATEMENT
000616r 2               ;
000616r 2               ; LET <VAR> = <EXP>
000616r 2               ; <VAR> = <EXP>
000616r 2               ; ----------------------------------------------------------------------------
000616r 2               LET:
000616r 2  20 rr rr             jsr     PTRGET
000619r 2  85 rr                sta     FORPNT
00061Br 2  84 rr                sty     FORPNT+1
00061Dr 2  A9 AB                lda     #TOKEN_EQUAL
00061Fr 2  20 rr rr             jsr     SYNCHR
000622r 2               .ifndef CONFIG_SMALL
000622r 2                       lda     VALTYP+1
000622r 2                       pha
000622r 2               .endif
000622r 2  A5 rr                lda     VALTYP
000624r 2  48                   pha
000625r 2  20 rr rr             jsr     FRMEVL
000628r 2  68                   pla
000629r 2  2A                   rol     a
00062Ar 2  20 rr rr             jsr     CHKVAL
00062Dr 2  D0 03                bne     LETSTRING
00062Fr 2               .ifndef CONFIG_SMALL
00062Fr 2                       pla
00062Fr 2               LET2:
00062Fr 2                       bpl     L2923
00062Fr 2                       jsr     ROUND_FAC
00062Fr 2                       jsr     AYINT
00062Fr 2                       ldy     #$00
00062Fr 2                       lda     FAC+3
00062Fr 2                       sta     (FORPNT),y
00062Fr 2                       iny
00062Fr 2                       lda     FAC+4
00062Fr 2                       sta     (FORPNT),y
00062Fr 2                       rts
00062Fr 2               L2923:
00062Fr 2               .endif
00062Fr 2               
00062Fr 2               ; ----------------------------------------------------------------------------
00062Fr 2               ; REAL VARIABLE = EXPRESSION
00062Fr 2               ; ----------------------------------------------------------------------------
00062Fr 2  4C rr rr             jmp     SETFOR
000632r 2               LETSTRING:
000632r 2               .ifndef CONFIG_SMALL
000632r 2                       pla
000632r 2               .endif
000632r 2               
000632r 2               ; ----------------------------------------------------------------------------
000632r 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
000632r 2               ; ----------------------------------------------------------------------------
000632r 2               PUTSTR:
000632r 2               .ifdef CONFIG_CBM_ALL
000632r 2                       ldy     FORPNT+1
000632r 2                 .ifdef CBM1
000632r 2                       cpy     #$D0	; TI$
000632r 2                 .else
000632r 2                       cpy     #$DE
000632r 2                 .endif
000632r 2                       bne     LC92B
000632r 2                       jsr     FREFAC
000632r 2                       cmp     #$06
000632r 2                 .ifdef CBM2
000632r 2                       bne     IQERR1
000632r 2                 .else
000632r 2                       jne     IQERR
000632r 2                 .endif
000632r 2                       ldy     #$00
000632r 2                       sty     FAC
000632r 2                       sty     FACSIGN
000632r 2               LC8E8:
000632r 2                       sty     STRNG2
000632r 2                       jsr     LC91C
000632r 2                       jsr     MUL10
000632r 2                       inc     STRNG2
000632r 2                       ldy     STRNG2
000632r 2                       jsr     LC91C
000632r 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
000632r 2                       tax
000632r 2                       beq     LC902
000632r 2                       inx
000632r 2                       txa
000632r 2                       jsr     LD9BF
000632r 2               LC902:
000632r 2                       ldy     STRNG2
000632r 2                       iny
000632r 2                       cpy     #$06
000632r 2                       bne     LC8E8
000632r 2                       jsr     MUL10
000632r 2                       jsr     QINT
000632r 2                       ldx     #$02
000632r 2                       sei
000632r 2               LC912:
000632r 2                       lda     FAC+2,x
000632r 2                       sta     TISTR,x
000632r 2                       dex
000632r 2                       bpl     LC912
000632r 2                       cli
000632r 2                       rts
000632r 2               LC91C:
000632r 2                       lda     (INDEX),y
000632r 2                       jsr     CHRGOT2
000632r 2                       bcc     LC926
000632r 2               IQERR1:
000632r 2                       jmp     IQERR
000632r 2               LC926:
000632r 2                       sbc     #$2F
000632r 2                       jmp     ADDACC
000632r 2               LC92B:
000632r 2               .endif
000632r 2  A0 02                ldy     #$02
000634r 2  B1 rr                lda     (FAC_LAST-1),y
000636r 2  C5 rr                cmp     FRETOP+1
000638r 2  90 17                bcc     L2946
00063Ar 2  D0 07                bne     L2938
00063Cr 2  88                   dey
00063Dr 2  B1 rr                lda     (FAC_LAST-1),y
00063Fr 2  C5 rr                cmp     FRETOP
000641r 2  90 0E                bcc     L2946
000643r 2               L2938:
000643r 2  A4 rr                ldy     FAC_LAST
000645r 2  C4 rr                cpy     VARTAB+1
000647r 2  90 08                bcc     L2946
000649r 2  D0 0D                bne     L294D
00064Br 2  A5 rr                lda     FAC_LAST-1
00064Dr 2  C5 rr                cmp     VARTAB
00064Fr 2  B0 07                bcs     L294D
000651r 2               L2946:
000651r 2  A5 rr                lda     FAC_LAST-1
000653r 2  A4 rr                ldy     FAC_LAST
000655r 2  4C rr rr             jmp     L2963
000658r 2               L294D:
000658r 2  A0 00                ldy     #$00
00065Ar 2  B1 rr                lda     (FAC_LAST-1),y
00065Cr 2  20 rr rr             jsr     STRINI
00065Fr 2  A5 rr                lda     DSCPTR
000661r 2  A4 rr                ldy     DSCPTR+1
000663r 2  85 rr                sta     STRNG1
000665r 2  84 rr                sty     STRNG1+1
000667r 2  20 rr rr             jsr     MOVINS
00066Ar 2  A9 rr                lda     #FAC
00066Cr 2  A0 00                ldy     #$00
00066Er 2               L2963:
00066Er 2  85 rr                sta     DSCPTR
000670r 2  84 rr                sty     DSCPTR+1
000672r 2  20 rr rr             jsr     FRETMS
000675r 2  A0 00                ldy     #$00
000677r 2  B1 rr                lda     (DSCPTR),y
000679r 2  91 rr                sta     (FORPNT),y
00067Br 2  C8                   iny
00067Cr 2  B1 rr                lda     (DSCPTR),y
00067Er 2  91 rr                sta     (FORPNT),y
000680r 2  C8                   iny
000681r 2  B1 rr                lda     (DSCPTR),y
000683r 2  91 rr                sta     (FORPNT),y
000685r 2  60                   rts
000686r 2               .ifdef CONFIG_FILE
000686r 2               PRINTH:
000686r 2                       jsr     CMD
000686r 2                       jmp     LCAD6
000686r 2               CMD:
000686r 2                       jsr     GETBYT
000686r 2                       beq     LC98F
000686r 2                       lda     #$2C
000686r 2                       jsr     SYNCHR
000686r 2               LC98F:
000686r 2                       php
000686r 2                       jsr     CHKOUT
000686r 2                       stx     CURDVC
000686r 2                       plp
000686r 2                       jmp     PRINT
000686r 2               .endif
000686r 2               
000686r 2               
000686r 1               .include "print.s"
000686r 2               .segment "CODE"
000686r 2               
000686r 2               PRSTRING:
000686r 2  20 rr rr             jsr     STRPRT
000689r 2               L297E:
000689r 2  20 rr rr             jsr     CHRGOT
00068Cr 2               
00068Cr 2               ; ----------------------------------------------------------------------------
00068Cr 2               ; "PRINT" STATEMENT
00068Cr 2               ; ----------------------------------------------------------------------------
00068Cr 2               PRINT:
00068Cr 2  F0 3D                beq     CRDO
00068Er 2               PRINT2:
00068Er 2  F0 59                beq     L29DD
000690r 2  C9 9C                cmp     #TOKEN_TAB
000692r 2  F0 6D                beq     L29F5
000694r 2  C9 9F                cmp     #TOKEN_SPC
000696r 2               .ifdef CONFIG_2
000696r 2  18                   clc	; also AppleSoft II
000697r 2               .endif
000697r 2  F0 68                beq     L29F5
000699r 2  C9 2C                cmp     #','
00069Br 2               ; Pre-KIM had no CLC. KIM added the CLC
00069Br 2               ; here. Post-KIM moved the CLC up...
00069Br 2               ; (makes no sense on KIM, liveness = 0)
00069Br 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
00069Br 2                       clc
00069Br 2               .endif
00069Br 2  F0 4D                beq     L29DE
00069Dr 2  C9 3B                cmp     #$3B
00069Fr 2  F0 75                beq     L2A0D
0006A1r 2  20 rr rr             jsr     FRMEVL
0006A4r 2  24 rr                bit     VALTYP
0006A6r 2  30 DE                bmi     PRSTRING
0006A8r 2  20 rr rr             jsr     FOUT
0006ABr 2  20 rr rr             jsr     STRLIT
0006AEr 2               .ifndef CONFIG_NO_CR
0006AEr 2  A0 00                ldy     #$00
0006B0r 2  B1 rr                lda     (FAC_LAST-1),y
0006B2r 2  18                   clc
0006B3r 2  65 rr                adc     POSX
0006B5r 2                 .ifdef KBD
0006B5r 2                       cmp     #$28
0006B5r 2                 .else
0006B5r 2  C5 rr                cmp     Z17
0006B7r 2                 .endif
0006B7r 2  90 03                bcc     L29B1
0006B9r 2  20 rr rr             jsr     CRDO
0006BCr 2               L29B1:
0006BCr 2               .endif
0006BCr 2  20 rr rr             jsr     STRPRT
0006BFr 2               .ifdef KBD
0006BFr 2                       jmp     L297E
0006BFr 2               .else
0006BFr 2  20 rr rr             jsr     OUTSP
0006C2r 2  D0 C5                bne     L297E ; branch always
0006C4r 2               .endif
0006C4r 2               
0006C4r 2               .ifdef KBD
0006C4r 2               ; PATCHES
0006C4r 2               LE86C:
0006C4r 2                       pla
0006C4r 2                       jmp     CONTROL_C_TYPED
0006C4r 2               LE870:
0006C4r 2                       jsr     GETBYT
0006C4r 2                       txa
0006C4r 2               LE874:
0006C4r 2                       beq     LE878
0006C4r 2                       bpl     LE8F2
0006C4r 2               LE878:
0006C4r 2                       jmp     IQERR
0006C4r 2               ; PATCHES
0006C4r 2               .endif
0006C4r 2               
0006C4r 2               
0006C4r 2               
0006C4r 2               .ifndef KBD
0006C4r 2               L29B9:
0006C4r 2                 .ifdef CBM2
0006C4r 2                       lda     #$00
0006C4r 2                       sta     INPUTBUFFER,x
0006C4r 2                       ldx     #<(INPUTBUFFER-1)
0006C4r 2                       ldy     #>(INPUTBUFFER-1)
0006C4r 2                 .else
0006C4r 2                   .ifndef APPLE
0006C4r 2  9E 00 09             stz     INPUTBUFFER,x
0006C7r 2  A2 FF                ldx     #<(INPUTBUFFER-1)
0006C9r 2  A0 08                ldy     #>(INPUTBUFFER-1)
0006CBr 2                   .endif
0006CBr 2                   .ifdef MICROTAN
0006CBr 2                       bne     CRDO2
0006CBr 2               	.endif
0006CBr 2                 .endif
0006CBr 2                 .ifdef CONFIG_FILE
0006CBr 2                       lda     CURDVC
0006CBr 2                       bne     L29DD
0006CBr 2                 .endif
0006CBr 2               .endif
0006CBr 2               
0006CBr 2               
0006CBr 2               CRDO:
0006CBr 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
0006CBr 2                       lda     CURDVC
0006CBr 2                       bne     LC9D8
0006CBr 2                       sta     POSX
0006CBr 2               LC9D8:
0006CBr 2               .endif
0006CBr 2  A9 0D                lda     #CRLF_1
0006CDr 2               .ifndef CONFIG_CBM_ALL
0006CDr 2  85 rr                sta     POSX
0006CFr 2               .endif
0006CFr 2  20 rr rr             jsr     OUTDO
0006D2r 2               CRDO2:
0006D2r 2  A9 0A                lda     #CRLF_2
0006D4r 2  20 rr rr             jsr     OUTDO
0006D7r 2               
0006D7r 2               PRINTNULLS:
0006D7r 2               .ifdef KBD
0006D7r 2                       lda     #$00
0006D7r 2                       sta     POSX
0006D7r 2                       eor     #$FF
0006D7r 2               .else
0006D7r 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0006D7r 2                   .ifdef CONFIG_FILE
0006D7r 2                   ; Although there is no statement for it,
0006D7r 2                   ; CBM1 had NULL support and ignores
0006D7r 2                   ; it when not targeting the screen,
0006D7r 2                   ; CBM2 dropped it completely.
0006D7r 2                       lda     CURDVC
0006D7r 2                       bne     L29DD
0006D7r 2                   .endif
0006D7r 2  8A                   txa
0006D8r 2  48                   pha
0006D9r 2  A6 rr                ldx     Z15
0006DBr 2  F0 08                beq     L29D9
0006DDr 2  A9 00                lda     #$00
0006DFr 2               L29D3:
0006DFr 2  20 rr rr             jsr     OUTDO
0006E2r 2  CA                   dex
0006E3r 2  D0 FA                bne     L29D3
0006E5r 2               L29D9:
0006E5r 2  86 rr                stx     POSX
0006E7r 2  68                   pla
0006E8r 2  AA                   tax
0006E9r 2                 .else
0006E9r 2                   .ifndef CONFIG_2
0006E9r 2                       lda     #$00
0006E9r 2                       sta     POSX
0006E9r 2                   .endif
0006E9r 2                       eor     #$FF
0006E9r 2                 .endif
0006E9r 2               .endif
0006E9r 2               L29DD:
0006E9r 2  60                   rts
0006EAr 2               L29DE:
0006EAr 2  A5 rr                lda     POSX
0006ECr 2               .ifndef CONFIG_NO_CR
0006ECr 2                 .ifdef KBD
0006ECr 2                       cmp     #$1A
0006ECr 2                 .else
0006ECr 2  C5 rr                cmp     Z18
0006EEr 2                 .endif
0006EEr 2  90 06                bcc     L29EA
0006F0r 2  20 rr rr             jsr     CRDO
0006F3r 2  4C rr rr             jmp     L2A0D
0006F6r 2               L29EA:
0006F6r 2               .endif
0006F6r 2  38                   sec
0006F7r 2               L29EB:
0006F7r 2               .ifdef CONFIG_CBM_ALL
0006F7r 2                       sbc     #$0A
0006F7r 2               .else
0006F7r 2                 .ifdef KBD
0006F7r 2                       sbc     #$0D
0006F7r 2                 .else
0006F7r 2  E9 0E                sbc     #$0E
0006F9r 2                 .endif
0006F9r 2               .endif
0006F9r 2  B0 FC                bcs     L29EB
0006FBr 2  49 FF                eor     #$FF
0006FDr 2  69 01                adc     #$01
0006FFr 2  D0 10                bne     L2A08
000701r 2               L29F5:
000701r 2               .ifdef CONFIG_11A
000701r 2  08                   php
000702r 2               .else
000702r 2                       pha
000702r 2               .endif
000702r 2  20 rr rr             jsr     GTBYTC
000705r 2  C9 29                cmp     #')'
000707r 2               .ifdef CONFIG_11A
000707r 2                 .ifdef CONFIG_2
000707r 2  D0 61                bne     SYNERR4
000709r 2                 .else
000709r 2                       jne     SYNERR
000709r 2                 .endif
000709r 2  28                   plp
00070Ar 2  90 06                bcc     L2A09
00070Cr 2               .else
00070Cr 2                 .ifdef CONFIG_11
00070Cr 2                       jne     SYNERR
00070Cr 2                 .else
00070Cr 2                       bne     SYNERR4
00070Cr 2                 .endif
00070Cr 2                       pla
00070Cr 2                       cmp     #TOKEN_TAB
00070Cr 2                 .ifdef CONFIG_11
00070Cr 2                       bne     L2A09
00070Cr 2                 .else
00070Cr 2                       bne     L2A0A
00070Cr 2                 .endif
00070Cr 2               .endif
00070Cr 2  8A                   txa
00070Dr 2  E5 rr                sbc     POSX
00070Fr 2  90 05                bcc     L2A0D
000711r 2               .ifndef CONFIG_11
000711r 2                       beq     L2A0D
000711r 2               .endif
000711r 2               L2A08:
000711r 2  AA                   tax
000712r 2               .ifdef CONFIG_11
000712r 2               L2A09:
000712r 2  E8                   inx
000713r 2               .endif
000713r 2               L2A0A:
000713r 2               .ifndef CONFIG_11
000713r 2                       jsr     OUTSP
000713r 2               .endif
000713r 2  CA                   dex
000714r 2               .ifndef CONFIG_11
000714r 2                       bne     L2A0A
000714r 2               .else
000714r 2  D0 06                bne     L2A13
000716r 2               .endif
000716r 2               L2A0D:
000716r 2  20 rr rr             jsr     CHRGET
000719r 2  4C rr rr             jmp     PRINT2
00071Cr 2               .ifdef CONFIG_11
00071Cr 2               L2A13:
00071Cr 2  20 rr rr             jsr     OUTSP
00071Fr 2  D0 F2                bne     L2A0A
000721r 2               .endif
000721r 2               
000721r 2               ; ----------------------------------------------------------------------------
000721r 2               ; PRINT STRING AT (Y,A)
000721r 2               ; ----------------------------------------------------------------------------
000721r 2               STROUT:
000721r 2  20 rr rr             jsr     STRLIT
000724r 2               
000724r 2               ; ----------------------------------------------------------------------------
000724r 2               ; PRINT STRING AT (FACMO,FACLO)
000724r 2               ; ----------------------------------------------------------------------------
000724r 2               STRPRT:
000724r 2  20 rr rr             jsr     FREFAC
000727r 2  AA                   tax
000728r 2  A0 00                ldy     #$00
00072Ar 2  E8                   inx
00072Br 2               L2A22:
00072Br 2  CA                   dex
00072Cr 2  F0 BB                beq     L29DD
00072Er 2  B1 rr                lda     (INDEX),y
000730r 2  20 rr rr             jsr     OUTDO
000733r 2  C8                   iny
000734r 2  C9 0D                cmp     #$0D
000736r 2  D0 F3                bne     L2A22
000738r 2  20 rr rr             jsr     PRINTNULLS
00073Br 2  4C rr rr             jmp     L2A22
00073Er 2               ; ----------------------------------------------------------------------------
00073Er 2               OUTSP:
00073Er 2               .ifdef CONFIG_FILE
00073Er 2                 .ifndef CBM1
00073Er 2               ; on non-screen devices, print SPACE
00073Er 2               ; instead of CRSR RIGHT
00073Er 2                       lda     CURDVC
00073Er 2                       beq     LCA40
00073Er 2                       lda     #$20
00073Er 2                       .byte   $2C
00073Er 2               LCA40:
00073Er 2                 .endif
00073Er 2                       lda     #$1D ; CRSR RIGHT
00073Er 2               .else
00073Er 2  A9 20                lda     #$20
000740r 2               .endif
000740r 2  2C                   .byte   $2C
000741r 2               OUTQUES:
000741r 2  A9 3F                lda     #$3F
000743r 2               
000743r 2               ; ----------------------------------------------------------------------------
000743r 2               ; PRINT CHAR FROM (A)
000743r 2               ; ----------------------------------------------------------------------------
000743r 2               OUTDO:
000743r 2               .ifndef KBD
000743r 2  24 rr                bit     Z14
000745r 2  30 14                bmi     L2A56
000747r 2               .endif
000747r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000747r 2               ; Commodore forgot to remove this in CBM1
000747r 2  48                   pha
000748r 2               .endif
000748r 2               .ifdef CBM1
000748r 2                       cmp     #$1D ; CRSR RIGHT
000748r 2                       beq     LCA6A
000748r 2                       cmp     #$9D ; CRSR LEFT
000748r 2                       beq     LCA5A
000748r 2                       cmp     #$14 ; DEL
000748r 2                       bne     LCA64
000748r 2               LCA5A:
000748r 2                       lda     POSX
000748r 2                       beq     L2A4E
000748r 2                       lda     CURDVC
000748r 2                       bne     L2A4E
000748r 2                       dec     POSX
000748r 2               LCA64:
000748r 2                       and     #$7F
000748r 2               .endif
000748r 2               .ifndef CBM2
000748r 2  C9 20                cmp     #$20
00074Ar 2  90 0B                bcc     L2A4E
00074Cr 2               .endif
00074Cr 2               LCA6A:
00074Cr 2               .ifdef CONFIG_CBM1_PATCHES
00074Cr 2                       lda     CURDVC
00074Cr 2                       jsr     PATCH6
00074Cr 2                       nop
00074Cr 2               .endif
00074Cr 2               .ifdef CONFIG_PRINT_CR
00074Cr 2  A5 rr                lda     POSX
00074Er 2  C5 rr                cmp     Z17
000750r 2  D0 03                bne     L2A4C
000752r 2                 .ifdef APPLE
000752r 2                       nop ; PATCH!
000752r 2                       nop ; don't print CR
000752r 2                       nop
000752r 2                 .else
000752r 2  20 rr rr             jsr     CRDO
000755r 2                 .endif
000755r 2               L2A4C:
000755r 2               .endif
000755r 2               .ifndef CONFIG_CBM_ALL
000755r 2  E6 rr                inc     POSX
000757r 2               .endif
000757r 2               L2A4E:
000757r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000757r 2               ; Commodore forgot to remove this in CBM1
000757r 2  68                   pla
000758r 2               .endif
000758r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000758r 2                       sty     DIMFLG
000758r 2               .endif
000758r 2               .ifdef CONFIG_IO_MSB
000758r 2                       ora     #$80
000758r 2               .endif
000758r 2  20 rr rr             jsr     MONCOUT
00075Br 2               .ifdef CONFIG_IO_MSB
00075Br 2                       and     #$7F
00075Br 2               .endif
00075Br 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
00075Br 2                       ldy     DIMFLG
00075Br 2               .endif
00075Br 2               .ifdef OSI
00075Br 2                       nop
00075Br 2                       nop
00075Br 2                       nop
00075Br 2                       nop
00075Br 2               .endif
00075Br 2               L2A56:
00075Br 2  29 FF                and     #$FF
00075Dr 2               LE8F2:
00075Dr 2  60                   rts
00075Er 2               
00075Er 2               ; ----------------------------------------------------------------------------
00075Er 2               ; ???
00075Er 2               ; ----------------------------------------------------------------------------
00075Er 2               .ifdef KBD
00075Er 2               LE8F3:
00075Er 2                       pha
00075Er 2                       lda     $047F
00075Er 2                       clc
00075Er 2                       beq     LE900
00075Er 2                       lda     #$00
00075Er 2                       sta     $047F
00075Er 2                       sec
00075Er 2               LE900:
00075Er 2                       pla
00075Er 2                       rts
00075Er 2               .endif
00075Er 2               
00075Er 1               .include "input.s"
00075Er 2               .segment "CODE"
00075Er 2               
00075Er 2               ; ----------------------------------------------------------------------------
00075Er 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00075Er 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00075Er 2               ; BETWEEN INPUT, READ, AND GET
00075Er 2               ; ----------------------------------------------------------------------------
00075Er 2               INPUTERR:
00075Er 2  A5 rr                lda     INPUTFLG
000760r 2  F0 0B                beq     RESPERR	; INPUT
000762r 2               .ifndef CONFIG_SMALL
000762r 2               .ifdef CONFIG_10A
000762r 2               ; without this, it treats GET errors
000762r 2               ; like READ errors
000762r 2                       bmi     L2A63	; READ
000762r 2                       ldy     #$FF	; GET
000762r 2                       bne     L2A67
000762r 2               L2A63:
000762r 2               .endif
000762r 2               .endif
000762r 2               .ifdef CONFIG_CBM1_PATCHES
000762r 2                       jsr     PATCH5
000762r 2               		nop
000762r 2               .else
000762r 2  A5 rr                lda     Z8C
000764r 2  A4 rr                ldy     Z8C+1
000766r 2               .endif
000766r 2               L2A67:
000766r 2  85 rr                sta     CURLIN
000768r 2  84 rr                sty     CURLIN+1
00076Ar 2               SYNERR4:
00076Ar 2  4C rr rr             jmp     SYNERR
00076Dr 2               RESPERR:
00076Dr 2               .ifdef CONFIG_FILE
00076Dr 2                       lda     CURDVC
00076Dr 2                       beq     LCA8F
00076Dr 2                       ldx     #ERR_BADDATA
00076Dr 2                       jmp     ERROR
00076Dr 2               LCA8F:
00076Dr 2               .endif
00076Dr 2  A9 rr                lda     #<ERRREENTRY
00076Fr 2  A0 rr                ldy     #>ERRREENTRY
000771r 2  20 rr rr             jsr     STROUT
000774r 2  A5 rr                lda     OLDTEXT
000776r 2  A4 rr                ldy     OLDTEXT+1
000778r 2  85 rr                sta     TXTPTR
00077Ar 2  84 rr                sty     TXTPTR+1
00077Cr 2               RTS20:
00077Cr 2  60                   rts
00077Dr 2               
00077Dr 2               ; ----------------------------------------------------------------------------
00077Dr 2               ; "GET" STATEMENT
00077Dr 2               ; ----------------------------------------------------------------------------
00077Dr 2               .ifndef CONFIG_SMALL
00077Dr 2               GET:
00077Dr 2                       jsr     ERRDIR
00077Dr 2               ; CBM: if GET#, then switch input
00077Dr 2               .ifdef CONFIG_FILE
00077Dr 2                       cmp     #'#'
00077Dr 2                       bne     LCAB6
00077Dr 2                       jsr     CHRGET
00077Dr 2                       jsr     GETBYT
00077Dr 2                       lda     #','
00077Dr 2                       jsr     SYNCHR
00077Dr 2                       jsr     CHKIN
00077Dr 2                       stx     CURDVC
00077Dr 2               LCAB6:
00077Dr 2               .endif
00077Dr 2                       ldx     #<(INPUTBUFFER+1)
00077Dr 2                       ldy     #>(INPUTBUFFER+1)
00077Dr 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
00077Dr 2                       lda     #$00
00077Dr 2                       sta     INPUTBUFFER+1
00077Dr 2               .else
00077Dr 2                       sty     INPUTBUFFER+1
00077Dr 2               .endif
00077Dr 2                       lda     #$40
00077Dr 2                       jsr     PROCESS_INPUT_LIST
00077Dr 2               ; CBM: if GET#, then switch input back
00077Dr 2               .ifdef CONFIG_FILE
00077Dr 2                       ldx     CURDVC
00077Dr 2                       bne     LCAD8
00077Dr 2               .endif
00077Dr 2                       rts
00077Dr 2               .endif
00077Dr 2               
00077Dr 2               ; ----------------------------------------------------------------------------
00077Dr 2               ; "INPUT#" STATEMENT
00077Dr 2               ; ----------------------------------------------------------------------------
00077Dr 2               .ifdef CONFIG_FILE
00077Dr 2               INPUTH:
00077Dr 2                       jsr     GETBYT
00077Dr 2                       lda     #$2C
00077Dr 2                       jsr     SYNCHR
00077Dr 2                       jsr     CHKIN
00077Dr 2                       stx     CURDVC
00077Dr 2                       jsr     L2A9E
00077Dr 2               LCAD6:
00077Dr 2                       lda     CURDVC
00077Dr 2               LCAD8:
00077Dr 2                       jsr     CLRCH
00077Dr 2                       ldx     #$00
00077Dr 2                       stx     CURDVC
00077Dr 2                       rts
00077Dr 2               LCAE0:
00077Dr 2               .endif
00077Dr 2               
00077Dr 2               ; ----------------------------------------------------------------------------
00077Dr 2               ; "INPUT" STATEMENT
00077Dr 2               ; ----------------------------------------------------------------------------
00077Dr 2               INPUT:
00077Dr 2               .ifndef KBD
00077Dr 2  46 rr                lsr     Z14
00077Fr 2               .endif
00077Fr 2  C9 22                cmp     #$22
000781r 2  D0 0B                bne     L2A9E
000783r 2  20 rr rr             jsr     STRTXT
000786r 2  A9 3B                lda     #$3B
000788r 2  20 rr rr             jsr     SYNCHR
00078Br 2  20 rr rr             jsr     STRPRT
00078Er 2               L2A9E:
00078Er 2  20 rr rr             jsr     ERRDIR
000791r 2  A9 2C                lda     #$2C
000793r 2  8D FF 08             sta     INPUTBUFFER-1
000796r 2               LCAF8:
000796r 2               .ifdef APPLE
000796r 2                       jsr     INLINX
000796r 2               .else
000796r 2  20 rr rr             jsr     NXIN
000799r 2               .endif
000799r 2               .ifdef KBD
000799r 2                       bmi     L2ABE
000799r 2               .else
000799r 2                 .ifdef CONFIG_FILE
000799r 2                       lda     CURDVC
000799r 2                       beq     LCB0C
000799r 2                       lda     Z96
000799r 2                       and     #$02
000799r 2                       beq     LCB0C
000799r 2                       jsr     LCAD6
000799r 2                       jmp     DATA
000799r 2               LCB0C:
000799r 2                 .endif
000799r 2  AD 00 09             lda     INPUTBUFFER
00079Cr 2  D0 12                bne     L2ABE
00079Er 2                 .ifdef CONFIG_FILE
00079Er 2                       lda     CURDVC
00079Er 2                       bne     LCAF8
00079Er 2                 .endif
00079Er 2                 .ifdef CONFIG_CBM1_PATCHES
00079Er 2                       jmp     PATCH1
00079Er 2                 .else
00079Er 2  18                   clc
00079Fr 2  4C rr rr             jmp     CONTROL_C_TYPED
0007A2r 2                 .endif
0007A2r 2               .endif
0007A2r 2               
0007A2r 2               NXIN:
0007A2r 2               .ifdef KBD
0007A2r 2                       jsr     INLIN
0007A2r 2                       bmi     RTS20
0007A2r 2                       pla
0007A2r 2                       jmp     LE86C
0007A2r 2               .else
0007A2r 2                 .ifdef CONFIG_FILE
0007A2r 2                       lda     CURDVC
0007A2r 2                       bne     LCB21
0007A2r 2                 .endif
0007A2r 2  20 rr rr             jsr     OUTQUES	; '?'
0007A5r 2  20 rr rr             jsr     OUTSP
0007A8r 2               LCB21:
0007A8r 2  4C rr rr             jmp     INLIN
0007ABr 2               .endif
0007ABr 2               
0007ABr 2               ; ----------------------------------------------------------------------------
0007ABr 2               ; "GETC" STATEMENT
0007ABr 2               ; ----------------------------------------------------------------------------
0007ABr 2               .ifdef KBD
0007ABr 2               GETC:
0007ABr 2                       jsr     CONINT
0007ABr 2                       jsr     LF43D
0007ABr 2                       jmp     LE664
0007ABr 2               .endif
0007ABr 2               
0007ABr 2               ; ----------------------------------------------------------------------------
0007ABr 2               ; "READ" STATEMENT
0007ABr 2               ; ----------------------------------------------------------------------------
0007ABr 2               READ:
0007ABr 2  A6 rr                ldx     DATPTR
0007ADr 2  A4 rr                ldy     DATPTR+1
0007AFr 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
0007AFr 2               ; AppleSoft II, too
0007AFr 2                       lda     #$98	; READ
0007AFr 2                       .byte   $2C
0007AFr 2               L2ABE:
0007AFr 2                       lda     #$00	; INPUT
0007AFr 2               .else
0007AFr 2  A9                   .byte   $A9	; LDA #$98
0007B0r 2               L2ABE:
0007B0r 2  98                   tya
0007B1r 2               .endif
0007B1r 2               
0007B1r 2               ; ----------------------------------------------------------------------------
0007B1r 2               ; PROCESS INPUT LIST
0007B1r 2               ;
0007B1r 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
0007B1r 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
0007B1r 2               ; 				$40 FOR GET
0007B1r 2               ;				$98 FOR READ
0007B1r 2               ; ----------------------------------------------------------------------------
0007B1r 2               PROCESS_INPUT_LIST:
0007B1r 2  85 rr                sta     INPUTFLG
0007B3r 2  86 rr                stx     INPTR
0007B5r 2  84 rr                sty     INPTR+1
0007B7r 2               PROCESS_INPUT_ITEM:
0007B7r 2  20 rr rr             jsr     PTRGET
0007BAr 2  85 rr                sta     FORPNT
0007BCr 2  84 rr                sty     FORPNT+1
0007BEr 2  A5 rr                lda     TXTPTR
0007C0r 2  A4 rr                ldy     TXTPTR+1
0007C2r 2  85 rr                sta     TXPSV
0007C4r 2  84 rr                sty     TXPSV+1
0007C6r 2  A6 rr                ldx     INPTR
0007C8r 2  A4 rr                ldy     INPTR+1
0007CAr 2  86 rr                stx     TXTPTR
0007CCr 2  84 rr                sty     TXTPTR+1
0007CEr 2  20 rr rr             jsr     CHRGOT
0007D1r 2  D0 0E                bne     INSTART
0007D3r 2  24 rr                bit     INPUTFLG
0007D5r 2               .ifndef CONFIG_SMALL ; GET
0007D5r 2                       bvc     L2AF0
0007D5r 2                 .ifdef MICROTAN
0007D5r 2                       jsr     MONRDKEY2
0007D5r 2                 .else
0007D5r 2                       jsr     MONRDKEY
0007D5r 2                 .endif
0007D5r 2                 .ifdef CONFIG_IO_MSB
0007D5r 2                       and     #$7F
0007D5r 2                 .endif
0007D5r 2                       sta     INPUTBUFFER
0007D5r 2               ; BUG: The beq/bne L2AF8 below is supposed
0007D5r 2               ; to be always taken. For this to happen,
0007D5r 2               ; the last load must be a 0 for beq
0007D5r 2               ; and != 0 for bne. The original Microsoft
0007D5r 2               ; code had ldx/ldy/bne here, which was only
0007D5r 2               ; correct for a non-ZP INPUTBUFFER. Commodore
0007D5r 2               ; fixed it in CBMBASIC V1 by swapping the
0007D5r 2               ; ldx and the ldy. It was broken on KIM,
0007D5r 2               ; but okay on APPLE and CBM2, because
0007D5r 2               ; these used a non-ZP INPUTBUFFER.
0007D5r 2               ; Microsoft fixed this somewhere after KIM
0007D5r 2               ; and before MICROTAN, by using beq instead
0007D5r 2               ; of bne in the ZP case.
0007D5r 2                 .ifdef CBM1
0007D5r 2                       ldy     #>(INPUTBUFFER-1)
0007D5r 2                       ldx     #<(INPUTBUFFER-1)
0007D5r 2                 .else
0007D5r 2                       ldx     #<(INPUTBUFFER-1)
0007D5r 2                       ldy     #>(INPUTBUFFER-1)
0007D5r 2                 .endif
0007D5r 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
0007D5r 2                       beq     L2AF8	; always
0007D5r 2                 .else
0007D5r 2                       bne     L2AF8	; always
0007D5r 2                 .endif
0007D5r 2               L2AF0:
0007D5r 2               .endif
0007D5r 2  30 62                bmi     FINDATA
0007D7r 2               .ifdef CONFIG_FILE
0007D7r 2                       lda     CURDVC
0007D7r 2                       bne     LCB64
0007D7r 2               .endif
0007D7r 2               .ifdef KBD
0007D7r 2                       jsr     OUTQUESSP
0007D7r 2               .else
0007D7r 2  20 rr rr             jsr     OUTQUES
0007DAr 2               .endif
0007DAr 2               LCB64:
0007DAr 2  20 rr rr             jsr     NXIN
0007DDr 2               L2AF8:
0007DDr 2  86 rr                stx     TXTPTR
0007DFr 2  84 rr                sty     TXTPTR+1
0007E1r 2               
0007E1r 2               ; ----------------------------------------------------------------------------
0007E1r 2               INSTART:
0007E1r 2  20 rr rr             jsr     CHRGET
0007E4r 2  24 rr                bit     VALTYP
0007E6r 2  10 24                bpl     L2B34
0007E8r 2               .ifndef CONFIG_SMALL ; GET
0007E8r 2                       bit     INPUTFLG
0007E8r 2                       bvc     L2B10
0007E8r 2                 .ifdef CONFIG_CBM1_PATCHES
0007E8r 2                       lda     #$00
0007E8r 2                       jsr     PATCH4
0007E8r 2                       nop
0007E8r 2                 .else
0007E8r 2                       inx
0007E8r 2                       stx     TXTPTR
0007E8r 2                       lda     #$00
0007E8r 2                       sta     CHARAC
0007E8r 2                       beq     L2B1C
0007E8r 2                 .endif
0007E8r 2               L2B10:
0007E8r 2               .endif
0007E8r 2  85 rr                sta     CHARAC
0007EAr 2  C9 22                cmp     #$22
0007ECr 2  F0 07                beq     L2B1D
0007EEr 2  A9 3A                lda     #$3A
0007F0r 2  85 rr                sta     CHARAC
0007F2r 2  A9 2C                lda     #$2C
0007F4r 2               L2B1C:
0007F4r 2  18                   clc
0007F5r 2               L2B1D:
0007F5r 2  85 rr                sta     ENDCHR
0007F7r 2  A5 rr                lda     TXTPTR
0007F9r 2  A4 rr                ldy     TXTPTR+1
0007FBr 2  69 00                adc     #$00
0007FDr 2  90 01                bcc     L2B28
0007FFr 2  C8                   iny
000800r 2               L2B28:
000800r 2  20 rr rr             jsr     STRLT2
000803r 2  20 rr rr             jsr     POINT
000806r 2               .ifdef CONFIG_SMALL
000806r 2  20 rr rr             jsr     LETSTRING
000809r 2               .else
000809r 2                       jsr     PUTSTR
000809r 2               .endif
000809r 2  4C rr rr             jmp     INPUT_MORE
00080Cr 2               ; ----------------------------------------------------------------------------
00080Cr 2               L2B34:
00080Cr 2  20 rr rr             jsr     FIN
00080Fr 2               .ifdef CONFIG_SMALL
00080Fr 2  20 rr rr             jsr     SETFOR
000812r 2               .else
000812r 2                       lda     VALTYP+1
000812r 2                       jsr     LET2
000812r 2               .endif
000812r 2               ; ----------------------------------------------------------------------------
000812r 2               INPUT_MORE:
000812r 2  20 rr rr             jsr     CHRGOT
000815r 2  F0 07                beq     L2B48
000817r 2  C9 2C                cmp     #$2C
000819r 2  F0 03                beq     L2B48
00081Br 2  4C rr rr             jmp     INPUTERR
00081Er 2               L2B48:
00081Er 2  A5 rr                lda     TXTPTR
000820r 2  A4 rr                ldy     TXTPTR+1
000822r 2  85 rr                sta     INPTR
000824r 2  84 rr                sty     INPTR+1
000826r 2  A5 rr                lda     TXPSV
000828r 2  A4 rr                ldy     TXPSV+1
00082Ar 2  85 rr                sta     TXTPTR
00082Cr 2  84 rr                sty     TXTPTR+1
00082Er 2  20 rr rr             jsr     CHRGOT
000831r 2  F0 2C                beq     INPDONE
000833r 2  20 rr rr             jsr     CHKCOM
000836r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
000839r 2               ; ----------------------------------------------------------------------------
000839r 2               FINDATA:
000839r 2  20 rr rr             jsr     DATAN
00083Cr 2  C8                   iny
00083Dr 2  AA                   tax
00083Er 2  D0 12                bne     L2B7C
000840r 2  A2 06                ldx     #ERR_NODATA
000842r 2  C8                   iny
000843r 2  B1 rr                lda     (TXTPTR),y
000845r 2  F0 69                beq     GERR
000847r 2  C8                   iny
000848r 2  B1 rr                lda     (TXTPTR),y
00084Ar 2  85 rr                sta     Z8C
00084Cr 2  C8                   iny
00084Dr 2  B1 rr                lda     (TXTPTR),y
00084Fr 2  C8                   iny
000850r 2  85 rr                sta     Z8C+1
000852r 2               L2B7C:
000852r 2  B1 rr                lda     (TXTPTR),y
000854r 2  AA                   tax
000855r 2  20 rr rr             jsr     ADDON
000858r 2  E0 83                cpx     #$83
00085Ar 2  D0 DD                bne     FINDATA
00085Cr 2  4C rr rr             jmp     INSTART
00085Fr 2               ; ---NO MORE INPUT REQUESTED------
00085Fr 2               INPDONE:
00085Fr 2  A5 rr                lda     INPTR
000861r 2  A4 rr                ldy     INPTR+1
000863r 2  A6 rr                ldx     INPUTFLG
000865r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
000865r 2                       beq     L2B94 ; INPUT
000865r 2               .else
000865r 2  10 03                bpl     L2B94; INPUT or GET
000867r 2               .endif
000867r 2  4C rr rr             jmp     SETDA
00086Ar 2               L2B94:
00086Ar 2  A0 00                ldy     #$00
00086Cr 2  B1 rr                lda     (INPTR),y
00086Er 2  F0 07                beq     L2BA1
000870r 2               .ifdef CONFIG_FILE
000870r 2                       lda     CURDVC
000870r 2                       bne     L2BA1
000870r 2               .endif
000870r 2  A9 rr                lda     #<ERREXTRA
000872r 2  A0 rr                ldy     #>ERREXTRA
000874r 2  4C rr rr             jmp     STROUT
000877r 2               L2BA1:
000877r 2  60                   rts
000878r 2               
000878r 2               ; ----------------------------------------------------------------------------
000878r 2               ERREXTRA:
000878r 2               .ifdef KBD
000878r 2                       .byte   "?Extra"
000878r 2               .else
000878r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
00087Cr 2  52 41 20 49  
000880r 2  47 4E 4F 52  
000886r 2               .endif
000886r 2  0D 0A 00             .byte   $0D,$0A,$00
000889r 2               ERRREENTRY:
000889r 2               .ifdef KBD
000889r 2                       .byte   "What?"
000889r 2               .else
000889r 2  3F 52 45 44          .byte   "?REDO FROM START"
00088Dr 2  4F 20 46 52  
000891r 2  4F 4D 20 53  
000899r 2               .endif
000899r 2  0D 0A 00             .byte   $0D,$0A,$00
00089Cr 2               .ifdef KBD
00089Cr 2               LEA30:
00089Cr 2                       .byte   "B"
00089Cr 2                       .byte   $FD
00089Cr 2                       .byte   "GsBASIC"
00089Cr 2                       .byte   $00,$1B,$0D,$13
00089Cr 2                       .byte   " BASIC"
00089Cr 2               .endif
00089Cr 2               
00089Cr 1               .include "eval.s"
00089Cr 2               .segment "CODE"
00089Cr 2               
00089Cr 2               ; ----------------------------------------------------------------------------
00089Cr 2               ; "NEXT" STATEMENT
00089Cr 2               ; ----------------------------------------------------------------------------
00089Cr 2               NEXT:
00089Cr 2  D0 04                bne     NEXT1
00089Er 2  A0 00                ldy     #$00
0008A0r 2  F0 03                beq     NEXT2
0008A2r 2               NEXT1:
0008A2r 2  20 rr rr             jsr     PTRGET
0008A5r 2               NEXT2:
0008A5r 2  85 rr                sta     FORPNT
0008A7r 2  84 rr                sty     FORPNT+1
0008A9r 2  20 rr rr             jsr     GTFORPNT
0008ACr 2  F0 04                beq     NEXT3
0008AEr 2  A2 00                ldx     #$00
0008B0r 2               GERR:
0008B0r 2  F0 66                beq     JERROR
0008B2r 2               NEXT3:
0008B2r 2  9A                   txs
0008B3r 2               .ifndef CONFIG_2
0008B3r 2                       inx
0008B3r 2                       inx
0008B3r 2                       inx
0008B3r 2                       inx
0008B3r 2               .endif
0008B3r 2  8A                   txa
0008B4r 2               .ifdef CONFIG_2
0008B4r 2  18                   clc
0008B5r 2  69 04                adc     #$04
0008B7r 2  48                   pha
0008B8r 2  69 05                adc     #BYTES_FP+1
0008BAr 2  85 rr                sta     DEST
0008BCr 2  68                   pla
0008BDr 2               .else
0008BDr 2                       inx
0008BDr 2                       inx
0008BDr 2                       inx
0008BDr 2                       inx
0008BDr 2                       inx
0008BDr 2               .ifndef CONFIG_SMALL
0008BDr 2                       inx
0008BDr 2               .endif
0008BDr 2                       stx     DEST
0008BDr 2               .endif
0008BDr 2  A0 01                ldy     #>STACK
0008BFr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0008C2r 2  BA                   tsx
0008C3r 2  BD 08 01             lda     STACK+BYTES_FP+4,x
0008C6r 2  85 rr                sta     FACSIGN
0008C8r 2  A5 rr                lda     FORPNT
0008CAr 2  A4 rr                ldy     FORPNT+1
0008CCr 2  20 rr rr             jsr     FADD
0008CFr 2  20 rr rr             jsr     SETFOR
0008D2r 2  A0 01                ldy     #>STACK
0008D4r 2  20 rr rr             jsr     FCOMP2
0008D7r 2  BA                   tsx
0008D8r 2  38                   sec
0008D9r 2  FD 08 01             sbc     STACK+BYTES_FP+4,x
0008DCr 2  F0 17                beq     L2C22
0008DEr 2  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
0008E1r 2  85 rr                sta     CURLIN
0008E3r 2  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
0008E6r 2  85 rr                sta     CURLIN+1
0008E8r 2  BD 10 01             lda     STACK+2*BYTES_FP+8,x
0008EBr 2  85 rr                sta     TXTPTR
0008EDr 2  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
0008F0r 2  85 rr                sta     TXTPTR+1
0008F2r 2               L2C1F:
0008F2r 2  4C rr rr             jmp     NEWSTT
0008F5r 2               L2C22:
0008F5r 2  8A                   txa
0008F6r 2  69 0F                adc     #2*BYTES_FP+7
0008F8r 2  AA                   tax
0008F9r 2  9A                   txs
0008FAr 2  20 rr rr             jsr     CHRGOT
0008FDr 2  C9 2C                cmp     #$2C
0008FFr 2  D0 F1                bne     L2C1F
000901r 2  20 rr rr             jsr     CHRGET
000904r 2  20 rr rr             jsr     NEXT1
000907r 2               
000907r 2               ; ----------------------------------------------------------------------------
000907r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000907r 2               ; ----------------------------------------------------------------------------
000907r 2               FRMNUM:
000907r 2  20 rr rr             jsr     FRMEVL
00090Ar 2               
00090Ar 2               ; ----------------------------------------------------------------------------
00090Ar 2               ; MAKE SURE (FAC) IS NUMERIC
00090Ar 2               ; ----------------------------------------------------------------------------
00090Ar 2               CHKNUM:
00090Ar 2  18                   clc
00090Br 2  24                   .byte   $24
00090Cr 2               
00090Cr 2               ; ----------------------------------------------------------------------------
00090Cr 2               ; MAKE SURE (FAC) IS STRING
00090Cr 2               ; ----------------------------------------------------------------------------
00090Cr 2               CHKSTR:
00090Cr 2  38                   sec
00090Dr 2               
00090Dr 2               ; ----------------------------------------------------------------------------
00090Dr 2               ; MAKE SURE (FAC) IS CORRECT TYPE
00090Dr 2               ; IF C=0, TYPE MUST BE NUMERIC
00090Dr 2               ; IF C=1, TYPE MUST BE STRING
00090Dr 2               ; ----------------------------------------------------------------------------
00090Dr 2               CHKVAL:
00090Dr 2  24 rr                bit     VALTYP
00090Fr 2  30 03                bmi     L2C41
000911r 2  B0 03                bcs     L2C43
000913r 2               L2C40:
000913r 2  60                   rts
000914r 2               L2C41:
000914r 2  B0 FD                bcs     L2C40
000916r 2               L2C43:
000916r 2  A2 18                ldx     #ERR_BADTYPE
000918r 2               JERROR:
000918r 2  4C rr rr             jmp     ERROR
00091Br 2               
00091Br 2               ; ----------------------------------------------------------------------------
00091Br 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00091Br 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00091Br 2               ; EXPRESSIONS.
00091Br 2               ; ----------------------------------------------------------------------------
00091Br 2               FRMEVL:
00091Br 2  A6 rr                ldx     TXTPTR
00091Dr 2  D0 02                bne     L2C4E
00091Fr 2  C6 rr                dec     TXTPTR+1
000921r 2               L2C4E:
000921r 2  C6 rr                dec     TXTPTR
000923r 2  A2 00                ldx     #$00
000925r 2  24                   .byte   $24
000926r 2               FRMEVL1:
000926r 2  48                   pha
000927r 2  8A                   txa
000928r 2  48                   pha
000929r 2  A9 01                lda     #$01
00092Br 2  20 rr rr             jsr     CHKMEM
00092Er 2  20 rr rr             jsr     FRM_ELEMENT
000931r 2  A9 00                lda     #$00
000933r 2  85 rr                sta     CPRTYP
000935r 2               FRMEVL2:
000935r 2  20 rr rr             jsr     CHRGOT
000938r 2               L2C65:
000938r 2  38                   sec
000939r 2  E9 AA                sbc     #TOKEN_GREATER
00093Br 2  90 17                bcc     L2C81
00093Dr 2  C9 03                cmp     #$03
00093Fr 2  B0 13                bcs     L2C81
000941r 2  C9 01                cmp     #$01
000943r 2  2A                   rol     a
000944r 2  49 01                eor     #$01
000946r 2  45 rr                eor     CPRTYP
000948r 2  C5 rr                cmp     CPRTYP
00094Ar 2  90 61                bcc     SNTXERR
00094Cr 2  85 rr                sta     CPRTYP
00094Er 2  20 rr rr             jsr     CHRGET
000951r 2  4C rr rr             jmp     L2C65
000954r 2               L2C81:
000954r 2  A6 rr                ldx     CPRTYP
000956r 2  D0 2C                bne     FRM_RELATIONAL
000958r 2  B0 7C                bcs     L2D02
00095Ar 2  69 07                adc     #$07
00095Cr 2  90 78                bcc     L2D02
00095Er 2  65 rr                adc     VALTYP
000960r 2  D0 03                bne     L2C92
000962r 2  4C rr rr             jmp     CAT
000965r 2               L2C92:
000965r 2  69 FF                adc     #$FF
000967r 2  85 rr                sta     INDEX
000969r 2  0A                   asl     a
00096Ar 2  65 rr                adc     INDEX
00096Cr 2  A8                   tay
00096Dr 2               FRM_PRECEDENCE_TEST:
00096Dr 2  68                   pla
00096Er 2  D9 rr rr             cmp     MATHTBL,y
000971r 2  B0 68                bcs     FRM_PERFORM1
000973r 2  20 rr rr             jsr     CHKNUM
000976r 2               L2CA3:
000976r 2  48                   pha
000977r 2               L2CA4:
000977r 2  20 rr rr             jsr     FRM_RECURSE
00097Ar 2  68                   pla
00097Br 2  A4 rr                ldy     LASTOP
00097Dr 2  10 17                bpl     PREFNC
00097Fr 2  AA                   tax
000980r 2  F0 57                beq     GOEX
000982r 2  D0 60                bne     FRM_PERFORM2
000984r 2               
000984r 2               ; ----------------------------------------------------------------------------
000984r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000984r 2               ; ----------------------------------------------------------------------------
000984r 2               FRM_RELATIONAL:
000984r 2  46 rr                lsr     VALTYP
000986r 2  8A                   txa
000987r 2  2A                   rol     a
000988r 2  A6 rr                ldx     TXTPTR
00098Ar 2  D0 02                bne     L2CBB
00098Cr 2  C6 rr                dec     TXTPTR+1
00098Er 2               L2CBB:
00098Er 2  C6 rr                dec     TXTPTR
000990r 2  A0 1B                ldy     #$1B
000992r 2  85 rr                sta     CPRTYP
000994r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
000996r 2               PREFNC:
000996r 2  D9 rr rr             cmp     MATHTBL,y
000999r 2  B0 49                bcs     FRM_PERFORM2
00099Br 2  90 D9                bcc     L2CA3
00099Dr 2               
00099Dr 2               ; ----------------------------------------------------------------------------
00099Dr 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
00099Dr 2               ; ANOTHER ONE
00099Dr 2               ; ----------------------------------------------------------------------------
00099Dr 2               FRM_RECURSE:
00099Dr 2  B9 rr rr             lda     MATHTBL+2,y
0009A0r 2  48                   pha
0009A1r 2  B9 rr rr             lda     MATHTBL+1,y
0009A4r 2  48                   pha
0009A5r 2  20 rr rr             jsr     FRM_STACK1
0009A8r 2  A5 rr                lda     CPRTYP
0009AAr 2  4C rr rr             jmp     FRMEVL1
0009ADr 2               SNTXERR:
0009ADr 2  4C rr rr             jmp     SYNERR
0009B0r 2               
0009B0r 2               ; ----------------------------------------------------------------------------
0009B0r 2               ; STACK (FAC)
0009B0r 2               ; THREE ENTRY POINTS:
0009B0r 2               ; 	1, FROM FRMEVL
0009B0r 2               ;	2, FROM "STEP"
0009B0r 2               ;	3, FROM "FOR"
0009B0r 2               ; ----------------------------------------------------------------------------
0009B0r 2               FRM_STACK1:
0009B0r 2  A5 rr                lda     FACSIGN
0009B2r 2  BE rr rr             ldx     MATHTBL,y
0009B5r 2               
0009B5r 2               ; ----------------------------------------------------------------------------
0009B5r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
0009B5r 2               ; ----------------------------------------------------------------------------
0009B5r 2               FRM_STACK2:
0009B5r 2  A8                   tay
0009B6r 2  68                   pla
0009B7r 2  85 rr                sta     INDEX
0009B9r 2               .ifndef CONFIG_2B
0009B9r 2                       inc     INDEX ; bug: assumes not on page boundary
0009B9r 2               ; bug exists on AppleSoft II
0009B9r 2               .endif
0009B9r 2  68                   pla
0009BAr 2  85 rr                sta     INDEX+1
0009BCr 2               .ifdef CONFIG_2B
0009BCr 2  E6 rr                inc     INDEX
0009BEr 2  D0 02                bne     LEB69
0009C0r 2  E6 rr                inc     INDEX+1
0009C2r 2               LEB69:
0009C2r 2               .endif
0009C2r 2  98                   tya
0009C3r 2  48                   pha
0009C4r 2               
0009C4r 2               ; ----------------------------------------------------------------------------
0009C4r 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
0009C4r 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
0009C4r 2               ; ----------------------------------------------------------------------------
0009C4r 2               FRM_STACK3:
0009C4r 2  20 rr rr             jsr     ROUND_FAC
0009C7r 2               .ifndef CONFIG_SMALL
0009C7r 2                       lda     FAC+4
0009C7r 2                       pha
0009C7r 2               .endif
0009C7r 2  A5 rr                lda     FAC+3
0009C9r 2  48                   pha
0009CAr 2  A5 rr                lda     FAC+2
0009CCr 2  48                   pha
0009CDr 2  A5 rr                lda     FAC+1
0009CFr 2  48                   pha
0009D0r 2  A5 rr                lda     FAC
0009D2r 2  48                   pha
0009D3r 2  6C rr rr             jmp     (INDEX)
0009D6r 2               L2D02:
0009D6r 2  A0 FF                ldy     #$FF
0009D8r 2  68                   pla
0009D9r 2               GOEX:
0009D9r 2  F0 20                beq     EXIT
0009DBr 2               
0009DBr 2               ; ----------------------------------------------------------------------------
0009DBr 2               ; PERFORM STACKED OPERATION
0009DBr 2               ;
0009DBr 2               ; (A) = PRECEDENCE BYTE
0009DBr 2               ; STACK:  1 -- CPRMASK
0009DBr 2               ;	5 -- (ARG)
0009DBr 2               ;	2 -- ADDR OF PERFORMER
0009DBr 2               ; ----------------------------------------------------------------------------
0009DBr 2               FRM_PERFORM1:
0009DBr 2  C9 64                cmp     #$64
0009DDr 2  F0 03                beq     L2D0E
0009DFr 2  20 rr rr             jsr     CHKNUM
0009E2r 2               L2D0E:
0009E2r 2  84 rr                sty     LASTOP
0009E4r 2               FRM_PERFORM2:
0009E4r 2  68                   pla
0009E5r 2  4A                   lsr     a
0009E6r 2  85 rr                sta     CPRMASK
0009E8r 2  68                   pla
0009E9r 2  85 rr                sta     ARG
0009EBr 2  68                   pla
0009ECr 2  85 rr                sta     ARG+1
0009EEr 2  68                   pla
0009EFr 2  85 rr                sta     ARG+2
0009F1r 2  68                   pla
0009F2r 2  85 rr                sta     ARG+3
0009F4r 2  68                   pla
0009F5r 2               .ifndef CONFIG_SMALL
0009F5r 2                       sta     ARG+4
0009F5r 2                       pla
0009F5r 2               .endif
0009F5r 2  85 rr                sta     ARGSIGN
0009F7r 2  45 rr                eor     FACSIGN
0009F9r 2  85 rr                sta     SGNCPR
0009FBr 2               EXIT:
0009FBr 2  A5 rr                lda     FAC
0009FDr 2  60                   rts
0009FEr 2               
0009FEr 2               ; ----------------------------------------------------------------------------
0009FEr 2               ; GET ELEMENT IN EXPRESSION
0009FEr 2               ;
0009FEr 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
0009FEr 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
0009FEr 2               ; ----------------------------------------------------------------------------
0009FEr 2               FRM_ELEMENT:
0009FEr 2  A9 00                lda     #$00
000A00r 2  85 rr                sta     VALTYP
000A02r 2               L2D31:
000A02r 2  20 rr rr             jsr     CHRGET
000A05r 2  B0 03                bcs     L2D39
000A07r 2               L2D36:
000A07r 2  4C rr rr             jmp     FIN
000A0Ar 2               L2D39:
000A0Ar 2  20 rr rr             jsr     ISLETC
000A0Dr 2  B0 67                bcs     FRM_VARIABLE
000A0Fr 2               .ifdef CONFIG_CBM_ALL
000A0Fr 2                       cmp     #$FF
000A0Fr 2                       bne     LCDC1
000A0Fr 2                       lda     #<CON_PI
000A0Fr 2                       ldy     #>CON_PI
000A0Fr 2                       jsr     LOAD_FAC_FROM_YA
000A0Fr 2                       jmp     CHRGET
000A0Fr 2               CON_PI:
000A0Fr 2                       .byte   $82,$49,$0f,$DA,$A1
000A0Fr 2               LCDC1:
000A0Fr 2               .endif
000A0Fr 2  C9 2E                cmp     #$2E
000A11r 2  F0 F4                beq     L2D36
000A13r 2  C9 A4                cmp     #TOKEN_MINUS
000A15r 2  F0 58                beq     MIN
000A17r 2  C9 A3                cmp     #TOKEN_PLUS
000A19r 2  F0 E7                beq     L2D31
000A1Br 2  C9 22                cmp     #$22
000A1Dr 2  D0 0F                bne     NOT_
000A1Fr 2               
000A1Fr 2               ; ----------------------------------------------------------------------------
000A1Fr 2               ; STRING CONSTANT ELEMENT
000A1Fr 2               ;
000A1Fr 2               ; SET Y,A = (TXTPTR)+CARRY
000A1Fr 2               ; ----------------------------------------------------------------------------
000A1Fr 2               STRTXT:
000A1Fr 2  A5 rr                lda     TXTPTR
000A21r 2  A4 rr                ldy     TXTPTR+1
000A23r 2  69 00                adc     #$00
000A25r 2  90 01                bcc     L2D57
000A27r 2  C8                   iny
000A28r 2               L2D57:
000A28r 2  20 rr rr             jsr     STRLIT
000A2Br 2  4C rr rr             jmp     POINT
000A2Er 2               
000A2Er 2               ; ----------------------------------------------------------------------------
000A2Er 2               ; "NOT" FUNCTION
000A2Er 2               ; IF FAC=0, RETURN FAC=1
000A2Er 2               ; IF FAC<>0, RETURN FAC=0
000A2Er 2               ; ----------------------------------------------------------------------------
000A2Er 2               NOT_:
000A2Er 2  C9 A1                cmp     #TOKEN_NOT
000A30r 2  D0 13                bne     L2D74
000A32r 2  A0 18                ldy     #$18
000A34r 2  D0 3B                bne     EQUL
000A36r 2               
000A36r 2               ; ----------------------------------------------------------------------------
000A36r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000A36r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000A36r 2               ; ----------------------------------------------------------------------------
000A36r 2               EQUOP:
000A36r 2  20 rr rr             jsr     AYINT
000A39r 2  A5 rr                lda     FAC_LAST
000A3Br 2  49 FF                eor     #$FF
000A3Dr 2  A8                   tay
000A3Er 2  A5 rr                lda     FAC_LAST-1
000A40r 2  49 FF                eor     #$FF
000A42r 2  4C rr rr             jmp     GIVAYF
000A45r 2               L2D74:
000A45r 2  C9 9E                cmp     #TOKEN_FN
000A47r 2  D0 03                bne     L2D7B
000A49r 2  4C rr rr             jmp     L31F3
000A4Cr 2               L2D7B:
000A4Cr 2  C9 AD                cmp     #TOKEN_SGN
000A4Er 2  90 03                bcc     PARCHK
000A50r 2  4C rr rr             jmp     UNARY
000A53r 2               
000A53r 2               ; ----------------------------------------------------------------------------
000A53r 2               ; EVALUATE "(EXPRESSION)"
000A53r 2               ; ----------------------------------------------------------------------------
000A53r 2               PARCHK:
000A53r 2  20 rr rr             jsr     CHKOPN
000A56r 2  20 rr rr             jsr     FRMEVL
000A59r 2               CHKCLS:
000A59r 2  A9 29                lda     #$29
000A5Br 2  2C                   .byte   $2C
000A5Cr 2               CHKOPN:
000A5Cr 2  A9 28                lda     #$28
000A5Er 2  2C                   .byte   $2C
000A5Fr 2               CHKCOM:
000A5Fr 2  A9 2C                lda     #$2C
000A61r 2               
000A61r 2               ; ----------------------------------------------------------------------------
000A61r 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000A61r 2               ; ----------------------------------------------------------------------------
000A61r 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000A61r 2  A0 00                ldy     #$00
000A63r 2  D1 rr                cmp     (TXTPTR),y
000A65r 2  D0 03                bne     SYNERR
000A67r 2  4C rr rr             jmp     CHRGET
000A6Ar 2               ; ----------------------------------------------------------------------------
000A6Ar 2               SYNERR:
000A6Ar 2  A2 02                ldx     #ERR_SYNTAX
000A6Cr 2  4C rr rr             jmp     ERROR
000A6Fr 2               ; ----------------------------------------------------------------------------
000A6Fr 2               MIN:
000A6Fr 2  A0 15                ldy     #$15
000A71r 2               EQUL:
000A71r 2  68                   pla
000A72r 2  68                   pla
000A73r 2  4C rr rr             jmp     L2CA4
000A76r 2               ; ----------------------------------------------------------------------------
000A76r 2               FRM_VARIABLE:
000A76r 2  20 rr rr             jsr     PTRGET
000A79r 2               FRM_VARIABLE_CALL	= *-1
000A79r 2  85 rr                sta     FAC_LAST-1
000A7Br 2  84 rr                sty     FAC_LAST
000A7Dr 2               .ifdef CONFIG_CBM_ALL
000A7Dr 2                       lda     VARNAM
000A7Dr 2                       ldy     VARNAM+1
000A7Dr 2               .endif
000A7Dr 2  A6 rr                ldx     VALTYP
000A7Fr 2  F0 05                beq     L2DB1
000A81r 2               .ifdef CONFIG_CBM_ALL
000A81r 2                 .ifdef CONFIG_CBM1_PATCHES
000A81r 2                       jmp     PATCH2
000A81r 2                       clc
000A81r 2               LCE3B:
000A81r 2                 .else
000A81r 2                       ldx     #$00
000A81r 2                       stx     STRNG1+1
000A81r 2                       bit     FAC+4
000A81r 2                       bpl     LCE53
000A81r 2                       cmp     #$54	; T
000A81r 2                       bne     LCE53
000A81r 2                 .endif
000A81r 2                       cpy     #$C9	; I$
000A81r 2                       bne     LCE53
000A81r 2                       jsr     LCE76
000A81r 2                       sty     EXPON
000A81r 2                       dey
000A81r 2                       sty     STRNG2
000A81r 2                       ldy     #$06
000A81r 2                       sty     INDX
000A81r 2                       ldy     #$24
000A81r 2                       jsr     LDD3A
000A81r 2                       jmp     LD353
000A81r 2               LCE53:
000A81r 2               .endif
000A81r 2               .ifdef CONFIG_2
000A81r 2                 .ifndef CBM2
000A81r 2               ; bugfix?
000A81r 2               ; fixed on AppleSoft II, not on any CBM
000A81r 2  A2 00                ldx     #$00
000A83r 2  86 rr                stx     STRNG1+1
000A85r 2                 .endif
000A85r 2               .endif
000A85r 2  60                   rts
000A86r 2               L2DB1:
000A86r 2               .ifndef CONFIG_SMALL
000A86r 2                       ldx     VALTYP+1
000A86r 2                       bpl     L2DC2
000A86r 2                       ldy     #$00
000A86r 2                       lda     (FAC+3),y
000A86r 2                       tax
000A86r 2                       iny
000A86r 2                       lda     (FAC+3),y
000A86r 2                       tay
000A86r 2                       txa
000A86r 2                       jmp     GIVAYF
000A86r 2               L2DC2:
000A86r 2               .endif
000A86r 2               .ifdef CONFIG_CBM1_PATCHES
000A86r 2                       jmp     PATCH3
000A86r 2                       .byte   $19
000A86r 2               .endif
000A86r 2               .ifdef CBM2
000A86r 2                       bit     FAC+4
000A86r 2                       bpl     LCE90
000A86r 2                       cmp     #$54
000A86r 2                       bne     LCE82
000A86r 2               .endif
000A86r 2               .ifndef CONFIG_CBM_ALL
000A86r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000A89r 2               .endif
000A89r 2               .ifdef CONFIG_CBM_ALL
000A89r 2               LCE69:
000A89r 2                       cpy     #$49
000A89r 2               .ifdef CBM1
000A89r 2                       bne     LCE82
000A89r 2               .else
000A89r 2                       bne     LCE90
000A89r 2               .endif
000A89r 2                       jsr     LCE76
000A89r 2                       tya
000A89r 2                       ldx     #$A0
000A89r 2                       jmp     LDB21
000A89r 2               LCE76:
000A89r 2               .ifdef CBM1
000A89r 2                       lda     #$FE
000A89r 2                       ldy     #$01
000A89r 2               .else
000A89r 2                       lda     #$8B
000A89r 2                       ldy     #$00
000A89r 2               .endif
000A89r 2                       sei
000A89r 2                       jsr     LOAD_FAC_FROM_YA
000A89r 2                       cli
000A89r 2                       sty     FAC+1
000A89r 2                       rts
000A89r 2               LCE82:
000A89r 2                       cmp     #$53
000A89r 2                       bne     LCE90
000A89r 2                       cpy     #$54
000A89r 2                       bne     LCE90
000A89r 2                       lda     Z96
000A89r 2                       jmp     FLOAT
000A89r 2               LCE90:
000A89r 2                       lda     FAC+3
000A89r 2                       ldy     FAC+4
000A89r 2                       jmp     LOAD_FAC_FROM_YA
000A89r 2               .endif
000A89r 2               
000A89r 2               ; ----------------------------------------------------------------------------
000A89r 2               UNARY:
000A89r 2  0A                   asl     a
000A8Ar 2  48                   pha
000A8Br 2  AA                   tax
000A8Cr 2  20 rr rr             jsr     CHRGET
000A8Fr 2  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
000A91r 2  90 20                bcc     L2DEF
000A93r 2  20 rr rr             jsr     CHKOPN
000A96r 2  20 rr rr             jsr     FRMEVL
000A99r 2  20 rr rr             jsr     CHKCOM
000A9Cr 2  20 rr rr             jsr     CHKSTR
000A9Fr 2  68                   pla
000AA0r 2  AA                   tax
000AA1r 2  A5 rr                lda     FAC_LAST
000AA3r 2  48                   pha
000AA4r 2  A5 rr                lda     FAC_LAST-1
000AA6r 2  48                   pha
000AA7r 2  8A                   txa
000AA8r 2  48                   pha
000AA9r 2  20 rr rr             jsr     GETBYT
000AACr 2  68                   pla
000AADr 2  A8                   tay
000AAEr 2  8A                   txa
000AAFr 2  48                   pha
000AB0r 2  4C rr rr             jmp     L2DF4
000AB3r 2               L2DEF:
000AB3r 2  20 rr rr             jsr     PARCHK
000AB6r 2  68                   pla
000AB7r 2  A8                   tay
000AB8r 2               L2DF4:
000AB8r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000ABBr 2  85 rr                sta     JMPADRS+1
000ABDr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000AC0r 2  85 rr                sta     JMPADRS+2
000AC2r 2               .ifdef KBD
000AC2r 2                       jsr     LF47D
000AC2r 2               .else
000AC2r 2  20 rr rr             jsr     JMPADRS
000AC5r 2               .endif
000AC5r 2  4C rr rr             jmp     CHKNUM
000AC8r 2               
000AC8r 2               ; ----------------------------------------------------------------------------
000AC8r 2               OR:
000AC8r 2  A0 FF                ldy     #$FF
000ACAr 2  2C                   .byte   $2C
000ACBr 2               ; ----------------------------------------------------------------------------
000ACBr 2               TAND:
000ACBr 2  A0 00                ldy     #$00
000ACDr 2  84 rr                sty     EOLPNTR
000ACFr 2  20 rr rr             jsr     AYINT
000AD2r 2  A5 rr                lda     FAC_LAST-1
000AD4r 2  45 rr                eor     EOLPNTR
000AD6r 2  85 rr                sta     CHARAC
000AD8r 2  A5 rr                lda     FAC_LAST
000ADAr 2  45 rr                eor     EOLPNTR
000ADCr 2  85 rr                sta     ENDCHR
000ADEr 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000AE1r 2  20 rr rr             jsr     AYINT
000AE4r 2  A5 rr                lda     FAC_LAST
000AE6r 2  45 rr                eor     EOLPNTR
000AE8r 2  25 rr                and     ENDCHR
000AEAr 2  45 rr                eor     EOLPNTR
000AECr 2  A8                   tay
000AEDr 2  A5 rr                lda     FAC_LAST-1
000AEFr 2  45 rr                eor     EOLPNTR
000AF1r 2  25 rr                and     CHARAC
000AF3r 2  45 rr                eor     EOLPNTR
000AF5r 2  4C rr rr             jmp     GIVAYF
000AF8r 2               
000AF8r 2               ; ----------------------------------------------------------------------------
000AF8r 2               ; PERFORM RELATIONAL OPERATIONS
000AF8r 2               ; ----------------------------------------------------------------------------
000AF8r 2               RELOPS:
000AF8r 2  20 rr rr             jsr     CHKVAL
000AFBr 2  B0 13                bcs     STRCMP
000AFDr 2  A5 rr                lda     ARGSIGN
000AFFr 2  09 7F                ora     #$7F
000B01r 2  25 rr                and     ARG+1
000B03r 2  85 rr                sta     ARG+1
000B05r 2  A9 rr                lda     #<ARG
000B07r 2  A0 00                ldy     #$00
000B09r 2  20 rr rr             jsr     FCOMP
000B0Cr 2  AA                   tax
000B0Dr 2  4C rr rr             jmp     NUMCMP
000B10r 2               
000B10r 2               ; ----------------------------------------------------------------------------
000B10r 2               ; STRING COMPARISON
000B10r 2               ; ----------------------------------------------------------------------------
000B10r 2               STRCMP:
000B10r 2  A9 00                lda     #$00
000B12r 2  85 rr                sta     VALTYP
000B14r 2  C6 rr                dec     CPRTYP
000B16r 2  20 rr rr             jsr     FREFAC
000B19r 2  85 rr                sta     FAC
000B1Br 2  86 rr                stx     FAC+1
000B1Dr 2  84 rr                sty     FAC+2
000B1Fr 2  A5 rr                lda     ARG_LAST-1
000B21r 2  A4 rr                ldy     ARG_LAST
000B23r 2  20 rr rr             jsr     FRETMP
000B26r 2  86 rr                stx     ARG_LAST-1
000B28r 2  84 rr                sty     ARG_LAST
000B2Ar 2  AA                   tax
000B2Br 2  38                   sec
000B2Cr 2  E5 rr                sbc     FAC
000B2Er 2  F0 08                beq     L2E74
000B30r 2  A9 01                lda     #$01
000B32r 2  90 04                bcc     L2E74
000B34r 2  A6 rr                ldx     FAC
000B36r 2  A9 FF                lda     #$FF
000B38r 2               L2E74:
000B38r 2  85 rr                sta     FACSIGN
000B3Ar 2  A0 FF                ldy     #$FF
000B3Cr 2  E8                   inx
000B3Dr 2               STRCMP1:
000B3Dr 2  C8                   iny
000B3Er 2  CA                   dex
000B3Fr 2  D0 07                bne     L2E84
000B41r 2  A6 rr                ldx     FACSIGN
000B43r 2               NUMCMP:
000B43r 2  30 0F                bmi     CMPDONE
000B45r 2  18                   clc
000B46r 2  90 0C                bcc     CMPDONE
000B48r 2               L2E84:
000B48r 2  B1 rr                lda     (ARG_LAST-1),y
000B4Ar 2  D1 rr                cmp     (FAC+1),y
000B4Cr 2  F0 EF                beq     STRCMP1
000B4Er 2  A2 FF                ldx     #$FF
000B50r 2  B0 02                bcs     CMPDONE
000B52r 2  A2 01                ldx     #$01
000B54r 2               CMPDONE:
000B54r 2  E8                   inx
000B55r 2  8A                   txa
000B56r 2  2A                   rol     a
000B57r 2  25 rr                and     CPRMASK
000B59r 2  F0 02                beq     L2E99
000B5Br 2  A9 FF                lda     #$FF
000B5Dr 2               L2E99:
000B5Dr 2  4C rr rr             jmp     FLOAT
000B60r 2               
000B60r 1               .include "var.s"
000B60r 2               .segment "CODE"
000B60r 2               
000B60r 2               ; ----------------------------------------------------------------------------
000B60r 2               ; "DIM" STATEMENT
000B60r 2               ; ----------------------------------------------------------------------------
000B60r 2               NXDIM:
000B60r 2  20 rr rr             jsr     CHKCOM
000B63r 2               DIM:
000B63r 2  AA                   tax
000B64r 2  20 rr rr             jsr     PTRGET2
000B67r 2  20 rr rr             jsr     CHRGOT
000B6Ar 2  D0 F4                bne     NXDIM
000B6Cr 2  60                   rts
000B6Dr 2               
000B6Dr 2               ; ----------------------------------------------------------------------------
000B6Dr 2               ; PTRGET -- GENERAL VARIABLE SCAN
000B6Dr 2               ;
000B6Dr 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000B6Dr 2               ; VARTAB AND ARYTAB FOR THE NAME.
000B6Dr 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000B6Dr 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000B6Dr 2               ;
000B6Dr 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000B6Dr 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000B6Dr 2               ;		ELSE = 0
000B6Dr 2               ;
000B6Dr 2               ;	SUBFLG -- = $00
000B6Dr 2               ;		= $40 IF CALLED FROM "GETARYPT"
000B6Dr 2               ; ----------------------------------------------------------------------------
000B6Dr 2               PTRGET:
000B6Dr 2  A2 00                ldx     #$00
000B6Fr 2  20 rr rr             jsr     CHRGOT
000B72r 2               PTRGET2:
000B72r 2  86 rr                stx     DIMFLG
000B74r 2               PTRGET3:
000B74r 2  85 rr                sta     VARNAM
000B76r 2  20 rr rr             jsr     CHRGOT
000B79r 2  20 rr rr             jsr     ISLETC
000B7Cr 2  B0 03                bcs     NAMOK
000B7Er 2               SYNERR3:
000B7Er 2  4C rr rr             jmp     SYNERR
000B81r 2               NAMOK:
000B81r 2  A2 00                ldx     #$00
000B83r 2  86 rr                stx     VALTYP
000B85r 2               .ifndef CONFIG_SMALL
000B85r 2                       stx     VALTYP+1
000B85r 2               .endif
000B85r 2  20 rr rr             jsr     CHRGET
000B88r 2  90 05                bcc     L2ECD
000B8Ar 2  20 rr rr             jsr     ISLETC
000B8Dr 2  90 0B                bcc     L2ED8
000B8Fr 2               L2ECD:
000B8Fr 2  AA                   tax
000B90r 2               L2ECE:
000B90r 2  20 rr rr             jsr     CHRGET
000B93r 2  90 FB                bcc     L2ECE
000B95r 2  20 rr rr             jsr     ISLETC
000B98r 2  B0 F6                bcs     L2ECE
000B9Ar 2               L2ED8:
000B9Ar 2  C9 24                cmp     #$24
000B9Cr 2               .ifdef CONFIG_SMALL
000B9Cr 2  D0 0B                bne     L2EF9
000B9Er 2               .else
000B9Er 2                       bne     L2EE2
000B9Er 2               .endif
000B9Er 2  A9 FF                lda     #$FF
000BA0r 2  85 rr                sta     VALTYP
000BA2r 2               .ifndef CONFIG_SMALL
000BA2r 2                       bne     L2EF2
000BA2r 2               L2EE2:
000BA2r 2                       cmp     #$25
000BA2r 2                       bne     L2EF9
000BA2r 2                       lda     SUBFLG
000BA2r 2                       bne     SYNERR3
000BA2r 2                       lda     #$80
000BA2r 2                       sta     VALTYP+1
000BA2r 2                       ora     VARNAM
000BA2r 2                       sta     VARNAM
000BA2r 2               L2EF2:
000BA2r 2               .endif
000BA2r 2  8A                   txa
000BA3r 2  09 80                ora     #$80
000BA5r 2  AA                   tax
000BA6r 2  20 rr rr             jsr     CHRGET
000BA9r 2               L2EF9:
000BA9r 2  86 rr                stx     VARNAM+1
000BABr 2  38                   sec
000BACr 2  05 rr                ora     SUBFLG
000BAEr 2  E9 28                sbc     #$28
000BB0r 2  D0 03                bne     L2F05
000BB2r 2  4C rr rr             jmp     ARRAY
000BB5r 2               L2F05:
000BB5r 2  A9 00                lda     #$00
000BB7r 2  85 rr                sta     SUBFLG
000BB9r 2  A5 rr                lda     VARTAB
000BBBr 2  A6 rr                ldx     VARTAB+1
000BBDr 2  A0 00                ldy     #$00
000BBFr 2               L2F0F:
000BBFr 2  86 rr                stx     LOWTR+1
000BC1r 2               L2F11:
000BC1r 2  85 rr                sta     LOWTR
000BC3r 2  E4 rr                cpx     ARYTAB+1
000BC5r 2  D0 04                bne     L2F1B
000BC7r 2  C5 rr                cmp     ARYTAB
000BC9r 2  F0 22                beq     NAMENOTFOUND
000BCBr 2               L2F1B:
000BCBr 2  A5 rr                lda     VARNAM
000BCDr 2  D1 rr                cmp     (LOWTR),y
000BCFr 2  D0 08                bne     L2F29
000BD1r 2  A5 rr                lda     VARNAM+1
000BD3r 2  C8                   iny
000BD4r 2  D1 rr                cmp     (LOWTR),y
000BD6r 2  F0 5F                beq     SET_VARPNT_AND_YA
000BD8r 2  88                   dey
000BD9r 2               L2F29:
000BD9r 2  18                   clc
000BDAr 2  A5 rr                lda     LOWTR
000BDCr 2  69 06                adc     #BYTES_PER_VARIABLE
000BDEr 2  90 E1                bcc     L2F11
000BE0r 2  E8                   inx
000BE1r 2  D0 DC                bne     L2F0F
000BE3r 2               
000BE3r 2               ; ----------------------------------------------------------------------------
000BE3r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000BE3r 2               ;
000BE3r 2               ; RETURN CARRY = 1 IF A-Z
000BE3r 2               ;	= 0 IF NOT
000BE3r 2               ; ----------------------------------------------------------------------------
000BE3r 2               ISLETC:
000BE3r 2  C9 41                cmp     #$41
000BE5r 2  90 05                bcc     L2F3C
000BE7r 2  E9 5B                sbc     #$5B
000BE9r 2  38                   sec
000BEAr 2  E9 A5                sbc     #$A5
000BECr 2               L2F3C:
000BECr 2  60                   rts
000BEDr 2               
000BEDr 2               ; ----------------------------------------------------------------------------
000BEDr 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000BEDr 2               ; ----------------------------------------------------------------------------
000BEDr 2               NAMENOTFOUND:
000BEDr 2  68                   pla
000BEEr 2  48                   pha
000BEFr 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000BF1r 2  D0 05                bne     MAKENEWVARIABLE
000BF3r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000BF3r 2                       tsx
000BF3r 2                       lda     STACK+2,x
000BF3r 2                       cmp     #>FRM_VARIABLE_CALL
000BF3r 2                       bne     MAKENEWVARIABLE
000BF3r 2               .endif
000BF3r 2               LD015:
000BF3r 2  A9 rr                lda     #<C_ZERO
000BF5r 2  A0 rr                ldy     #>C_ZERO
000BF7r 2  60                   rts
000BF8r 2               
000BF8r 2               ; ----------------------------------------------------------------------------
000BF8r 2               .ifndef CONFIG_2
000BF8r 2               C_ZERO:
000BF8r 2                       .byte   $00,$00
000BF8r 2               .endif
000BF8r 2               
000BF8r 2               ; ----------------------------------------------------------------------------
000BF8r 2               ; MAKE A NEW SIMPLE VARIABLE
000BF8r 2               ;
000BF8r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000BF8r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000BF8r 2               ; ----------------------------------------------------------------------------
000BF8r 2               MAKENEWVARIABLE:
000BF8r 2               .ifdef CONFIG_CBM_ALL
000BF8r 2                       lda     VARNAM
000BF8r 2                       ldy     VARNAM+1
000BF8r 2                       cmp     #$54
000BF8r 2                       bne     LD02F
000BF8r 2                       cpy     #$C9
000BF8r 2                       beq     LD015
000BF8r 2                       cpy     #$49
000BF8r 2                       bne     LD02F
000BF8r 2               LD02C:
000BF8r 2                       jmp     SYNERR
000BF8r 2               LD02F:
000BF8r 2                       cmp     #$53
000BF8r 2                       bne     LD037
000BF8r 2                       cpy     #$54
000BF8r 2                       beq     LD02C
000BF8r 2               LD037:
000BF8r 2               .endif
000BF8r 2  A5 rr                lda     ARYTAB
000BFAr 2  A4 rr                ldy     ARYTAB+1
000BFCr 2  85 rr                sta     LOWTR
000BFEr 2  84 rr                sty     LOWTR+1
000C00r 2  A5 rr                lda     STREND
000C02r 2  A4 rr                ldy     STREND+1
000C04r 2  85 rr                sta     HIGHTR
000C06r 2  84 rr                sty     HIGHTR+1
000C08r 2  18                   clc
000C09r 2  69 06                adc     #BYTES_PER_VARIABLE
000C0Br 2  90 01                bcc     L2F68
000C0Dr 2  C8                   iny
000C0Er 2               L2F68:
000C0Er 2  85 rr                sta     HIGHDS
000C10r 2  84 rr                sty     HIGHDS+1
000C12r 2  20 rr rr             jsr     BLTU
000C15r 2  A5 rr                lda     HIGHDS
000C17r 2  A4 rr                ldy     HIGHDS+1
000C19r 2  C8                   iny
000C1Ar 2  85 rr                sta     ARYTAB
000C1Cr 2  84 rr                sty     ARYTAB+1
000C1Er 2  A0 00                ldy     #$00
000C20r 2  A5 rr                lda     VARNAM
000C22r 2  91 rr                sta     (LOWTR),y
000C24r 2  C8                   iny
000C25r 2  A5 rr                lda     VARNAM+1
000C27r 2  91 rr                sta     (LOWTR),y
000C29r 2  A9 00                lda     #$00
000C2Br 2  C8                   iny
000C2Cr 2  91 rr                sta     (LOWTR),y
000C2Er 2  C8                   iny
000C2Fr 2  91 rr                sta     (LOWTR),y
000C31r 2  C8                   iny
000C32r 2  91 rr                sta     (LOWTR),y
000C34r 2  C8                   iny
000C35r 2  91 rr                sta     (LOWTR),y
000C37r 2               .ifndef CONFIG_SMALL
000C37r 2                       iny
000C37r 2                       sta     (LOWTR),y
000C37r 2               .endif
000C37r 2               
000C37r 2               ; ----------------------------------------------------------------------------
000C37r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000C37r 2               ; ----------------------------------------------------------------------------
000C37r 2               SET_VARPNT_AND_YA:
000C37r 2  A5 rr                lda     LOWTR
000C39r 2  18                   clc
000C3Ar 2  69 02                adc     #$02
000C3Cr 2  A4 rr                ldy     LOWTR+1
000C3Er 2  90 01                bcc     L2F9E
000C40r 2  C8                   iny
000C41r 2               L2F9E:
000C41r 2  85 rr                sta     VARPNT
000C43r 2  84 rr                sty     VARPNT+1
000C45r 2  60                   rts
000C46r 2               
000C46r 1               .include "array.s"
000C46r 2               .segment "CODE"
000C46r 2               
000C46r 2               ; ----------------------------------------------------------------------------
000C46r 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000C46r 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000C46r 2               ; ----------------------------------------------------------------------------
000C46r 2               GETARY:
000C46r 2  A5 rr                lda     EOLPNTR
000C48r 2  0A                   asl     a
000C49r 2  69 05                adc     #$05
000C4Br 2  65 rr                adc     LOWTR
000C4Dr 2  A4 rr                ldy     LOWTR+1
000C4Fr 2  90 01                bcc     L2FAF
000C51r 2  C8                   iny
000C52r 2               L2FAF:
000C52r 2  85 rr                sta     HIGHDS
000C54r 2  84 rr                sty     HIGHDS+1
000C56r 2  60                   rts
000C57r 2               
000C57r 2               ; ----------------------------------------------------------------------------
000C57r 2               NEG32768:
000C57r 2  90 80 00 00          .byte   $90,$80,$00,$00
000C5Br 2               
000C5Br 2               .ifdef CONFIG_2C
000C5Br 2  00           		.byte	$00; bugfix: short number
000C5Cr 2               .endif
000C5Cr 2               
000C5Cr 2               ; ----------------------------------------------------------------------------
000C5Cr 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000C5Cr 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000C5Cr 2               ; IN FAC+3,4
000C5Cr 2               ; ----------------------------------------------------------------------------
000C5Cr 2               MAKINT:
000C5Cr 2  20 rr rr             jsr     CHRGET
000C5Fr 2               .ifdef CONFIG_2
000C5Fr 2  20 rr rr             jsr     FRMEVL
000C62r 2               .else
000C62r 2                       jsr     FRMNUM
000C62r 2               .endif
000C62r 2               
000C62r 2               ; ----------------------------------------------------------------------------
000C62r 2               ; CONVERT FAC TO INTEGER
000C62r 2               ; MUST BE POSITIVE AND LESS THAN 32768
000C62r 2               ; ----------------------------------------------------------------------------
000C62r 2               MKINT:
000C62r 2               .ifdef CONFIG_2
000C62r 2  20 rr rr             jsr     CHKNUM
000C65r 2               .endif
000C65r 2  A5 rr                lda     FACSIGN
000C67r 2  30 0D                bmi     MI1
000C69r 2               
000C69r 2               ; ----------------------------------------------------------------------------
000C69r 2               ; CONVERT FAC TO INTEGER
000C69r 2               ; MUST BE -32767 <= FAC <= 32767
000C69r 2               ; ----------------------------------------------------------------------------
000C69r 2               AYINT:
000C69r 2  A5 rr                lda     FAC
000C6Br 2  C9 90                cmp     #$90
000C6Dr 2  90 09                bcc     MI2
000C6Fr 2  A9 rr                lda     #<NEG32768
000C71r 2  A0 rr                ldy     #>NEG32768
000C73r 2  20 rr rr             jsr     FCOMP
000C76r 2               MI1:
000C76r 2  D0 74                bne     IQERR
000C78r 2               MI2:
000C78r 2  4C rr rr             jmp     QINT
000C7Br 2               
000C7Br 2               ; ----------------------------------------------------------------------------
000C7Br 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000C7Br 2               ; ----------------------------------------------------------------------------
000C7Br 2               ARRAY:
000C7Br 2  A5 rr                lda     DIMFLG
000C7Dr 2               .ifndef CONFIG_SMALL
000C7Dr 2                       ora     VALTYP+1
000C7Dr 2               .endif
000C7Dr 2  48                   pha
000C7Er 2  A5 rr                lda     VALTYP
000C80r 2  48                   pha
000C81r 2  A0 00                ldy     #$00
000C83r 2               L2FDE:
000C83r 2  98                   tya
000C84r 2  48                   pha
000C85r 2  A5 rr                lda     VARNAM+1
000C87r 2  48                   pha
000C88r 2  A5 rr                lda     VARNAM
000C8Ar 2  48                   pha
000C8Br 2  20 rr rr             jsr     MAKINT
000C8Er 2  68                   pla
000C8Fr 2  85 rr                sta     VARNAM
000C91r 2  68                   pla
000C92r 2  85 rr                sta     VARNAM+1
000C94r 2  68                   pla
000C95r 2  A8                   tay
000C96r 2  BA                   tsx
000C97r 2  BD 02 01             lda     STACK+2,x
000C9Ar 2  48                   pha
000C9Br 2  BD 01 01             lda     STACK+1,x
000C9Er 2  48                   pha
000C9Fr 2  A5 rr                lda     FAC_LAST-1
000CA1r 2  9D 02 01             sta     STACK+2,x
000CA4r 2  A5 rr                lda     FAC_LAST
000CA6r 2  9D 01 01             sta     STACK+1,x
000CA9r 2  C8                   iny
000CAAr 2  20 rr rr             jsr     CHRGOT
000CADr 2  C9 2C                cmp     #$2C
000CAFr 2  F0 D2                beq     L2FDE
000CB1r 2  84 rr                sty     EOLPNTR
000CB3r 2  20 rr rr             jsr     CHKCLS
000CB6r 2  68                   pla
000CB7r 2  85 rr                sta     VALTYP
000CB9r 2  68                   pla
000CBAr 2               .ifndef CONFIG_SMALL
000CBAr 2                       sta     VALTYP+1
000CBAr 2                       and     #$7F
000CBAr 2               .endif
000CBAr 2  85 rr                sta     DIMFLG
000CBCr 2               ; ----------------------------------------------------------------------------
000CBCr 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000CBCr 2               ; ----------------------------------------------------------------------------
000CBCr 2  A6 rr                ldx     ARYTAB
000CBEr 2  A5 rr                lda     ARYTAB+1
000CC0r 2               L301F:
000CC0r 2  86 rr                stx     LOWTR
000CC2r 2  85 rr                sta     LOWTR+1
000CC4r 2  C5 rr                cmp     STREND+1
000CC6r 2  D0 04                bne     L302B
000CC8r 2  E4 rr                cpx     STREND
000CCAr 2  F0 39                beq     MAKE_NEW_ARRAY
000CCCr 2               L302B:
000CCCr 2  A0 00                ldy     #$00
000CCEr 2  B1 rr                lda     (LOWTR),y
000CD0r 2  C8                   iny
000CD1r 2  C5 rr                cmp     VARNAM
000CD3r 2  D0 06                bne     L303A
000CD5r 2  A5 rr                lda     VARNAM+1
000CD7r 2  D1 rr                cmp     (LOWTR),y
000CD9r 2  F0 16                beq     USE_OLD_ARRAY
000CDBr 2               L303A:
000CDBr 2  C8                   iny
000CDCr 2  B1 rr                lda     (LOWTR),y
000CDEr 2  18                   clc
000CDFr 2  65 rr                adc     LOWTR
000CE1r 2  AA                   tax
000CE2r 2  C8                   iny
000CE3r 2  B1 rr                lda     (LOWTR),y
000CE5r 2  65 rr                adc     LOWTR+1
000CE7r 2  90 D7                bcc     L301F
000CE9r 2               
000CE9r 2               ; ----------------------------------------------------------------------------
000CE9r 2               ; ERROR:  BAD SUBSCRIPTS
000CE9r 2               ; ----------------------------------------------------------------------------
000CE9r 2               SUBERR:
000CE9r 2  A2 10                ldx     #ERR_BADSUBS
000CEBr 2  2C                   .byte   $2C
000CECr 2               
000CECr 2               ; ----------------------------------------------------------------------------
000CECr 2               ; ERROR:  ILLEGAL QUANTITY
000CECr 2               ; ----------------------------------------------------------------------------
000CECr 2               IQERR:
000CECr 2  A2 08                ldx     #ERR_ILLQTY
000CEEr 2               JER:
000CEEr 2  4C rr rr             jmp     ERROR
000CF1r 2               
000CF1r 2               ; ----------------------------------------------------------------------------
000CF1r 2               ; FOUND THE ARRAY
000CF1r 2               ; ----------------------------------------------------------------------------
000CF1r 2               USE_OLD_ARRAY:
000CF1r 2  A2 12                ldx     #ERR_REDIMD
000CF3r 2  A5 rr                lda     DIMFLG
000CF5r 2  D0 F7                bne     JER
000CF7r 2  20 rr rr             jsr     GETARY
000CFAr 2  A5 rr                lda     EOLPNTR
000CFCr 2  A0 04                ldy     #$04
000CFEr 2  D1 rr                cmp     (LOWTR),y
000D00r 2  D0 E7                bne     SUBERR
000D02r 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000D05r 2               
000D05r 2               ; ----------------------------------------------------------------------------
000D05r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000D05r 2               ; ----------------------------------------------------------------------------
000D05r 2               MAKE_NEW_ARRAY:
000D05r 2  20 rr rr             jsr     GETARY
000D08r 2  20 rr rr             jsr     REASON
000D0Br 2  A9 00                lda     #$00
000D0Dr 2  A8                   tay
000D0Er 2  85 rr                sta     STRNG2+1
000D10r 2  A2 04                ldx     #BYTES_PER_ELEMENT
000D12r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000D12r 2                       stx     STRNG2
000D12r 2               .endif
000D12r 2  A5 rr                lda     VARNAM
000D14r 2  91 rr                sta     (LOWTR),y
000D16r 2               .ifndef CONFIG_SMALL
000D16r 2                       bpl     L3078
000D16r 2                       dex
000D16r 2               L3078:
000D16r 2               .endif
000D16r 2  C8                   iny
000D17r 2  A5 rr                lda     VARNAM+1
000D19r 2  91 rr                sta     (LOWTR),y
000D1Br 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000D1Br 2  10 01                bpl     L3081
000D1Dr 2  CA                   dex
000D1Er 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000D1Er 2                       dex
000D1Er 2                 .endif
000D1Er 2               L3081:
000D1Er 2  86 rr                stx     STRNG2
000D20r 2               .endif
000D20r 2  A5 rr                lda     EOLPNTR
000D22r 2  C8                   iny
000D23r 2  C8                   iny
000D24r 2  C8                   iny
000D25r 2  91 rr                sta     (LOWTR),y
000D27r 2               L308A:
000D27r 2  A2 0B                ldx     #$0B
000D29r 2  A9 00                lda     #$00
000D2Br 2  24 rr                bit     DIMFLG
000D2Dr 2  50 08                bvc     L309A
000D2Fr 2  68                   pla
000D30r 2  18                   clc
000D31r 2  69 01                adc     #$01
000D33r 2  AA                   tax
000D34r 2  68                   pla
000D35r 2  69 00                adc     #$00
000D37r 2               L309A:
000D37r 2  C8                   iny
000D38r 2  91 rr                sta     (LOWTR),y
000D3Ar 2  C8                   iny
000D3Br 2  8A                   txa
000D3Cr 2  91 rr                sta     (LOWTR),y
000D3Er 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000D41r 2  86 rr                stx     STRNG2
000D43r 2  85 rr                sta     STRNG2+1
000D45r 2  A4 rr                ldy     INDEX
000D47r 2  C6 rr                dec     EOLPNTR
000D49r 2  D0 DC                bne     L308A
000D4Br 2  65 rr                adc     HIGHDS+1
000D4Dr 2  B0 5D                bcs     GME
000D4Fr 2  85 rr                sta     HIGHDS+1
000D51r 2  A8                   tay
000D52r 2  8A                   txa
000D53r 2  65 rr                adc     HIGHDS
000D55r 2  90 03                bcc     L30BD
000D57r 2  C8                   iny
000D58r 2  F0 52                beq     GME
000D5Ar 2               L30BD:
000D5Ar 2  20 rr rr             jsr     REASON
000D5Dr 2  85 rr                sta     STREND
000D5Fr 2  84 rr                sty     STREND+1
000D61r 2  A9 00                lda     #$00
000D63r 2  E6 rr                inc     STRNG2+1
000D65r 2  A4 rr                ldy     STRNG2
000D67r 2  F0 05                beq     L30D1
000D69r 2               L30CC:
000D69r 2  88                   dey
000D6Ar 2  91 rr                sta     (HIGHDS),y
000D6Cr 2  D0 FB                bne     L30CC
000D6Er 2               L30D1:
000D6Er 2  C6 rr                dec     HIGHDS+1
000D70r 2  C6 rr                dec     STRNG2+1
000D72r 2  D0 F5                bne     L30CC
000D74r 2  E6 rr                inc     HIGHDS+1
000D76r 2  38                   sec
000D77r 2  A5 rr                lda     STREND
000D79r 2  E5 rr                sbc     LOWTR
000D7Br 2  A0 02                ldy     #$02
000D7Dr 2  91 rr                sta     (LOWTR),y
000D7Fr 2  A5 rr                lda     STREND+1
000D81r 2  C8                   iny
000D82r 2  E5 rr                sbc     LOWTR+1
000D84r 2  91 rr                sta     (LOWTR),y
000D86r 2  A5 rr                lda     DIMFLG
000D88r 2  D0 5C                bne     RTS9
000D8Ar 2  C8                   iny
000D8Br 2               
000D8Br 2               ; ----------------------------------------------------------------------------
000D8Br 2               ; FIND SPECIFIED ARRAY ELEMENT
000D8Br 2               ;
000D8Br 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000D8Br 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000D8Br 2               ; ----------------------------------------------------------------------------
000D8Br 2               FIND_ARRAY_ELEMENT:
000D8Br 2  B1 rr                lda     (LOWTR),y
000D8Dr 2  85 rr                sta     EOLPNTR
000D8Fr 2  A9 00                lda     #$00
000D91r 2  85 rr                sta     STRNG2
000D93r 2               L30F6:
000D93r 2  85 rr                sta     STRNG2+1
000D95r 2  C8                   iny
000D96r 2  68                   pla
000D97r 2  AA                   tax
000D98r 2  85 rr                sta     FAC_LAST-1
000D9Ar 2  68                   pla
000D9Br 2  85 rr                sta     FAC_LAST
000D9Dr 2  D1 rr                cmp     (LOWTR),y
000D9Fr 2  90 0E                bcc     FAE2
000DA1r 2  D0 06                bne     GSE
000DA3r 2  C8                   iny
000DA4r 2  8A                   txa
000DA5r 2  D1 rr                cmp     (LOWTR),y
000DA7r 2  90 07                bcc     FAE3
000DA9r 2               ; ----------------------------------------------------------------------------
000DA9r 2               GSE:
000DA9r 2  4C rr rr             jmp     SUBERR
000DACr 2               GME:
000DACr 2  4C rr rr             jmp     MEMERR
000DAFr 2               ; ----------------------------------------------------------------------------
000DAFr 2               FAE2:
000DAFr 2  C8                   iny
000DB0r 2               FAE3:
000DB0r 2  A5 rr                lda     STRNG2+1
000DB2r 2  05 rr                ora     STRNG2
000DB4r 2  18                   clc
000DB5r 2  F0 0A                beq     L3124
000DB7r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000DBAr 2  8A                   txa
000DBBr 2  65 rr                adc     FAC_LAST-1
000DBDr 2  AA                   tax
000DBEr 2  98                   tya
000DBFr 2  A4 rr                ldy     INDEX
000DC1r 2               L3124:
000DC1r 2  65 rr                adc     FAC_LAST
000DC3r 2  86 rr                stx     STRNG2
000DC5r 2  C6 rr                dec     EOLPNTR
000DC7r 2  D0 CA                bne     L30F6
000DC9r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000DC9r 2                       asl     STRNG2
000DC9r 2                       rol     a
000DC9r 2                       bcs     GSE
000DC9r 2                       asl     STRNG2
000DC9r 2                       rol     a
000DC9r 2                       bcs     GSE
000DC9r 2                       tay
000DC9r 2                       lda     STRNG2
000DC9r 2               .else
000DC9r 2                 .ifdef CONFIG_11A
000DC9r 2  85 rr                sta     STRNG2+1
000DCBr 2                 .endif
000DCBr 2  A2 04                ldx     #BYTES_FP
000DCDr 2                 .ifdef CONFIG_SMALL
000DCDr 2  A5 rr                lda     VARNAM+1
000DCFr 2                 .else
000DCFr 2                       lda     VARNAM
000DCFr 2                 .endif
000DCFr 2  10 01                bpl     L3135
000DD1r 2  CA                   dex
000DD2r 2               L3135:
000DD2r 2                 .ifdef CONFIG_SMALL
000DD2r 2  86 rr                stx     RESULT+1
000DD4r 2                 .else
000DD4r 2                       lda     VARNAM+1
000DD4r 2                       bpl     L313B
000DD4r 2                       dex
000DD4r 2                       dex
000DD4r 2               L313B:
000DD4r 2                       stx     RESULT+2
000DD4r 2                 .endif
000DD4r 2  A9 00                lda     #$00
000DD6r 2  20 rr rr             jsr     MULTIPLY_SUBS1
000DD9r 2  8A                   txa
000DDAr 2               .endif
000DDAr 2  65 rr                adc     HIGHDS
000DDCr 2  85 rr                sta     VARPNT
000DDEr 2  98                   tya
000DDFr 2  65 rr                adc     HIGHDS+1
000DE1r 2  85 rr                sta     VARPNT+1
000DE3r 2  A8                   tay
000DE4r 2  A5 rr                lda     VARPNT
000DE6r 2               RTS9:
000DE6r 2  60                   rts
000DE7r 2               
000DE7r 2               ; ----------------------------------------------------------------------------
000DE7r 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000DE7r 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000DE7r 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000DE7r 2               ; ----------------------------------------------------------------------------
000DE7r 2               MULTIPLY_SUBSCRIPT:
000DE7r 2  84 rr                sty     INDEX
000DE9r 2  B1 rr                lda     (LOWTR),y
000DEBr 2  85 rr                sta     RESULT_LAST-2
000DEDr 2  88                   dey
000DEEr 2  B1 rr                lda     (LOWTR),y
000DF0r 2               MULTIPLY_SUBS1:
000DF0r 2  85 rr                sta     RESULT_LAST-1
000DF2r 2  A9 10                lda     #$10
000DF4r 2  85 rr                sta     INDX
000DF6r 2  A2 00                ldx     #$00
000DF8r 2  A0 00                ldy     #$00
000DFAr 2               L3163:
000DFAr 2  8A                   txa
000DFBr 2  0A                   asl     a
000DFCr 2  AA                   tax
000DFDr 2  98                   tya
000DFEr 2  2A                   rol     a
000DFFr 2  A8                   tay
000E00r 2  B0 AA                bcs     GME
000E02r 2  06 rr                asl     STRNG2
000E04r 2  26 rr                rol     STRNG2+1
000E06r 2  90 0B                bcc     L317C
000E08r 2  18                   clc
000E09r 2  8A                   txa
000E0Ar 2  65 rr                adc     RESULT_LAST-2
000E0Cr 2  AA                   tax
000E0Dr 2  98                   tya
000E0Er 2  65 rr                adc     RESULT_LAST-1
000E10r 2  A8                   tay
000E11r 2  B0 99                bcs     GME
000E13r 2               L317C:
000E13r 2  C6 rr                dec     INDX
000E15r 2  D0 E3                bne     L3163
000E17r 2  60                   rts
000E18r 2               
000E18r 2               
000E18r 1               .include "misc2.s"
000E18r 2               .segment "CODE"
000E18r 2               
000E18r 2               ; ----------------------------------------------------------------------------
000E18r 2               ; "FRE" FUNCTION
000E18r 2               ;
000E18r 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000E18r 2               ; ----------------------------------------------------------------------------
000E18r 2               FRE:
000E18r 2  A5 rr                lda     VALTYP
000E1Ar 2  F0 03                beq     L3188
000E1Cr 2  20 rr rr             jsr     FREFAC
000E1Fr 2               L3188:
000E1Fr 2  20 rr rr             jsr     GARBAG
000E22r 2  38                   sec
000E23r 2  A5 rr                lda     FRETOP
000E25r 2  E5 rr                sbc     STREND
000E27r 2  A8                   tay
000E28r 2  A5 rr                lda     FRETOP+1
000E2Ar 2  E5 rr                sbc     STREND+1
000E2Cr 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000E2Cr 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000E2Cr 2               
000E2Cr 2               ; ----------------------------------------------------------------------------
000E2Cr 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000E2Cr 2               ; ----------------------------------------------------------------------------
000E2Cr 2               GIVAYF:
000E2Cr 2  A2 00                ldx     #$00
000E2Er 2  86 rr                stx     VALTYP
000E30r 2  85 rr                sta     FAC+1
000E32r 2  84 rr                sty     FAC+2
000E34r 2  A2 90                ldx     #$90
000E36r 2  4C rr rr             jmp     FLOAT1
000E39r 2               POS:
000E39r 2  A4 rr                ldy     POSX
000E3Br 2               
000E3Br 2               ; ----------------------------------------------------------------------------
000E3Br 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000E3Br 2               ; ----------------------------------------------------------------------------
000E3Br 2               SNGFLT:
000E3Br 2  A9 00                lda     #$00
000E3Dr 2  F0 ED                beq     GIVAYF
000E3Fr 2               
000E3Fr 2               ; ----------------------------------------------------------------------------
000E3Fr 2               ; CHECK FOR DIRECT OR RUNNING MODE
000E3Fr 2               ; GIVING ERROR IF DIRECT MODE
000E3Fr 2               ; ----------------------------------------------------------------------------
000E3Fr 2               ERRDIR:
000E3Fr 2  A6 rr                ldx     CURLIN+1
000E41r 2  E8                   inx
000E42r 2  D0 A2                bne     RTS9
000E44r 2  A2 16                ldx     #ERR_ILLDIR
000E46r 2               .ifdef CONFIG_2
000E46r 2  2C                   .byte   $2C
000E47r 2               LD288:
000E47r 2  A2 20                ldx     #ERR_UNDEFFN
000E49r 2               .endif
000E49r 2               L31AF:
000E49r 2  4C rr rr             jmp     ERROR
000E4Cr 2               DEF:
000E4Cr 2  20 rr rr             jsr     FNC
000E4Fr 2  20 rr rr             jsr     ERRDIR
000E52r 2  20 rr rr             jsr     CHKOPN
000E55r 2  A9 80                lda     #$80
000E57r 2  85 rr                sta     SUBFLG
000E59r 2  20 rr rr             jsr     PTRGET
000E5Cr 2  20 rr rr             jsr     CHKNUM
000E5Fr 2  20 rr rr             jsr     CHKCLS
000E62r 2  A9 AB                lda     #TOKEN_EQUAL
000E64r 2  20 rr rr             jsr     SYNCHR
000E67r 2               .ifndef CONFIG_SMALL
000E67r 2                       pha
000E67r 2               .endif
000E67r 2  A5 rr                lda     VARPNT+1
000E69r 2  48                   pha
000E6Ar 2  A5 rr                lda     VARPNT
000E6Cr 2  48                   pha
000E6Dr 2  A5 rr                lda     TXTPTR+1
000E6Fr 2  48                   pha
000E70r 2  A5 rr                lda     TXTPTR
000E72r 2  48                   pha
000E73r 2  20 rr rr             jsr     DATA
000E76r 2  4C rr rr             jmp     L3250
000E79r 2               FNC:
000E79r 2  A9 9E                lda     #TOKEN_FN
000E7Br 2  20 rr rr             jsr     SYNCHR
000E7Er 2  09 80                ora     #$80
000E80r 2  85 rr                sta     SUBFLG
000E82r 2  20 rr rr             jsr     PTRGET3
000E85r 2  85 rr                sta     FNCNAM
000E87r 2  84 rr                sty     FNCNAM+1
000E89r 2  4C rr rr             jmp     CHKNUM
000E8Cr 2               L31F3:
000E8Cr 2  20 rr rr             jsr     FNC
000E8Fr 2  A5 rr                lda     FNCNAM+1
000E91r 2  48                   pha
000E92r 2  A5 rr                lda     FNCNAM
000E94r 2  48                   pha
000E95r 2  20 rr rr             jsr     PARCHK
000E98r 2  20 rr rr             jsr     CHKNUM
000E9Br 2  68                   pla
000E9Cr 2  85 rr                sta     FNCNAM
000E9Er 2  68                   pla
000E9Fr 2  85 rr                sta     FNCNAM+1
000EA1r 2  A0 02                ldy     #$02
000EA3r 2               .ifndef CONFIG_2
000EA3r 2                       ldx     #ERR_UNDEFFN
000EA3r 2               .endif
000EA3r 2  B1 rr                lda     (FNCNAM),y
000EA5r 2               .ifndef CONFIG_2
000EA5r 2                       beq     L31AF
000EA5r 2               .endif
000EA5r 2  85 rr                sta     VARPNT
000EA7r 2  AA                   tax
000EA8r 2  C8                   iny
000EA9r 2  B1 rr                lda     (FNCNAM),y
000EABr 2               .ifdef CONFIG_2
000EABr 2  F0 9A                beq     LD288
000EADr 2               .endif
000EADr 2  85 rr                sta     VARPNT+1
000EAFr 2               .ifndef CONFIG_SMALL
000EAFr 2                       iny
000EAFr 2               .endif
000EAFr 2               L3219:
000EAFr 2  B1 rr                lda     (VARPNT),y
000EB1r 2  48                   pha
000EB2r 2  88                   dey
000EB3r 2  10 FA                bpl     L3219
000EB5r 2  A4 rr                ldy     VARPNT+1
000EB7r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000EBAr 2  A5 rr                lda     TXTPTR+1
000EBCr 2  48                   pha
000EBDr 2  A5 rr                lda     TXTPTR
000EBFr 2  48                   pha
000EC0r 2  B1 rr                lda     (FNCNAM),y
000EC2r 2  85 rr                sta     TXTPTR
000EC4r 2  C8                   iny
000EC5r 2  B1 rr                lda     (FNCNAM),y
000EC7r 2  85 rr                sta     TXTPTR+1
000EC9r 2  A5 rr                lda     VARPNT+1
000ECBr 2  48                   pha
000ECCr 2  A5 rr                lda     VARPNT
000ECEr 2  48                   pha
000ECFr 2  20 rr rr             jsr     FRMNUM
000ED2r 2  68                   pla
000ED3r 2  85 rr                sta     FNCNAM
000ED5r 2  68                   pla
000ED6r 2  85 rr                sta     FNCNAM+1
000ED8r 2  20 rr rr             jsr     CHRGOT
000EDBr 2  F0 03                beq     L324A
000EDDr 2  4C rr rr             jmp     SYNERR
000EE0r 2               L324A:
000EE0r 2  68                   pla
000EE1r 2  85 rr                sta     TXTPTR
000EE3r 2  68                   pla
000EE4r 2  85 rr                sta     TXTPTR+1
000EE6r 2               L3250:
000EE6r 2  A0 00                ldy     #$00
000EE8r 2  68                   pla
000EE9r 2  91 rr                sta     (FNCNAM),y
000EEBr 2  68                   pla
000EECr 2  C8                   iny
000EEDr 2  91 rr                sta     (FNCNAM),y
000EEFr 2  68                   pla
000EF0r 2  C8                   iny
000EF1r 2  91 rr                sta     (FNCNAM),y
000EF3r 2  68                   pla
000EF4r 2  C8                   iny
000EF5r 2  91 rr                sta     (FNCNAM),y
000EF7r 2               .ifndef CONFIG_SMALL
000EF7r 2                       pla
000EF7r 2                       iny
000EF7r 2                       sta     (FNCNAM),y
000EF7r 2               .endif
000EF7r 2  60                   rts
000EF8r 2               
000EF8r 1               .include "string.s"
000EF8r 2               .segment "CODE"
000EF8r 2               ; ----------------------------------------------------------------------------
000EF8r 2               ; "STR$" FUNCTION
000EF8r 2               ; ----------------------------------------------------------------------------
000EF8r 2               STR:
000EF8r 2  20 rr rr             jsr     CHKNUM
000EFBr 2  A0 00                ldy     #$00
000EFDr 2  20 rr rr             jsr     FOUT1
000F00r 2  68                   pla
000F01r 2  68                   pla
000F02r 2               LD353:
000F02r 2  A9 FF                lda     #$FF
000F04r 2  A0 00                ldy     #$00
000F06r 2  F0 12                beq     STRLIT
000F08r 2               
000F08r 2               ; ----------------------------------------------------------------------------
000F08r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F08r 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
000F08r 2               ; ----------------------------------------------------------------------------
000F08r 2               STRINI:
000F08r 2  A6 rr                ldx     FAC_LAST-1
000F0Ar 2  A4 rr                ldy     FAC_LAST
000F0Cr 2  86 rr                stx     DSCPTR
000F0Er 2  84 rr                sty     DSCPTR+1
000F10r 2               
000F10r 2               ; ----------------------------------------------------------------------------
000F10r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F10r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
000F10r 2               ; ----------------------------------------------------------------------------
000F10r 2               STRSPA:
000F10r 2  20 rr rr             jsr     GETSPA
000F13r 2  86 rr                stx     FAC+1
000F15r 2  84 rr                sty     FAC+2
000F17r 2  85 rr                sta     FAC
000F19r 2  60                   rts
000F1Ar 2               
000F1Ar 2               ; ----------------------------------------------------------------------------
000F1Ar 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F1Ar 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
000F1Ar 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F1Ar 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F1Ar 2               ; ----------------------------------------------------------------------------
000F1Ar 2               STRLIT:
000F1Ar 2  A2 22                ldx     #$22
000F1Cr 2  86 rr                stx     CHARAC
000F1Er 2  86 rr                stx     ENDCHR
000F20r 2               
000F20r 2               ; ----------------------------------------------------------------------------
000F20r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F20r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
000F20r 2               ;
000F20r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F20r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F20r 2               ; ----------------------------------------------------------------------------
000F20r 2               STRLT2:
000F20r 2  85 rr                sta     STRNG1
000F22r 2  84 rr                sty     STRNG1+1
000F24r 2  85 rr                sta     FAC+1
000F26r 2  84 rr                sty     FAC+2
000F28r 2  A0 FF                ldy     #$FF
000F2Ar 2               L3298:
000F2Ar 2  C8                   iny
000F2Br 2  B1 rr                lda     (STRNG1),y
000F2Dr 2  F0 0C                beq     L32A9
000F2Fr 2  C5 rr                cmp     CHARAC
000F31r 2  F0 04                beq     L32A5
000F33r 2  C5 rr                cmp     ENDCHR
000F35r 2  D0 F3                bne     L3298
000F37r 2               L32A5:
000F37r 2  C9 22                cmp     #$22
000F39r 2  F0 01                beq     L32AA
000F3Br 2               L32A9:
000F3Br 2  18                   clc
000F3Cr 2               L32AA:
000F3Cr 2  84 rr                sty     FAC
000F3Er 2  98                   tya
000F3Fr 2  65 rr                adc     STRNG1
000F41r 2  85 rr                sta     STRNG2
000F43r 2  A6 rr                ldx     STRNG1+1
000F45r 2  90 01                bcc     L32B6
000F47r 2  E8                   inx
000F48r 2               L32B6:
000F48r 2  86 rr                stx     STRNG2+1
000F4Ar 2  A5 rr                lda     STRNG1+1
000F4Cr 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000F4Cr 2  F0 04                beq     LD399
000F4Er 2  C9 09                cmp     #>INPUTBUFFER
000F50r 2               .endif
000F50r 2  D0 0B                bne     PUTNEW
000F52r 2               LD399:
000F52r 2  98                   tya
000F53r 2  20 rr rr             jsr     STRINI
000F56r 2  A6 rr                ldx     STRNG1
000F58r 2  A4 rr                ldy     STRNG1+1
000F5Ar 2  20 rr rr             jsr     MOVSTR
000F5Dr 2               
000F5Dr 2               ; ----------------------------------------------------------------------------
000F5Dr 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
000F5Dr 2               ;
000F5Dr 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
000F5Dr 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
000F5Dr 2               ; ----------------------------------------------------------------------------
000F5Dr 2               PUTNEW:
000F5Dr 2  A6 rr                ldx     TEMPPT
000F5Fr 2  E0 rr                cpx     #TEMPST+9
000F61r 2  D0 05                bne     PUTEMP
000F63r 2  A2 1C                ldx     #ERR_FRMCPX
000F65r 2               JERR:
000F65r 2  4C rr rr             jmp     ERROR
000F68r 2               PUTEMP:
000F68r 2  A5 rr                lda     FAC
000F6Ar 2  95 00                sta     0,x
000F6Cr 2  A5 rr                lda     FAC+1
000F6Er 2  95 01                sta     1,x
000F70r 2  A5 rr                lda     FAC+2
000F72r 2  95 02                sta     2,x
000F74r 2  A0 00                ldy     #$00
000F76r 2  86 rr                stx     FAC_LAST-1
000F78r 2  84 rr                sty     FAC_LAST
000F7Ar 2               .ifdef CONFIG_2
000F7Ar 2  84 rr                sty     FACEXTENSION
000F7Cr 2               .endif
000F7Cr 2  88                   dey
000F7Dr 2  84 rr                sty     VALTYP
000F7Fr 2  86 rr                stx     LASTPT
000F81r 2  E8                   inx
000F82r 2  E8                   inx
000F83r 2  E8                   inx
000F84r 2  86 rr                stx     TEMPPT
000F86r 2  60                   rts
000F87r 2               
000F87r 2               ; ----------------------------------------------------------------------------
000F87r 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
000F87r 2               ; (A)=# BYTES SPACE TO MAKE
000F87r 2               ;
000F87r 2               ; RETURN WITH (A) SAME,
000F87r 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
000F87r 2               ; ----------------------------------------------------------------------------
000F87r 2               GETSPA:
000F87r 2  46 rr                lsr     DATAFLG
000F89r 2               L32F1:
000F89r 2  48                   pha
000F8Ar 2  49 FF                eor     #$FF
000F8Cr 2  38                   sec
000F8Dr 2  65 rr                adc     FRETOP
000F8Fr 2  A4 rr                ldy     FRETOP+1
000F91r 2  B0 01                bcs     L32FC
000F93r 2  88                   dey
000F94r 2               L32FC:
000F94r 2  C4 rr                cpy     STREND+1
000F96r 2  90 11                bcc     L3311
000F98r 2  D0 04                bne     L3306
000F9Ar 2  C5 rr                cmp     STREND
000F9Cr 2  90 0B                bcc     L3311
000F9Er 2               L3306:
000F9Er 2  85 rr                sta     FRETOP
000FA0r 2  84 rr                sty     FRETOP+1
000FA2r 2  85 rr                sta     FRESPC
000FA4r 2  84 rr                sty     FRESPC+1
000FA6r 2  AA                   tax
000FA7r 2  68                   pla
000FA8r 2  60                   rts
000FA9r 2               L3311:
000FA9r 2  A2 0C                ldx     #ERR_MEMFULL
000FABr 2  A5 rr                lda     DATAFLG
000FADr 2  30 B6                bmi     JERR
000FAFr 2  20 rr rr             jsr     GARBAG
000FB2r 2  A9 80                lda     #$80
000FB4r 2  85 rr                sta     DATAFLG
000FB6r 2  68                   pla
000FB7r 2  D0 D0                bne     L32F1
000FB9r 2               
000FB9r 2               ; ----------------------------------------------------------------------------
000FB9r 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
000FB9r 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
000FB9r 2               ; BELOW STRING AREA DOWN TO STREND.
000FB9r 2               ; ----------------------------------------------------------------------------
000FB9r 2               GARBAG:
000FB9r 2               
000FB9r 2               .ifdef CONST_MEMSIZ
000FB9r 2                       ldx     #<CONST_MEMSIZ
000FB9r 2                       lda     #>CONST_MEMSIZ
000FB9r 2               .else
000FB9r 2  A6 rr                ldx     MEMSIZ
000FBBr 2  A5 rr                lda     MEMSIZ+1
000FBDr 2               .endif
000FBDr 2               FINDHIGHESTSTRING:
000FBDr 2  86 rr                stx     FRETOP
000FBFr 2  85 rr                sta     FRETOP+1
000FC1r 2  A0 00                ldy     #$00
000FC3r 2  84 rr                sty     FNCNAM+1
000FC5r 2               .ifdef CONFIG_2
000FC5r 2  84 rr                sty     FNCNAM	; GC bugfix!
000FC7r 2               .endif
000FC7r 2  A5 rr                lda     STREND
000FC9r 2  A6 rr                ldx     STREND+1
000FCBr 2  85 rr                sta     LOWTR
000FCDr 2  86 rr                stx     LOWTR+1
000FCFr 2  A9 rr                lda     #TEMPST
000FD1r 2  A2 00                ldx     #$00
000FD3r 2  85 rr                sta     INDEX
000FD5r 2  86 rr                stx     INDEX+1
000FD7r 2               L333D:
000FD7r 2  C5 rr                cmp     TEMPPT
000FD9r 2  F0 05                beq     L3346
000FDBr 2  20 rr rr             jsr     CHECK_VARIABLE
000FDEr 2  F0 F7                beq     L333D
000FE0r 2               L3346:
000FE0r 2  A9 06                lda     #BYTES_PER_VARIABLE
000FE2r 2  85 rr                sta     DSCLEN
000FE4r 2  A5 rr                lda     VARTAB
000FE6r 2  A6 rr                ldx     VARTAB+1
000FE8r 2  85 rr                sta     INDEX
000FEAr 2  86 rr                stx     INDEX+1
000FECr 2               L3352:
000FECr 2  E4 rr                cpx     ARYTAB+1
000FEEr 2  D0 04                bne     L335A
000FF0r 2  C5 rr                cmp     ARYTAB
000FF2r 2  F0 05                beq     L335F
000FF4r 2               L335A:
000FF4r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
000FF7r 2  F0 F3                beq     L3352
000FF9r 2               L335F:
000FF9r 2  85 rr                sta     HIGHDS
000FFBr 2  86 rr                stx     HIGHDS+1
000FFDr 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
000FFFr 2  85 rr                sta     DSCLEN
001001r 2               L3367:
001001r 2  A5 rr                lda     HIGHDS
001003r 2  A6 rr                ldx     HIGHDS+1
001005r 2               L336B:
001005r 2  E4 rr                cpx     STREND+1
001007r 2  D0 07                bne     L3376
001009r 2  C5 rr                cmp     STREND
00100Br 2  D0 03                bne     L3376
00100Dr 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
001010r 2               L3376:
001010r 2  85 rr                sta     INDEX
001012r 2  86 rr                stx     INDEX+1
001014r 2               .ifdef CONFIG_SMALL
001014r 2  A0 01                ldy     #$01
001016r 2               .else
001016r 2                       ldy     #$00
001016r 2                       lda     (INDEX),y
001016r 2                       tax
001016r 2                       iny
001016r 2               .endif
001016r 2  B1 rr                lda     (INDEX),y
001018r 2  08                   php
001019r 2  C8                   iny
00101Ar 2  B1 rr                lda     (INDEX),y
00101Cr 2  65 rr                adc     HIGHDS
00101Er 2  85 rr                sta     HIGHDS
001020r 2  C8                   iny
001021r 2  B1 rr                lda     (INDEX),y
001023r 2  65 rr                adc     HIGHDS+1
001025r 2  85 rr                sta     HIGHDS+1
001027r 2  28                   plp
001028r 2  10 D7                bpl     L3367
00102Ar 2               .ifndef CONFIG_SMALL
00102Ar 2                       txa
00102Ar 2                       bmi     L3367
00102Ar 2               .endif
00102Ar 2  C8                   iny
00102Br 2  B1 rr                lda     (INDEX),y
00102Dr 2               .ifdef CONFIG_CBM1_PATCHES
00102Dr 2                       jsr     LE7F3 ; XXX patch, call into screen editor
00102Dr 2               .else
00102Dr 2                 .ifdef CONFIG_11
00102Dr 2  A0 00                ldy     #$00	; GC bugfix
00102Fr 2                 .endif
00102Fr 2  0A                   asl     a
001030r 2  69 05                adc     #$05
001032r 2               .endif
001032r 2  65 rr                adc     INDEX
001034r 2  85 rr                sta     INDEX
001036r 2  90 02                bcc     L33A7
001038r 2  E6 rr                inc     INDEX+1
00103Ar 2               L33A7:
00103Ar 2  A6 rr                ldx     INDEX+1
00103Cr 2               L33A9:
00103Cr 2  E4 rr                cpx     HIGHDS+1
00103Er 2  D0 04                bne     L33B1
001040r 2  C5 rr                cmp     HIGHDS
001042r 2  F0 C1                beq     L336B
001044r 2               L33B1:
001044r 2  20 rr rr             jsr     CHECK_VARIABLE
001047r 2  F0 F3                beq     L33A9
001049r 2               
001049r 2               ; ----------------------------------------------------------------------------
001049r 2               ; PROCESS A SIMPLE VARIABLE
001049r 2               ; ----------------------------------------------------------------------------
001049r 2               CHECK_SIMPLE_VARIABLE:
001049r 2               .ifndef CONFIG_SMALL
001049r 2                       lda     (INDEX),y
001049r 2                       bmi     CHECK_BUMP
001049r 2               .endif
001049r 2  C8                   iny
00104Ar 2  B1 rr                lda     (INDEX),y
00104Cr 2  10 30                bpl     CHECK_BUMP
00104Er 2  C8                   iny
00104Fr 2               
00104Fr 2               ; ----------------------------------------------------------------------------
00104Fr 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00104Fr 2               ; ----------------------------------------------------------------------------
00104Fr 2               CHECK_VARIABLE:
00104Fr 2  B1 rr                lda     (INDEX),y
001051r 2  F0 2B                beq     CHECK_BUMP
001053r 2  C8                   iny
001054r 2  B1 rr                lda     (INDEX),y
001056r 2  AA                   tax
001057r 2  C8                   iny
001058r 2  B1 rr                lda     (INDEX),y
00105Ar 2  C5 rr                cmp     FRETOP+1
00105Cr 2  90 06                bcc     L33D5
00105Er 2  D0 1E                bne     CHECK_BUMP
001060r 2  E4 rr                cpx     FRETOP
001062r 2  B0 1A                bcs     CHECK_BUMP
001064r 2               L33D5:
001064r 2  C5 rr                cmp     LOWTR+1
001066r 2  90 16                bcc     CHECK_BUMP
001068r 2  D0 04                bne     L33DF
00106Ar 2  E4 rr                cpx     LOWTR
00106Cr 2  90 10                bcc     CHECK_BUMP
00106Er 2               L33DF:
00106Er 2  86 rr                stx     LOWTR
001070r 2  85 rr                sta     LOWTR+1
001072r 2  A5 rr                lda     INDEX
001074r 2  A6 rr                ldx     INDEX+1
001076r 2  85 rr                sta     FNCNAM
001078r 2  86 rr                stx     FNCNAM+1
00107Ar 2  A5 rr                lda     DSCLEN
00107Cr 2  85 rr                sta     Z52
00107Er 2               
00107Er 2               ; ----------------------------------------------------------------------------
00107Er 2               ; ADD (DSCLEN) TO PNTR IN INDEX
00107Er 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00107Er 2               ; ----------------------------------------------------------------------------
00107Er 2               CHECK_BUMP:
00107Er 2  A5 rr                lda     DSCLEN
001080r 2  18                   clc
001081r 2  65 rr                adc     INDEX
001083r 2  85 rr                sta     INDEX
001085r 2  90 02                bcc     L33FA
001087r 2  E6 rr                inc     INDEX+1
001089r 2               L33FA:
001089r 2  A6 rr                ldx     INDEX+1
00108Br 2  A0 00                ldy     #$00
00108Dr 2  60                   rts
00108Er 2               
00108Er 2               ; ----------------------------------------------------------------------------
00108Er 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00108Er 2               ; TO TOP AND GO BACK FOR ANOTHER
00108Er 2               ; ----------------------------------------------------------------------------
00108Er 2               MOVE_HIGHEST_STRING_TO_TOP:
00108Er 2               .ifdef CONFIG_2
00108Er 2  A5 rr                lda     FNCNAM+1	; GC bugfix
001090r 2  05 rr                ora     FNCNAM
001092r 2               .else
001092r 2                       ldx     FNCNAM+1
001092r 2               .endif
001092r 2  F0 F5                beq     L33FA
001094r 2  A5 rr                lda     Z52
001096r 2               .ifndef CONFIG_10A
001096r 2                       sbc     #$03
001096r 2               .else
001096r 2  29 04                and     #$04
001098r 2               .endif
001098r 2  4A                   lsr     a
001099r 2  A8                   tay
00109Ar 2  85 rr                sta     Z52
00109Cr 2  B1 rr                lda     (FNCNAM),y
00109Er 2  65 rr                adc     LOWTR
0010A0r 2  85 rr                sta     HIGHTR
0010A2r 2  A5 rr                lda     LOWTR+1
0010A4r 2  69 00                adc     #$00
0010A6r 2  85 rr                sta     HIGHTR+1
0010A8r 2  A5 rr                lda     FRETOP
0010AAr 2  A6 rr                ldx     FRETOP+1
0010ACr 2  85 rr                sta     HIGHDS
0010AEr 2  86 rr                stx     HIGHDS+1
0010B0r 2  20 rr rr             jsr     BLTU2
0010B3r 2  A4 rr                ldy     Z52
0010B5r 2  C8                   iny
0010B6r 2  A5 rr                lda     HIGHDS
0010B8r 2  91 rr                sta     (FNCNAM),y
0010BAr 2  AA                   tax
0010BBr 2  E6 rr                inc     HIGHDS+1
0010BDr 2  A5 rr                lda     HIGHDS+1
0010BFr 2  C8                   iny
0010C0r 2  91 rr                sta     (FNCNAM),y
0010C2r 2  4C rr rr             jmp     FINDHIGHESTSTRING
0010C5r 2               
0010C5r 2               ; ----------------------------------------------------------------------------
0010C5r 2               ; CONCATENATE TWO STRINGS
0010C5r 2               ; ----------------------------------------------------------------------------
0010C5r 2               CAT:
0010C5r 2  A5 rr                lda     FAC_LAST
0010C7r 2  48                   pha
0010C8r 2  A5 rr                lda     FAC_LAST-1
0010CAr 2  48                   pha
0010CBr 2  20 rr rr             jsr     FRM_ELEMENT
0010CEr 2  20 rr rr             jsr     CHKSTR
0010D1r 2  68                   pla
0010D2r 2  85 rr                sta     STRNG1
0010D4r 2  68                   pla
0010D5r 2  85 rr                sta     STRNG1+1
0010D7r 2  A0 00                ldy     #$00
0010D9r 2  B1 rr                lda     (STRNG1),y
0010DBr 2  18                   clc
0010DCr 2  71 rr                adc     (FAC_LAST-1),y
0010DEr 2  90 05                bcc     L3454
0010E0r 2  A2 1A                ldx     #ERR_STRLONG
0010E2r 2  4C rr rr             jmp     ERROR
0010E5r 2               L3454:
0010E5r 2  20 rr rr             jsr     STRINI
0010E8r 2  20 rr rr             jsr     MOVINS
0010EBr 2  A5 rr                lda     DSCPTR
0010EDr 2  A4 rr                ldy     DSCPTR+1
0010EFr 2  20 rr rr             jsr     FRETMP
0010F2r 2  20 rr rr             jsr     MOVSTR1
0010F5r 2  A5 rr                lda     STRNG1
0010F7r 2  A4 rr                ldy     STRNG1+1
0010F9r 2  20 rr rr             jsr     FRETMP
0010FCr 2  20 rr rr             jsr     PUTNEW
0010FFr 2  4C rr rr             jmp     FRMEVL2
001102r 2               
001102r 2               ; ----------------------------------------------------------------------------
001102r 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
001102r 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
001102r 2               ; ----------------------------------------------------------------------------
001102r 2               MOVINS:
001102r 2  A0 00                ldy     #$00
001104r 2  B1 rr                lda     (STRNG1),y
001106r 2  48                   pha
001107r 2  C8                   iny
001108r 2  B1 rr                lda     (STRNG1),y
00110Ar 2  AA                   tax
00110Br 2  C8                   iny
00110Cr 2  B1 rr                lda     (STRNG1),y
00110Er 2  A8                   tay
00110Fr 2  68                   pla
001110r 2               
001110r 2               ; ----------------------------------------------------------------------------
001110r 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
001110r 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
001110r 2               ; ----------------------------------------------------------------------------
001110r 2               MOVSTR:
001110r 2  86 rr                stx     INDEX
001112r 2  84 rr                sty     INDEX+1
001114r 2               MOVSTR1:
001114r 2  A8                   tay
001115r 2  F0 0A                beq     L3490
001117r 2  48                   pha
001118r 2               L3487:
001118r 2  88                   dey
001119r 2  B1 rr                lda     (INDEX),y
00111Br 2  91 rr                sta     (FRESPC),y
00111Dr 2  98                   tya
00111Er 2  D0 F8                bne     L3487
001120r 2  68                   pla
001121r 2               L3490:
001121r 2  18                   clc
001122r 2  65 rr                adc     FRESPC
001124r 2  85 rr                sta     FRESPC
001126r 2  90 02                bcc     L3499
001128r 2  E6 rr                inc     FRESPC+1
00112Ar 2               L3499:
00112Ar 2  60                   rts
00112Br 2               
00112Br 2               ; ----------------------------------------------------------------------------
00112Br 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
00112Br 2               ; ----------------------------------------------------------------------------
00112Br 2               FRESTR:
00112Br 2  20 rr rr             jsr     CHKSTR
00112Er 2               
00112Er 2               ; ----------------------------------------------------------------------------
00112Er 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00112Er 2               ; A TEMPORARY STRING, RELEASE IT.
00112Er 2               ; ----------------------------------------------------------------------------
00112Er 2               FREFAC:
00112Er 2  A5 rr                lda     FAC_LAST-1
001130r 2  A4 rr                ldy     FAC_LAST
001132r 2               
001132r 2               ; ----------------------------------------------------------------------------
001132r 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
001132r 2               ; A TEMPORARY STRING, RELEASE IT.
001132r 2               ; ----------------------------------------------------------------------------
001132r 2               FRETMP:
001132r 2  85 rr                sta     INDEX
001134r 2  84 rr                sty     INDEX+1
001136r 2  20 rr rr             jsr     FRETMS
001139r 2  08                   php
00113Ar 2  A0 00                ldy     #$00
00113Cr 2  B1 rr                lda     (INDEX),y
00113Er 2  48                   pha
00113Fr 2  C8                   iny
001140r 2  B1 rr                lda     (INDEX),y
001142r 2  AA                   tax
001143r 2  C8                   iny
001144r 2  B1 rr                lda     (INDEX),y
001146r 2  A8                   tay
001147r 2  68                   pla
001148r 2  28                   plp
001149r 2  D0 13                bne     L34CD
00114Br 2  C4 rr                cpy     FRETOP+1
00114Dr 2  D0 0F                bne     L34CD
00114Fr 2  E4 rr                cpx     FRETOP
001151r 2  D0 0B                bne     L34CD
001153r 2  48                   pha
001154r 2  18                   clc
001155r 2  65 rr                adc     FRETOP
001157r 2  85 rr                sta     FRETOP
001159r 2  90 02                bcc     L34CC
00115Br 2  E6 rr                inc     FRETOP+1
00115Dr 2               L34CC:
00115Dr 2  68                   pla
00115Er 2               L34CD:
00115Er 2  86 rr                stx     INDEX
001160r 2  84 rr                sty     INDEX+1
001162r 2  60                   rts
001163r 2               
001163r 2               ; ----------------------------------------------------------------------------
001163r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001163r 2               ; ----------------------------------------------------------------------------
001163r 2               FRETMS:
001163r 2               .ifdef KBD
001163r 2                       cpy     #$00
001163r 2               .else
001163r 2  C4 rr                cpy     LASTPT+1
001165r 2               .endif
001165r 2  D0 0C                bne     L34E2
001167r 2  C5 rr                cmp     LASTPT
001169r 2  D0 08                bne     L34E2
00116Br 2  85 rr                sta     TEMPPT
00116Dr 2  E9 03                sbc     #$03
00116Fr 2  85 rr                sta     LASTPT
001171r 2  A0 00                ldy     #$00
001173r 2               L34E2:
001173r 2  60                   rts
001174r 2               
001174r 2               ; ----------------------------------------------------------------------------
001174r 2               ; "CHR$" FUNCTION
001174r 2               ; ----------------------------------------------------------------------------
001174r 2               CHRSTR:
001174r 2  20 rr rr             jsr     CONINT
001177r 2  8A                   txa
001178r 2  48                   pha
001179r 2  A9 01                lda     #$01
00117Br 2  20 rr rr             jsr     STRSPA
00117Er 2  68                   pla
00117Fr 2  A0 00                ldy     #$00
001181r 2  91 rr                sta     (FAC+1),y
001183r 2  68                   pla
001184r 2  68                   pla
001185r 2  4C rr rr             jmp     PUTNEW
001188r 2               
001188r 2               ; ----------------------------------------------------------------------------
001188r 2               ; "LEFT$" FUNCTION
001188r 2               ; ----------------------------------------------------------------------------
001188r 2               LEFTSTR:
001188r 2  20 rr rr             jsr     SUBSTRING_SETUP
00118Br 2  D1 rr                cmp     (DSCPTR),y
00118Dr 2  98                   tya
00118Er 2               SUBSTRING1:
00118Er 2  90 04                bcc     L3503
001190r 2  B1 rr                lda     (DSCPTR),y
001192r 2  AA                   tax
001193r 2  98                   tya
001194r 2               L3503:
001194r 2  48                   pha
001195r 2               SUBSTRING2:
001195r 2  8A                   txa
001196r 2               SUBSTRING3:
001196r 2  48                   pha
001197r 2  20 rr rr             jsr     STRSPA
00119Ar 2  A5 rr                lda     DSCPTR
00119Cr 2  A4 rr                ldy     DSCPTR+1
00119Er 2  20 rr rr             jsr     FRETMP
0011A1r 2  68                   pla
0011A2r 2  A8                   tay
0011A3r 2  68                   pla
0011A4r 2  18                   clc
0011A5r 2  65 rr                adc     INDEX
0011A7r 2  85 rr                sta     INDEX
0011A9r 2  90 02                bcc     L351C
0011ABr 2  E6 rr                inc     INDEX+1
0011ADr 2               L351C:
0011ADr 2  98                   tya
0011AEr 2  20 rr rr             jsr     MOVSTR1
0011B1r 2  4C rr rr             jmp     PUTNEW
0011B4r 2               
0011B4r 2               ; ----------------------------------------------------------------------------
0011B4r 2               ; "RIGHT$" FUNCTION
0011B4r 2               ; ----------------------------------------------------------------------------
0011B4r 2               RIGHTSTR:
0011B4r 2  20 rr rr             jsr     SUBSTRING_SETUP
0011B7r 2  18                   clc
0011B8r 2  F1 rr                sbc     (DSCPTR),y
0011BAr 2  49 FF                eor     #$FF
0011BCr 2  4C rr rr             jmp     SUBSTRING1
0011BFr 2               
0011BFr 2               ; ----------------------------------------------------------------------------
0011BFr 2               ; "MID$" FUNCTION
0011BFr 2               ; ----------------------------------------------------------------------------
0011BFr 2               MIDSTR:
0011BFr 2  A9 FF                lda     #$FF
0011C1r 2  85 rr                sta     FAC_LAST
0011C3r 2  20 rr rr             jsr     CHRGOT
0011C6r 2  C9 29                cmp     #$29
0011C8r 2  F0 06                beq     L353F
0011CAr 2  20 rr rr             jsr     CHKCOM
0011CDr 2  20 rr rr             jsr     GETBYT
0011D0r 2               L353F:
0011D0r 2  20 rr rr             jsr     SUBSTRING_SETUP
0011D3r 2               .ifdef CONFIG_2
0011D3r 2  F0 4B                beq     GOIQ
0011D5r 2               .endif
0011D5r 2  CA                   dex
0011D6r 2  8A                   txa
0011D7r 2  48                   pha
0011D8r 2  18                   clc
0011D9r 2  A2 00                ldx     #$00
0011DBr 2  F1 rr                sbc     (DSCPTR),y
0011DDr 2  B0 B6                bcs     SUBSTRING2
0011DFr 2  49 FF                eor     #$FF
0011E1r 2  C5 rr                cmp     FAC_LAST
0011E3r 2  90 B1                bcc     SUBSTRING3
0011E5r 2  A5 rr                lda     FAC_LAST
0011E7r 2  B0 AD                bcs     SUBSTRING3
0011E9r 2               
0011E9r 2               ; ----------------------------------------------------------------------------
0011E9r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
0011E9r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
0011E9r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
0011E9r 2               ; ----------------------------------------------------------------------------
0011E9r 2               SUBSTRING_SETUP:
0011E9r 2  20 rr rr             jsr     CHKCLS
0011ECr 2  68                   pla
0011EDr 2               .ifndef CONFIG_11
0011EDr 2                       sta     JMPADRS+1
0011EDr 2                       pla
0011EDr 2                       sta     JMPADRS+2
0011EDr 2               .else
0011EDr 2  A8                   tay
0011EEr 2  68                   pla
0011EFr 2  85 rr                sta     Z52
0011F1r 2               .endif
0011F1r 2  68                   pla
0011F2r 2  68                   pla
0011F3r 2  68                   pla
0011F4r 2  AA                   tax
0011F5r 2  68                   pla
0011F6r 2  85 rr                sta     DSCPTR
0011F8r 2  68                   pla
0011F9r 2  85 rr                sta     DSCPTR+1
0011FBr 2               .ifdef CONFIG_11
0011FBr 2  A5 rr                lda     Z52
0011FDr 2  48                   pha
0011FEr 2  98                   tya
0011FFr 2  48                   pha
001200r 2               .endif
001200r 2  A0 00                ldy     #$00
001202r 2  8A                   txa
001203r 2               .ifndef CONFIG_2
001203r 2                       beq     GOIQ
001203r 2               .endif
001203r 2               .ifndef CONFIG_11
001203r 2                       inc     JMPADRS+1
001203r 2                       jmp     (JMPADRS+1)
001203r 2               .else
001203r 2  60                   rts
001204r 2               .endif
001204r 2               
001204r 2               ; ----------------------------------------------------------------------------
001204r 2               ; "LEN" FUNCTION
001204r 2               ; ----------------------------------------------------------------------------
001204r 2               LEN:
001204r 2  20 rr rr             jsr     GETSTR
001207r 2               SNGFLT1:
001207r 2  4C rr rr             jmp     SNGFLT
00120Ar 2               
00120Ar 2               ; ----------------------------------------------------------------------------
00120Ar 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
00120Ar 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
00120Ar 2               ; ----------------------------------------------------------------------------
00120Ar 2               GETSTR:
00120Ar 2  20 rr rr             jsr     FRESTR
00120Dr 2  A2 00                ldx     #$00
00120Fr 2  86 rr                stx     VALTYP
001211r 2  A8                   tay
001212r 2  60                   rts
001213r 2               
001213r 2               ; ----------------------------------------------------------------------------
001213r 2               ; "ASC" FUNCTION
001213r 2               ; ----------------------------------------------------------------------------
001213r 2               ASC:
001213r 2  20 rr rr             jsr     GETSTR
001216r 2  F0 08                beq     GOIQ
001218r 2  A0 00                ldy     #$00
00121Ar 2  B1 rr                lda     (INDEX),y
00121Cr 2  A8                   tay
00121Dr 2               .ifndef CONFIG_11A
00121Dr 2                       jmp     SNGFLT1
00121Dr 2               .else
00121Dr 2  4C rr rr             jmp     SNGFLT
001220r 2               .endif
001220r 2               ; ----------------------------------------------------------------------------
001220r 2               GOIQ:
001220r 2  4C rr rr             jmp     IQERR
001223r 2               
001223r 2               ; ----------------------------------------------------------------------------
001223r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
001223r 2               ; TO SINGLE BYTE IN X-REG
001223r 2               ; ----------------------------------------------------------------------------
001223r 2               GTBYTC:
001223r 2  20 rr rr             jsr     CHRGET
001226r 2               
001226r 2               ; ----------------------------------------------------------------------------
001226r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
001226r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
001226r 2               ; ----------------------------------------------------------------------------
001226r 2               GETBYT:
001226r 2  20 rr rr             jsr     FRMNUM
001229r 2               
001229r 2               ; ----------------------------------------------------------------------------
001229r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
001229r 2               ; ----------------------------------------------------------------------------
001229r 2               CONINT:
001229r 2  20 rr rr             jsr     MKINT
00122Cr 2  A6 rr                ldx     FAC_LAST-1
00122Er 2  D0 F0                bne     GOIQ
001230r 2  A6 rr                ldx     FAC_LAST
001232r 2  4C rr rr             jmp     CHRGOT
001235r 2               
001235r 2               ; ----------------------------------------------------------------------------
001235r 2               ; "VAL" FUNCTION
001235r 2               ; ----------------------------------------------------------------------------
001235r 2               VAL:
001235r 2  20 rr rr             jsr     GETSTR
001238r 2  D0 03                bne     L35AC
00123Ar 2  4C rr rr             jmp     ZERO_FAC
00123Dr 2               L35AC:
00123Dr 2  A6 rr                ldx     TXTPTR
00123Fr 2  A4 rr                ldy     TXTPTR+1
001241r 2  86 rr                stx     STRNG2
001243r 2  84 rr                sty     STRNG2+1
001245r 2  A6 rr                ldx     INDEX
001247r 2  86 rr                stx     TXTPTR
001249r 2  18                   clc
00124Ar 2  65 rr                adc     INDEX
00124Cr 2  85 rr                sta     DEST
00124Er 2  A6 rr                ldx     INDEX+1
001250r 2  86 rr                stx     TXTPTR+1
001252r 2  90 01                bcc     L35C4
001254r 2  E8                   inx
001255r 2               L35C4:
001255r 2  86 rr                stx     DEST+1
001257r 2  A0 00                ldy     #$00
001259r 2  B1 rr                lda     (DEST),y
00125Br 2  48                   pha
00125Cr 2  A9 00                lda     #$00
00125Er 2  91 rr                sta     (DEST),y
001260r 2  20 rr rr             jsr     CHRGOT
001263r 2  20 rr rr             jsr     FIN
001266r 2  68                   pla
001267r 2  A0 00                ldy     #$00
001269r 2  91 rr                sta     (DEST),y
00126Br 2               
00126Br 2               ; ----------------------------------------------------------------------------
00126Br 2               ; COPY STRNG2 INTO TXTPTR
00126Br 2               ; ----------------------------------------------------------------------------
00126Br 2               POINT:
00126Br 2  A6 rr                ldx     STRNG2
00126Dr 2  A4 rr                ldy     STRNG2+1
00126Fr 2  86 rr                stx     TXTPTR
001271r 2  84 rr                sty     TXTPTR+1
001273r 2  60                   rts
001274r 2               
001274r 2               
001274r 1               .include "misc3.s"
001274r 2               ; KBD specific patches
001274r 2               
001274r 2               .segment "CODE"
001274r 2               
001274r 2               .ifdef KBD
001274r 2               VARTAB_MINUS_2_TO_AY:
001274r 2                       lda     VARTAB
001274r 2                       sec
001274r 2                       sbc     #$02
001274r 2                       ldy     VARTAB+1
001274r 2                       bcs     LF42C
001274r 2                       dey
001274r 2               LF42C:
001274r 2                       rts
001274r 2               
001274r 2               ; ----------------------------------------------------------------------------
001274r 2               GET_UPPER:
001274r 2                       lda     INPUTBUFFERX,x
001274r 2               LF430:
001274r 2                       cmp     #'a'
001274r 2                       bcc     LF43A
001274r 2                       cmp     #'z'+1
001274r 2                       bcs     LF43A
001274r 2               LF438:
001274r 2                       sbc     #$1F
001274r 2               LF43A:
001274r 2                       rts
001274r 2               
001274r 2               ; ----------------------------------------------------------------------------
001274r 2               GETLN:
001274r 2                       ldx     #$5D
001274r 2               LF43D:
001274r 2                       txa
001274r 2                       and     #$7F
001274r 2                       cmp     $0340
001274r 2                       beq     LF44D
001274r 2                       sta     $0340
001274r 2                       lda     #$03
001274r 2                       jsr     LDE48
001274r 2               LF44D:
001274r 2                       jsr     LDE7F
001274r 2                       bne     RTS4
001274r 2                       cpx     #$80
001274r 2                       bcc     LF44D
001274r 2               RTS4:
001274r 2                       rts
001274r 2               
001274r 2               ; ----------------------------------------------------------------------------
001274r 2               LF457:
001274r 2                       lda     TXTTAB
001274r 2                       ldx     TXTTAB+1
001274r 2               LF45B:
001274r 2                       sta     JMPADRS+1
001274r 2                       stx     JMPADRS+2
001274r 2                       ldy     #$01
001274r 2                       lda     (JMPADRS+1),y
001274r 2                       beq     LF438
001274r 2                       iny
001274r 2                       iny
001274r 2                       lda     (JMPADRS+1),y
001274r 2                       dey
001274r 2                       cmp     LINNUM+1
001274r 2                       bne     LF472
001274r 2                       lda     (JMPADRS+1),y
001274r 2                       cmp     LINNUM
001274r 2               LF472:
001274r 2                       bcs     LF43A
001274r 2                       dey
001274r 2                       lda     (JMPADRS+1),y
001274r 2                       tax
001274r 2                       dey
001274r 2                       lda     (JMPADRS+1),y
001274r 2                       bcc     LF45B
001274r 2               LF47D:
001274r 2                       jmp     (JMPADRS+1)
001274r 2               .endif
001274r 2               
001274r 1               .include "poke.s"
001274r 2               .segment "CODE"
001274r 2               
001274r 2               .ifndef CONFIG_NO_POKE
001274r 2               ; ----------------------------------------------------------------------------
001274r 2               ; EVALUATE "EXP1,EXP2"
001274r 2               ;
001274r 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
001274r 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
001274r 2               ; ----------------------------------------------------------------------------
001274r 2               GTNUM:
001274r 2  20 rr rr             jsr     FRMNUM
001277r 2  20 rr rr             jsr     GETADR
00127Ar 2               
00127Ar 2               ; ----------------------------------------------------------------------------
00127Ar 2               ; EVALUATE ",EXPRESSION"
00127Ar 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
00127Ar 2               ; ----------------------------------------------------------------------------
00127Ar 2               COMBYTE:
00127Ar 2  20 rr rr             jsr     CHKCOM
00127Dr 2  4C rr rr             jmp     GETBYT
001280r 2               
001280r 2               ; ----------------------------------------------------------------------------
001280r 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
001280r 2               ; ----------------------------------------------------------------------------
001280r 2               GETADR:
001280r 2  A5 rr                lda     FACSIGN
001282r 2                 .ifdef APPLE
001282r 2                       nop ; PATCH
001282r 2                       nop
001282r 2                 .else
001282r 2  30 9C                bmi     GOIQ
001284r 2                 .endif
001284r 2  A5 rr                lda     FAC
001286r 2  C9 91                cmp     #$91
001288r 2  B0 96                bcs     GOIQ
00128Ar 2  20 rr rr             jsr     QINT
00128Dr 2  A5 rr                lda     FAC_LAST-1
00128Fr 2  A4 rr                ldy     FAC_LAST
001291r 2  84 rr                sty     LINNUM
001293r 2  85 rr                sta     LINNUM+1
001295r 2  60                   rts
001296r 2               
001296r 2               ; ----------------------------------------------------------------------------
001296r 2               ; "PEEK" FUNCTION
001296r 2               ; ----------------------------------------------------------------------------
001296r 2               PEEK:
001296r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001296r 2                       lda     LINNUM+1
001296r 2                       pha
001296r 2                       lda     LINNUM
001296r 2                       pha
001296r 2               .endif
001296r 2  20 rr rr             jsr     GETADR
001299r 2  A0 00                ldy     #$00
00129Br 2               .ifdef CBM1
00129Br 2               ; disallow PEEK between $C000 and $DFFF
00129Br 2                       cmp     #$C0
00129Br 2                       bcc     LD6F3
00129Br 2                       cmp     #$E1
00129Br 2                       bcc     LD6F6
00129Br 2               LD6F3:
00129Br 2               .endif
00129Br 2               .ifdef CBM2
00129Br 2               		nop ; patch that disables the compares above
00129Br 2               		nop
00129Br 2               		nop
00129Br 2               		nop
00129Br 2               		nop
00129Br 2               		nop
00129Br 2               		nop
00129Br 2               		nop
00129Br 2               .endif
00129Br 2  B1 rr                lda     (LINNUM),y
00129Dr 2  A8                   tay
00129Er 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
00129Er 2                       pla
00129Er 2                       sta     LINNUM
00129Er 2                       pla
00129Er 2                       sta     LINNUM+1
00129Er 2               .endif
00129Er 2               LD6F6:
00129Er 2  4C rr rr             jmp     SNGFLT
0012A1r 2               
0012A1r 2               ; ----------------------------------------------------------------------------
0012A1r 2               ; "POKE" STATEMENT
0012A1r 2               ; ----------------------------------------------------------------------------
0012A1r 2               POKE:
0012A1r 2  20 rr rr             jsr     GTNUM
0012A4r 2  8A                   txa
0012A5r 2  A0 00                ldy     #$00
0012A7r 2  91 rr                sta     (LINNUM),y
0012A9r 2  60                   rts
0012AAr 2               
0012AAr 2               ; ----------------------------------------------------------------------------
0012AAr 2               ; "WAIT" STATEMENT
0012AAr 2               ; ----------------------------------------------------------------------------
0012AAr 2               WAIT:
0012AAr 2  20 rr rr             jsr     GTNUM
0012ADr 2  86 rr                stx     FORPNT
0012AFr 2  A2 00                ldx     #$00
0012B1r 2  20 rr rr             jsr     CHRGOT
0012B4r 2               .ifdef CONFIG_EASTER_EGG
0012B4r 2                       beq     EASTER_EGG
0012B4r 2               .else
0012B4r 2  F0 03                beq     L3628
0012B6r 2               .endif
0012B6r 2  20 rr rr             jsr     COMBYTE
0012B9r 2               L3628:
0012B9r 2  86 rr                stx     FORPNT+1
0012BBr 2  A0 00                ldy     #$00
0012BDr 2               L362C:
0012BDr 2  B1 rr                lda     (LINNUM),y
0012BFr 2  45 rr                eor     FORPNT+1
0012C1r 2  25 rr                and     FORPNT
0012C3r 2  F0 F8                beq     L362C
0012C5r 2               RTS3:
0012C5r 2  60                   rts
0012C6r 2               .endif ;/* KBD */
0012C6r 2               
0012C6r 1               .include "float.s"
0012C6r 2               .segment "CODE"
0012C6r 2               
0012C6r 2               TEMP1X = TEMP1+(5-BYTES_FP)
0012C6r 2               
0012C6r 2               ; ----------------------------------------------------------------------------
0012C6r 2               ; ADD 0.5 TO FAC
0012C6r 2               ; ----------------------------------------------------------------------------
0012C6r 2               FADDH:
0012C6r 2  A9 rr                lda     #<CON_HALF
0012C8r 2  A0 rr                ldy     #>CON_HALF
0012CAr 2  4C rr rr             jmp     FADD
0012CDr 2               
0012CDr 2               ; ----------------------------------------------------------------------------
0012CDr 2               ; FAC = (Y,A) - FAC
0012CDr 2               ; ----------------------------------------------------------------------------
0012CDr 2               FSUB:
0012CDr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0012D0r 2               
0012D0r 2               ; ----------------------------------------------------------------------------
0012D0r 2               ; FAC = ARG - FAC
0012D0r 2               ; ----------------------------------------------------------------------------
0012D0r 2               FSUBT:
0012D0r 2  A5 rr                lda     FACSIGN
0012D2r 2  49 FF                eor     #$FF
0012D4r 2  85 rr                sta     FACSIGN
0012D6r 2  45 rr                eor     ARGSIGN
0012D8r 2  85 rr                sta     SGNCPR
0012DAr 2  A5 rr                lda     FAC
0012DCr 2  4C rr rr             jmp     FADDT
0012DFr 2               
0012DFr 2               ; ----------------------------------------------------------------------------
0012DFr 2               ; Commodore BASIC V2 Easter Egg
0012DFr 2               ; ----------------------------------------------------------------------------
0012DFr 2               .ifdef CONFIG_EASTER_EGG
0012DFr 2               EASTER_EGG:
0012DFr 2                       lda     LINNUM
0012DFr 2                       cmp     #<6502
0012DFr 2                       bne     L3628
0012DFr 2                       lda     LINNUM+1
0012DFr 2                       sbc     #>6502
0012DFr 2                       bne     L3628
0012DFr 2                       sta     LINNUM
0012DFr 2                       tay
0012DFr 2                       lda     #$80
0012DFr 2                       sta     LINNUM+1
0012DFr 2               LD758:
0012DFr 2                       ldx     #$0A
0012DFr 2               LD75A:
0012DFr 2                       lda     MICROSOFT-1,x
0012DFr 2                       and     #$3F
0012DFr 2                       sta     (LINNUM),y
0012DFr 2                       iny
0012DFr 2                       bne     LD766
0012DFr 2                       inc     LINNUM+1
0012DFr 2               LD766:
0012DFr 2                       dex
0012DFr 2                       bne     LD75A
0012DFr 2                       dec     FORPNT
0012DFr 2                       bne     LD758
0012DFr 2                       rts
0012DFr 2               .endif
0012DFr 2               
0012DFr 2               ; ----------------------------------------------------------------------------
0012DFr 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
0012DFr 2               ; ----------------------------------------------------------------------------
0012DFr 2               FADD1:
0012DFr 2  20 rr rr             jsr     SHIFT_RIGHT
0012E2r 2  90 3C                bcc     FADD3
0012E4r 2               
0012E4r 2               ; ----------------------------------------------------------------------------
0012E4r 2               ; FAC = (Y,A) + FAC
0012E4r 2               ; ----------------------------------------------------------------------------
0012E4r 2               FADD:
0012E4r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0012E7r 2               
0012E7r 2               ; ----------------------------------------------------------------------------
0012E7r 2               ; FAC = ARG + FAC
0012E7r 2               ; ----------------------------------------------------------------------------
0012E7r 2               FADDT:
0012E7r 2  D0 03                bne     L365B
0012E9r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
0012ECr 2               L365B:
0012ECr 2  A6 rr                ldx     FACEXTENSION
0012EEr 2  86 rr                stx     ARGEXTENSION
0012F0r 2  A2 rr                ldx     #ARG
0012F2r 2  A5 rr                lda     ARG
0012F4r 2               FADD2:
0012F4r 2  A8                   tay
0012F5r 2               .ifdef KBD
0012F5r 2                       beq     RTS4
0012F5r 2               .else
0012F5r 2  F0 CE                beq     RTS3
0012F7r 2               .endif
0012F7r 2  38                   sec
0012F8r 2  E5 rr                sbc     FAC
0012FAr 2  F0 24                beq     FADD3
0012FCr 2  90 12                bcc     L367F
0012FEr 2  84 rr                sty     FAC
001300r 2  A4 rr                ldy     ARGSIGN
001302r 2  84 rr                sty     FACSIGN
001304r 2  49 FF                eor     #$FF
001306r 2  69 00                adc     #$00
001308r 2  A0 00                ldy     #$00
00130Ar 2  84 rr                sty     ARGEXTENSION
00130Cr 2  A2 rr                ldx     #FAC
00130Er 2  D0 04                bne     L3683
001310r 2               L367F:
001310r 2  A0 00                ldy     #$00
001312r 2  84 rr                sty     FACEXTENSION
001314r 2               L3683:
001314r 2  C9 F9                cmp     #$F9
001316r 2  30 C7                bmi     FADD1
001318r 2  A8                   tay
001319r 2  A5 rr                lda     FACEXTENSION
00131Br 2  56 01                lsr     1,x
00131Dr 2  20 rr rr             jsr     SHIFT_RIGHT4
001320r 2               FADD3:
001320r 2  24 rr                bit     SGNCPR
001322r 2  10 4C                bpl     FADD4
001324r 2  A0 rr                ldy     #FAC
001326r 2  E0 rr                cpx     #ARG
001328r 2  F0 02                beq     L369B
00132Ar 2  A0 rr                ldy     #ARG
00132Cr 2               L369B:
00132Cr 2  38                   sec
00132Dr 2  49 FF                eor     #$FF
00132Fr 2  65 rr                adc     ARGEXTENSION
001331r 2  85 rr                sta     FACEXTENSION
001333r 2               .ifndef CONFIG_SMALL
001333r 2                       lda     4,y
001333r 2                       sbc     4,x
001333r 2                       sta     FAC+4
001333r 2               .endif
001333r 2  B9 03 00             lda     3,y
001336r 2  F5 03                sbc     3,x
001338r 2  85 rr                sta     FAC+3
00133Ar 2  B9 02 00             lda     2,y
00133Dr 2  F5 02                sbc     2,x
00133Fr 2  85 rr                sta     FAC+2
001341r 2  B9 01 00             lda     1,y
001344r 2  F5 01                sbc     1,x
001346r 2  85 rr                sta     FAC+1
001348r 2               
001348r 2               ; ----------------------------------------------------------------------------
001348r 2               ; NORMALIZE VALUE IN FAC
001348r 2               ; ----------------------------------------------------------------------------
001348r 2               NORMALIZE_FAC1:
001348r 2  B0 03                bcs     NORMALIZE_FAC2
00134Ar 2  20 rr rr             jsr     COMPLEMENT_FAC
00134Dr 2               NORMALIZE_FAC2:
00134Dr 2  A0 00                ldy     #$00
00134Fr 2  98                   tya
001350r 2  18                   clc
001351r 2               L36C7:
001351r 2  A6 rr                ldx     FAC+1
001353r 2  D0 3E                bne     NORMALIZE_FAC4
001355r 2  A6 rr                ldx     FAC+2
001357r 2  86 rr                stx     FAC+1
001359r 2  A6 rr                ldx     FAC+3
00135Br 2  86 rr                stx     FAC+2
00135Dr 2               .ifdef CONFIG_SMALL
00135Dr 2  A6 rr                ldx     FACEXTENSION
00135Fr 2  86 rr                stx     FAC+3
001361r 2               .else
001361r 2                       ldx     FAC+4
001361r 2                       stx     FAC+3
001361r 2                       ldx     FACEXTENSION
001361r 2                       stx     FAC+4
001361r 2               .endif
001361r 2  84 rr                sty     FACEXTENSION
001363r 2  69 08                adc     #$08
001365r 2               .ifdef CONFIG_2B
001365r 2               ; bugfix?
001365r 2               ; fix does not exist on AppleSoft 2
001365r 2  C9 20                cmp     #(MANTISSA_BYTES+1)*8
001367r 2               .else
001367r 2                       cmp     #MANTISSA_BYTES*8
001367r 2               .endif
001367r 2  D0 E8                bne     L36C7
001369r 2               
001369r 2               ; ----------------------------------------------------------------------------
001369r 2               ; SET FAC = 0
001369r 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
001369r 2               ; ----------------------------------------------------------------------------
001369r 2               ZERO_FAC:
001369r 2  A9 00                lda     #$00
00136Br 2               STA_IN_FAC_SIGN_AND_EXP:
00136Br 2  85 rr                sta     FAC
00136Dr 2               STA_IN_FAC_SIGN:
00136Dr 2  85 rr                sta     FACSIGN
00136Fr 2  60                   rts
001370r 2               
001370r 2               ; ----------------------------------------------------------------------------
001370r 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
001370r 2               ; ----------------------------------------------------------------------------
001370r 2               FADD4:
001370r 2  65 rr                adc     ARGEXTENSION
001372r 2  85 rr                sta     FACEXTENSION
001374r 2               .ifndef CONFIG_SMALL
001374r 2                       lda     FAC+4
001374r 2                       adc     ARG+4
001374r 2                       sta     FAC+4
001374r 2               .endif
001374r 2  A5 rr                lda     FAC+3
001376r 2  65 rr                adc     ARG+3
001378r 2  85 rr                sta     FAC+3
00137Ar 2  A5 rr                lda     FAC+2
00137Cr 2  65 rr                adc     ARG+2
00137Er 2  85 rr                sta     FAC+2
001380r 2  A5 rr                lda     FAC+1
001382r 2  65 rr                adc     ARG+1
001384r 2  85 rr                sta     FAC+1
001386r 2  4C rr rr             jmp     NORMALIZE_FAC5
001389r 2               
001389r 2               ; ----------------------------------------------------------------------------
001389r 2               ; FINISH NORMALIZING FAC
001389r 2               ; ----------------------------------------------------------------------------
001389r 2               NORMALIZE_FAC3:
001389r 2  69 01                adc     #$01
00138Br 2  06 rr                asl     FACEXTENSION
00138Dr 2               .ifndef CONFIG_SMALL
00138Dr 2                       rol     FAC+4
00138Dr 2               .endif
00138Dr 2  26 rr                rol     FAC+3
00138Fr 2  26 rr                rol     FAC+2
001391r 2  26 rr                rol     FAC+1
001393r 2               NORMALIZE_FAC4:
001393r 2  10 F4                bpl     NORMALIZE_FAC3
001395r 2  38                   sec
001396r 2  E5 rr                sbc     FAC
001398r 2  B0 CF                bcs     ZERO_FAC
00139Ar 2  49 FF                eor     #$FF
00139Cr 2  69 01                adc     #$01
00139Er 2  85 rr                sta     FAC
0013A0r 2               NORMALIZE_FAC5:
0013A0r 2  90 0C                bcc     L3764
0013A2r 2               NORMALIZE_FAC6:
0013A2r 2  E6 rr                inc     FAC
0013A4r 2  F0 36                beq     OVERFLOW
0013A6r 2               .ifndef CONFIG_ROR_WORKAROUND
0013A6r 2  66 rr                ror     FAC+1
0013A8r 2  66 rr                ror     FAC+2
0013AAr 2  66 rr                ror     FAC+3
0013ACr 2                 .ifndef CONFIG_SMALL
0013ACr 2                       ror     FAC+4
0013ACr 2                 .endif
0013ACr 2  66 rr                ror     FACEXTENSION
0013AEr 2               .else
0013AEr 2                       lda     #$00
0013AEr 2                       bcc     L372E
0013AEr 2                       lda     #$80
0013AEr 2               L372E:
0013AEr 2                       lsr     FAC+1
0013AEr 2                       ora     FAC+1
0013AEr 2                       sta     FAC+1
0013AEr 2                       lda     #$00
0013AEr 2                       bcc     L373A
0013AEr 2                       lda     #$80
0013AEr 2               L373A:
0013AEr 2                       lsr     FAC+2
0013AEr 2                       ora     FAC+2
0013AEr 2                       sta     FAC+2
0013AEr 2                       lda     #$00
0013AEr 2                       bcc     L3746
0013AEr 2                       lda     #$80
0013AEr 2               L3746:
0013AEr 2                       lsr     FAC+3
0013AEr 2                       ora     FAC+3
0013AEr 2                       sta     FAC+3
0013AEr 2                       lda     #$00
0013AEr 2                       bcc     L3752
0013AEr 2                       lda     #$80
0013AEr 2               L3752:
0013AEr 2                       lsr     FAC+4
0013AEr 2                       ora     FAC+4
0013AEr 2                       sta     FAC+4
0013AEr 2                       lda     #$00
0013AEr 2                       bcc     L375E
0013AEr 2                       lda     #$80
0013AEr 2               L375E:
0013AEr 2                       lsr     FACEXTENSION
0013AEr 2                       ora     FACEXTENSION
0013AEr 2                       sta     FACEXTENSION
0013AEr 2               .endif
0013AEr 2               L3764:
0013AEr 2  60                   rts
0013AFr 2               
0013AFr 2               ; ----------------------------------------------------------------------------
0013AFr 2               ; 2'S COMPLEMENT OF FAC
0013AFr 2               ; ----------------------------------------------------------------------------
0013AFr 2               COMPLEMENT_FAC:
0013AFr 2  A5 rr                lda     FACSIGN
0013B1r 2  49 FF                eor     #$FF
0013B3r 2  85 rr                sta     FACSIGN
0013B5r 2               
0013B5r 2               ; ----------------------------------------------------------------------------
0013B5r 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
0013B5r 2               ; ----------------------------------------------------------------------------
0013B5r 2               COMPLEMENT_FAC_MANTISSA:
0013B5r 2  A5 rr                lda     FAC+1
0013B7r 2  49 FF                eor     #$FF
0013B9r 2  85 rr                sta     FAC+1
0013BBr 2  A5 rr                lda     FAC+2
0013BDr 2  49 FF                eor     #$FF
0013BFr 2  85 rr                sta     FAC+2
0013C1r 2  A5 rr                lda     FAC+3
0013C3r 2  49 FF                eor     #$FF
0013C5r 2  85 rr                sta     FAC+3
0013C7r 2               .ifndef CONFIG_SMALL
0013C7r 2                       lda     FAC+4
0013C7r 2                       eor     #$FF
0013C7r 2                       sta     FAC+4
0013C7r 2               .endif
0013C7r 2  A5 rr                lda     FACEXTENSION
0013C9r 2  49 FF                eor     #$FF
0013CBr 2  85 rr                sta     FACEXTENSION
0013CDr 2  E6 rr                inc     FACEXTENSION
0013CFr 2  D0 0A                bne     RTS12
0013D1r 2               
0013D1r 2               ; ----------------------------------------------------------------------------
0013D1r 2               ; INCREMENT FAC MANTISSA
0013D1r 2               ; ----------------------------------------------------------------------------
0013D1r 2               INCREMENT_FAC_MANTISSA:
0013D1r 2               .ifndef CONFIG_SMALL
0013D1r 2                       inc     FAC+4
0013D1r 2                       bne     RTS12
0013D1r 2               .endif
0013D1r 2  E6 rr                inc     FAC+3
0013D3r 2  D0 06                bne     RTS12
0013D5r 2  E6 rr                inc     FAC+2
0013D7r 2  D0 02                bne     RTS12
0013D9r 2  E6 rr                inc     FAC+1
0013DBr 2               RTS12:
0013DBr 2  60                   rts
0013DCr 2               OVERFLOW:
0013DCr 2  A2 0A                ldx     #ERR_OVERFLOW
0013DEr 2  4C rr rr             jmp     ERROR
0013E1r 2               
0013E1r 2               ; ----------------------------------------------------------------------------
0013E1r 2               ; SHIFT 1,X THRU 5,X RIGHT
0013E1r 2               ; (A) = NEGATIVE OF SHIFT COUNT
0013E1r 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
0013E1r 2               ;
0013E1r 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
0013E1r 2               ; ----------------------------------------------------------------------------
0013E1r 2               SHIFT_RIGHT1:
0013E1r 2  A2 rr                ldx     #RESULT-1
0013E3r 2               SHIFT_RIGHT2:
0013E3r 2               .ifdef CONFIG_SMALL
0013E3r 2  B4 03                ldy     3,x
0013E5r 2               .else
0013E5r 2                       ldy     4,x
0013E5r 2               .endif
0013E5r 2  84 rr                sty     FACEXTENSION
0013E7r 2               .ifndef CONFIG_SMALL
0013E7r 2                       ldy     3,x
0013E7r 2                       sty     4,x
0013E7r 2               .endif
0013E7r 2  B4 02                ldy     2,x
0013E9r 2  94 03                sty     3,x
0013EBr 2  B4 01                ldy     1,x
0013EDr 2  94 02                sty     2,x
0013EFr 2  A4 rr                ldy     SHIFTSIGNEXT
0013F1r 2  94 01                sty     1,x
0013F3r 2               
0013F3r 2               ; ----------------------------------------------------------------------------
0013F3r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0013F3r 2               ; ----------------------------------------------------------------------------
0013F3r 2               SHIFT_RIGHT:
0013F3r 2  69 08                adc     #$08
0013F5r 2  30 EC                bmi     SHIFT_RIGHT2
0013F7r 2  F0 EA                beq     SHIFT_RIGHT2
0013F9r 2  E9 08                sbc     #$08
0013FBr 2  A8                   tay
0013FCr 2  A5 rr                lda     FACEXTENSION
0013FEr 2  B0 12                bcs     SHIFT_RIGHT5
001400r 2               .ifndef CONFIG_ROR_WORKAROUND
001400r 2               LB588:
001400r 2  16 01                asl     1,x
001402r 2  90 02                bcc     LB58E
001404r 2  F6 01                inc     1,x
001406r 2               LB58E:
001406r 2  76 01                ror     1,x
001408r 2  76 01                ror     1,x
00140Ar 2               
00140Ar 2               ; ----------------------------------------------------------------------------
00140Ar 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
00140Ar 2               ; ----------------------------------------------------------------------------
00140Ar 2               SHIFT_RIGHT4:
00140Ar 2  76 02                ror     2,x
00140Cr 2  76 03                ror     3,x
00140Er 2                 .ifndef CONFIG_SMALL
00140Er 2                       ror     4,x
00140Er 2                 .endif
00140Er 2  6A                   ror     a
00140Fr 2  C8                   iny
001410r 2  D0 EE                bne     LB588
001412r 2               .else
001412r 2               L37C4:
001412r 2                       pha
001412r 2                       lda     1,x
001412r 2                       and     #$80
001412r 2                       lsr     1,x
001412r 2                       ora     1,x
001412r 2                       sta     1,x
001412r 2                       .byte   $24
001412r 2               SHIFT_RIGHT4:
001412r 2                       pha
001412r 2                       lda     #$00
001412r 2                       bcc     L37D7
001412r 2                       lda     #$80
001412r 2               L37D7:
001412r 2                       lsr     2,x
001412r 2                       ora     2,x
001412r 2                       sta     2,x
001412r 2                       lda     #$00
001412r 2                       bcc     L37E3
001412r 2                       lda     #$80
001412r 2               L37E3:
001412r 2                       lsr     3,x
001412r 2                       ora     3,x
001412r 2                       sta     3,x
001412r 2                       lda     #$00
001412r 2                       bcc     L37EF
001412r 2                       lda     #$80
001412r 2               L37EF:
001412r 2                       lsr     4,x
001412r 2                       ora     4,x
001412r 2                       sta     4,x
001412r 2                       pla
001412r 2                       php
001412r 2                       lsr     a
001412r 2                       plp
001412r 2                       bcc     L37FD
001412r 2                       ora     #$80
001412r 2               L37FD:
001412r 2                       iny
001412r 2                       bne     L37C4
001412r 2               .endif
001412r 2               SHIFT_RIGHT5:
001412r 2  18                   clc
001413r 2  60                   rts
001414r 2               
001414r 2               ; ----------------------------------------------------------------------------
001414r 2               .ifdef CONFIG_SMALL
001414r 2               CON_ONE:
001414r 2  81 00 00 00          .byte   $81,$00,$00,$00
001418r 2               POLY_LOG:
001418r 2  02           		.byte	$02
001419r 2  80 19 56 62  		.byte   $80,$19,$56,$62
00141Dr 2  80 76 22 F3  		.byte   $80,$76,$22,$F3
001421r 2  82 38 AA 40  		.byte   $82,$38,$AA,$40
001425r 2               CON_SQR_HALF:
001425r 2  80 35 04 F3  		.byte   $80,$35,$04,$F3
001429r 2               CON_SQR_TWO:
001429r 2  81 35 04 F3  		.byte   $81,$35,$04,$F3
00142Dr 2               CON_NEG_HALF:
00142Dr 2  80 80 00 00  		.byte   $80,$80,$00,$00
001431r 2               CON_LOG_TWO:
001431r 2  80 31 72 18  		.byte   $80,$31,$72,$18
001435r 2               .else
001435r 2               CON_ONE:
001435r 2                       .byte   $81,$00,$00,$00,$00
001435r 2               POLY_LOG:
001435r 2                       .byte   $03
001435r 2               		.byte   $7F,$5E,$56,$CB,$79
001435r 2               		.byte   $80,$13,$9B,$0B,$64
001435r 2               		.byte   $80,$76,$38,$93,$16
001435r 2                       .byte   $82,$38,$AA,$3B,$20
001435r 2               CON_SQR_HALF:
001435r 2                       .byte   $80,$35,$04,$F3,$34
001435r 2               CON_SQR_TWO:
001435r 2                       .byte   $81,$35,$04,$F3,$34
001435r 2               CON_NEG_HALF:
001435r 2                       .byte   $80,$80,$00,$00,$00
001435r 2               CON_LOG_TWO:
001435r 2                       .byte   $80,$31,$72,$17,$F8
001435r 2               .endif
001435r 2               
001435r 2               ; ----------------------------------------------------------------------------
001435r 2               ; "LOG" FUNCTION
001435r 2               ; ----------------------------------------------------------------------------
001435r 2               LOG:
001435r 2  20 rr rr             jsr     SIGN
001438r 2  F0 02                beq     GIQ
00143Ar 2  10 03                bpl     LOG2
00143Cr 2               GIQ:
00143Cr 2  4C rr rr             jmp     IQERR
00143Fr 2               LOG2:
00143Fr 2  A5 rr                lda     FAC
001441r 2  E9 7F                sbc     #$7F
001443r 2  48                   pha
001444r 2  A9 80                lda     #$80
001446r 2  85 rr                sta     FAC
001448r 2  A9 rr                lda     #<CON_SQR_HALF
00144Ar 2  A0 rr                ldy     #>CON_SQR_HALF
00144Cr 2  20 rr rr             jsr     FADD
00144Fr 2  A9 rr                lda     #<CON_SQR_TWO
001451r 2  A0 rr                ldy     #>CON_SQR_TWO
001453r 2  20 rr rr             jsr     FDIV
001456r 2  A9 rr                lda     #<CON_ONE
001458r 2  A0 rr                ldy     #>CON_ONE
00145Ar 2  20 rr rr             jsr     FSUB
00145Dr 2  A9 rr                lda     #<POLY_LOG
00145Fr 2  A0 rr                ldy     #>POLY_LOG
001461r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001464r 2  A9 rr                lda     #<CON_NEG_HALF
001466r 2  A0 rr                ldy     #>CON_NEG_HALF
001468r 2  20 rr rr             jsr     FADD
00146Br 2  68                   pla
00146Cr 2  20 rr rr             jsr     ADDACC
00146Fr 2  A9 rr                lda     #<CON_LOG_TWO
001471r 2  A0 rr                ldy     #>CON_LOG_TWO
001473r 2               
001473r 2               ; ----------------------------------------------------------------------------
001473r 2               ; FAC = (Y,A) * FAC
001473r 2               ; ----------------------------------------------------------------------------
001473r 2               FMULT:
001473r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001476r 2               
001476r 2               ; ----------------------------------------------------------------------------
001476r 2               ; FAC = ARG * FAC
001476r 2               ; ----------------------------------------------------------------------------
001476r 2               FMULTT:
001476r 2               .ifndef CONFIG_11
001476r 2                       beq     L3903
001476r 2               .else
001476r 2  D0 03 4C rr          jeq     L3903
00147Ar 2  rr           
00147Br 2               .endif
00147Br 2  20 rr rr             jsr     ADD_EXPONENTS
00147Er 2  A9 00                lda     #$00
001480r 2  85 rr                sta     RESULT
001482r 2  85 rr                sta     RESULT+1
001484r 2  85 rr                sta     RESULT+2
001486r 2               .ifndef CONFIG_SMALL
001486r 2                       sta     RESULT+3
001486r 2               .endif
001486r 2  A5 rr                lda     FACEXTENSION
001488r 2  20 rr rr             jsr     MULTIPLY1
00148Br 2               .ifndef CONFIG_SMALL
00148Br 2                       lda     FAC+4
00148Br 2                       jsr     MULTIPLY1
00148Br 2               .endif
00148Br 2  A5 rr                lda     FAC+3
00148Dr 2  20 rr rr             jsr     MULTIPLY1
001490r 2  A5 rr                lda     FAC+2
001492r 2  20 rr rr             jsr     MULTIPLY1
001495r 2  A5 rr                lda     FAC+1
001497r 2  20 rr rr             jsr     MULTIPLY2
00149Ar 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
00149Dr 2               
00149Dr 2               ; ----------------------------------------------------------------------------
00149Dr 2               ; MULTIPLY ARG BY (A) INTO RESULT
00149Dr 2               ; ----------------------------------------------------------------------------
00149Dr 2               MULTIPLY1:
00149Dr 2  D0 03                bne     MULTIPLY2
00149Fr 2  4C rr rr             jmp     SHIFT_RIGHT1
0014A2r 2               MULTIPLY2:
0014A2r 2  4A                   lsr     a
0014A3r 2  09 80                ora     #$80
0014A5r 2               L38A7:
0014A5r 2  A8                   tay
0014A6r 2  90 13                bcc     L38C3
0014A8r 2  18                   clc
0014A9r 2               .ifndef CONFIG_SMALL
0014A9r 2                       lda     RESULT+3
0014A9r 2                       adc     ARG+4
0014A9r 2                       sta     RESULT+3
0014A9r 2               .endif
0014A9r 2  A5 rr                lda     RESULT+2
0014ABr 2  65 rr                adc     ARG+3
0014ADr 2  85 rr                sta     RESULT+2
0014AFr 2  A5 rr                lda     RESULT+1
0014B1r 2  65 rr                adc     ARG+2
0014B3r 2  85 rr                sta     RESULT+1
0014B5r 2  A5 rr                lda     RESULT
0014B7r 2  65 rr                adc     ARG+1
0014B9r 2  85 rr                sta     RESULT
0014BBr 2               L38C3:
0014BBr 2               .ifndef CONFIG_ROR_WORKAROUND
0014BBr 2  66 rr                ror     RESULT
0014BDr 2  66 rr                ror     RESULT+1
0014BFr 2               .ifdef APPLE_BAD_BYTE
0014BFr 2               ; this seems to be a bad byte in the dump
0014BFr 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
0014BFr 2               .else
0014BFr 2  66 rr                ror     RESULT+2
0014C1r 2               .endif
0014C1r 2               .ifndef CONFIG_SMALL
0014C1r 2                       ror     RESULT+3
0014C1r 2               .endif
0014C1r 2  66 rr                ror     FACEXTENSION
0014C3r 2               .else
0014C3r 2                       lda     #$00
0014C3r 2                       bcc     L38C9
0014C3r 2                       lda     #$80
0014C3r 2               L38C9:
0014C3r 2                       lsr     RESULT
0014C3r 2                       ora     RESULT
0014C3r 2                       sta     RESULT
0014C3r 2                       lda     #$00
0014C3r 2                       bcc     L38D5
0014C3r 2                       lda     #$80
0014C3r 2               L38D5:
0014C3r 2                       lsr     RESULT+1
0014C3r 2                       ora     RESULT+1
0014C3r 2                       sta     RESULT+1
0014C3r 2                       lda     #$00
0014C3r 2                       bcc     L38E1
0014C3r 2                       lda     #$80
0014C3r 2               L38E1:
0014C3r 2                       lsr     RESULT+2
0014C3r 2                       ora     RESULT+2
0014C3r 2                       sta     RESULT+2
0014C3r 2                       lda     #$00
0014C3r 2                       bcc     L38ED
0014C3r 2                       lda     #$80
0014C3r 2               L38ED:
0014C3r 2                       lsr     RESULT+3
0014C3r 2                       ora     RESULT+3
0014C3r 2                       sta     RESULT+3
0014C3r 2                       lda     #$00
0014C3r 2                       bcc     L38F9
0014C3r 2                       lda     #$80
0014C3r 2               L38F9:
0014C3r 2                       lsr     FACEXTENSION
0014C3r 2                       ora     FACEXTENSION
0014C3r 2                       sta     FACEXTENSION
0014C3r 2               .endif
0014C3r 2  98                   tya
0014C4r 2  4A                   lsr     a
0014C5r 2  D0 DE                bne     L38A7
0014C7r 2               L3903:
0014C7r 2  60                   rts
0014C8r 2               
0014C8r 2               ; ----------------------------------------------------------------------------
0014C8r 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0014C8r 2               ; ----------------------------------------------------------------------------
0014C8r 2               LOAD_ARG_FROM_YA:
0014C8r 2  85 rr                sta     INDEX
0014CAr 2  84 rr                sty     INDEX+1
0014CCr 2  A0 03                ldy     #BYTES_FP-1
0014CEr 2               .ifndef CONFIG_SMALL
0014CEr 2                       lda     (INDEX),y
0014CEr 2                       sta     ARG+4
0014CEr 2                       dey
0014CEr 2               .endif
0014CEr 2  B1 rr                lda     (INDEX),y
0014D0r 2  85 rr                sta     ARG+3
0014D2r 2  88                   dey
0014D3r 2  B1 rr                lda     (INDEX),y
0014D5r 2  85 rr                sta     ARG+2
0014D7r 2  88                   dey
0014D8r 2  B1 rr                lda     (INDEX),y
0014DAr 2  85 rr                sta     ARGSIGN
0014DCr 2  45 rr                eor     FACSIGN
0014DEr 2  85 rr                sta     SGNCPR
0014E0r 2  A5 rr                lda     ARGSIGN
0014E2r 2  09 80                ora     #$80
0014E4r 2  85 rr                sta     ARG+1
0014E6r 2  88                   dey
0014E7r 2  B1 rr                lda     (INDEX),y
0014E9r 2  85 rr                sta     ARG
0014EBr 2  A5 rr                lda     FAC
0014EDr 2  60                   rts
0014EEr 2               
0014EEr 2               ; ----------------------------------------------------------------------------
0014EEr 2               ; ADD EXPONENTS OF ARG AND FAC
0014EEr 2               ; (CALLED BY FMULT AND FDIV)
0014EEr 2               ;
0014EEr 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0014EEr 2               ; ----------------------------------------------------------------------------
0014EEr 2               ADD_EXPONENTS:
0014EEr 2  A5 rr                lda     ARG
0014F0r 2               ADD_EXPONENTS1:
0014F0r 2  F0 1F                beq     ZERO
0014F2r 2  18                   clc
0014F3r 2  65 rr                adc     FAC
0014F5r 2  90 04                bcc     L393C
0014F7r 2  30 1D                bmi     JOV
0014F9r 2  18                   clc
0014FAr 2  2C                   .byte   $2C
0014FBr 2               L393C:
0014FBr 2  10 14                bpl     ZERO
0014FDr 2  69 80                adc     #$80
0014FFr 2  85 rr                sta     FAC
001501r 2  D0 03                bne     L3947
001503r 2  4C rr rr             jmp     STA_IN_FAC_SIGN
001506r 2               L3947:
001506r 2  A5 rr                lda     SGNCPR
001508r 2  85 rr                sta     FACSIGN
00150Ar 2  60                   rts
00150Br 2               
00150Br 2               ; ----------------------------------------------------------------------------
00150Br 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
00150Br 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
00150Br 2               ; CALLED FROM "EXP" FUNCTION
00150Br 2               ; ----------------------------------------------------------------------------
00150Br 2               OUTOFRNG:
00150Br 2  A5 rr                lda     FACSIGN
00150Dr 2  49 FF                eor     #$FF
00150Fr 2  30 05                bmi     JOV
001511r 2               
001511r 2               ; ----------------------------------------------------------------------------
001511r 2               ; POP RETURN ADDRESS AND SET FAC=0
001511r 2               ; ----------------------------------------------------------------------------
001511r 2               ZERO:
001511r 2  68                   pla
001512r 2  68                   pla
001513r 2  4C rr rr             jmp     ZERO_FAC
001516r 2               JOV:
001516r 2  4C rr rr             jmp     OVERFLOW
001519r 2               
001519r 2               ; ----------------------------------------------------------------------------
001519r 2               ; MULTIPLY FAC BY 10
001519r 2               ; ----------------------------------------------------------------------------
001519r 2               MUL10:
001519r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00151Cr 2  AA                   tax
00151Dr 2  F0 10                beq     L3970
00151Fr 2  18                   clc
001520r 2  69 02                adc     #$02
001522r 2  B0 F2                bcs     JOV
001524r 2               LD9BF:
001524r 2  A2 00                ldx     #$00
001526r 2  86 rr                stx     SGNCPR
001528r 2  20 rr rr             jsr     FADD2
00152Br 2  E6 rr                inc     FAC
00152Dr 2  F0 E7                beq     JOV
00152Fr 2               L3970:
00152Fr 2  60                   rts
001530r 2               
001530r 2               ; ----------------------------------------------------------------------------
001530r 2               CONTEN:
001530r 2               .ifdef CONFIG_SMALL
001530r 2  84 20 00 00          .byte   $84,$20,$00,$00
001534r 2               .else
001534r 2                       .byte   $84,$20,$00,$00,$00
001534r 2               .endif
001534r 2               
001534r 2               ; ----------------------------------------------------------------------------
001534r 2               ; DIVIDE FAC BY 10
001534r 2               ; ----------------------------------------------------------------------------
001534r 2               DIV10:
001534r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001537r 2  A9 rr                lda     #<CONTEN
001539r 2  A0 rr                ldy     #>CONTEN
00153Br 2  A2 00                ldx     #$00
00153Dr 2               
00153Dr 2               ; ----------------------------------------------------------------------------
00153Dr 2               ; FAC = ARG / (Y,A)
00153Dr 2               ; ----------------------------------------------------------------------------
00153Dr 2               DIV:
00153Dr 2  86 rr                stx     SGNCPR
00153Fr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001542r 2  4C rr rr             jmp     FDIVT
001545r 2               
001545r 2               ; ----------------------------------------------------------------------------
001545r 2               ; FAC = (Y,A) / FAC
001545r 2               ; ----------------------------------------------------------------------------
001545r 2               FDIV:
001545r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001548r 2               
001548r 2               ; ----------------------------------------------------------------------------
001548r 2               ; FAC = ARG / FAC
001548r 2               ; ----------------------------------------------------------------------------
001548r 2               FDIVT:
001548r 2  F0 68                beq     L3A02
00154Ar 2  20 rr rr             jsr     ROUND_FAC
00154Dr 2  A9 00                lda     #$00
00154Fr 2  38                   sec
001550r 2  E5 rr                sbc     FAC
001552r 2  85 rr                sta     FAC
001554r 2  20 rr rr             jsr     ADD_EXPONENTS
001557r 2  E6 rr                inc     FAC
001559r 2  F0 BB                beq     JOV
00155Br 2  A2 FD                ldx     #<-MANTISSA_BYTES
00155Dr 2  A9 01                lda     #$01
00155Fr 2               L39A1:
00155Fr 2  A4 rr                ldy     ARG+1
001561r 2  C4 rr                cpy     FAC+1
001563r 2  D0 0A                bne     L39B7
001565r 2  A4 rr                ldy     ARG+2
001567r 2  C4 rr                cpy     FAC+2
001569r 2  D0 04                bne     L39B7
00156Br 2  A4 rr                ldy     ARG+3
00156Dr 2  C4 rr                cpy     FAC+3
00156Fr 2               .ifndef CONFIG_SMALL
00156Fr 2                       bne     L39B7
00156Fr 2                       ldy     ARG+4
00156Fr 2                       cpy     FAC+4
00156Fr 2               .endif
00156Fr 2               L39B7:
00156Fr 2  08                   php
001570r 2  2A                   rol     a
001571r 2  90 09                bcc     L39C4
001573r 2  E8                   inx
001574r 2  95 rr                sta     RESULT_LAST-1,x
001576r 2  F0 2A                beq     L39F2
001578r 2  10 2C                bpl     L39F6
00157Ar 2  A9 01                lda     #$01
00157Cr 2               L39C4:
00157Cr 2  28                   plp
00157Dr 2  B0 0C                bcs     L39D5
00157Fr 2               L39C7:
00157Fr 2  06 rr                asl     ARG_LAST
001581r 2               .ifndef CONFIG_SMALL
001581r 2                       rol     ARG+3
001581r 2               .endif
001581r 2  26 rr                rol     ARG+2
001583r 2  26 rr                rol     ARG+1
001585r 2  B0 E8                bcs     L39B7
001587r 2  30 D6                bmi     L39A1
001589r 2  10 E4                bpl     L39B7
00158Br 2               L39D5:
00158Br 2  A8                   tay
00158Cr 2               .ifndef CONFIG_SMALL
00158Cr 2                       lda     ARG+4
00158Cr 2                       sbc     FAC+4
00158Cr 2                       sta     ARG+4
00158Cr 2               .endif
00158Cr 2  A5 rr                lda     ARG+3
00158Er 2  E5 rr                sbc     FAC+3
001590r 2  85 rr                sta     ARG+3
001592r 2  A5 rr                lda     ARG+2
001594r 2  E5 rr                sbc     FAC+2
001596r 2  85 rr                sta     ARG+2
001598r 2  A5 rr                lda     ARG+1
00159Ar 2  E5 rr                sbc     FAC+1
00159Cr 2  85 rr                sta     ARG+1
00159Er 2  98                   tya
00159Fr 2  4C rr rr             jmp     L39C7
0015A2r 2               L39F2:
0015A2r 2  A9 40                lda     #$40
0015A4r 2  D0 D6                bne     L39C4
0015A6r 2               L39F6:
0015A6r 2  0A                   asl     a
0015A7r 2  0A                   asl     a
0015A8r 2  0A                   asl     a
0015A9r 2  0A                   asl     a
0015AAr 2  0A                   asl     a
0015ABr 2  0A                   asl     a
0015ACr 2  85 rr                sta     FACEXTENSION
0015AEr 2  28                   plp
0015AFr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0015B2r 2               L3A02:
0015B2r 2  A2 14                ldx     #ERR_ZERODIV
0015B4r 2  4C rr rr             jmp     ERROR
0015B7r 2               
0015B7r 2               ; ----------------------------------------------------------------------------
0015B7r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
0015B7r 2               ; ----------------------------------------------------------------------------
0015B7r 2               COPY_RESULT_INTO_FAC:
0015B7r 2  A5 rr                lda     RESULT
0015B9r 2  85 rr                sta     FAC+1
0015BBr 2  A5 rr                lda     RESULT+1
0015BDr 2  85 rr                sta     FAC+2
0015BFr 2  A5 rr                lda     RESULT+2
0015C1r 2  85 rr                sta     FAC+3
0015C3r 2               .ifndef CONFIG_SMALL
0015C3r 2                       lda     RESULT+3
0015C3r 2                       sta     FAC+4
0015C3r 2               .endif
0015C3r 2  4C rr rr             jmp     NORMALIZE_FAC2
0015C6r 2               
0015C6r 2               ; ----------------------------------------------------------------------------
0015C6r 2               ; UNPACK (Y,A) INTO FAC
0015C6r 2               ; ----------------------------------------------------------------------------
0015C6r 2               LOAD_FAC_FROM_YA:
0015C6r 2  85 rr                sta     INDEX
0015C8r 2  84 rr                sty     INDEX+1
0015CAr 2  A0 03                ldy     #MANTISSA_BYTES
0015CCr 2               .ifndef CONFIG_SMALL
0015CCr 2                       lda     (INDEX),y
0015CCr 2                       sta     FAC+4
0015CCr 2                       dey
0015CCr 2               .endif
0015CCr 2  B1 rr                lda     (INDEX),y
0015CEr 2  85 rr                sta     FAC+3
0015D0r 2  88                   dey
0015D1r 2  B1 rr                lda     (INDEX),y
0015D3r 2  85 rr                sta     FAC+2
0015D5r 2  88                   dey
0015D6r 2  B1 rr                lda     (INDEX),y
0015D8r 2  85 rr                sta     FACSIGN
0015DAr 2  09 80                ora     #$80
0015DCr 2  85 rr                sta     FAC+1
0015DEr 2  88                   dey
0015DFr 2  B1 rr                lda     (INDEX),y
0015E1r 2  85 rr                sta     FAC
0015E3r 2  84 rr                sty     FACEXTENSION
0015E5r 2  60                   rts
0015E6r 2               
0015E6r 2               ; ----------------------------------------------------------------------------
0015E6r 2               ; ROUND FAC, STORE IN TEMP2
0015E6r 2               ; ----------------------------------------------------------------------------
0015E6r 2               STORE_FAC_IN_TEMP2_ROUNDED:
0015E6r 2  A2 rr                ldx     #TEMP2
0015E8r 2  2C                   .byte   $2C
0015E9r 2               
0015E9r 2               ; ----------------------------------------------------------------------------
0015E9r 2               ; ROUND FAC, STORE IN TEMP1
0015E9r 2               ; ----------------------------------------------------------------------------
0015E9r 2               STORE_FAC_IN_TEMP1_ROUNDED:
0015E9r 2  A2 rr                ldx     #TEMP1X
0015EBr 2  A0 00                ldy     #$00
0015EDr 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0015EFr 2               
0015EFr 2               ; ----------------------------------------------------------------------------
0015EFr 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0015EFr 2               ; ----------------------------------------------------------------------------
0015EFr 2               SETFOR:
0015EFr 2  A6 rr                ldx     FORPNT
0015F1r 2  A4 rr                ldy     FORPNT+1
0015F3r 2               
0015F3r 2               ; ----------------------------------------------------------------------------
0015F3r 2               ; ROUND FAC, AND STORE AT (Y,X)
0015F3r 2               ; ----------------------------------------------------------------------------
0015F3r 2               STORE_FAC_AT_YX_ROUNDED:
0015F3r 2  20 rr rr             jsr     ROUND_FAC
0015F6r 2  86 rr                stx     INDEX
0015F8r 2  84 rr                sty     INDEX+1
0015FAr 2  A0 03                ldy     #MANTISSA_BYTES
0015FCr 2               .ifndef CONFIG_SMALL
0015FCr 2                       lda     FAC+4
0015FCr 2                       sta     (INDEX),y
0015FCr 2                       dey
0015FCr 2               .endif
0015FCr 2  A5 rr                lda     FAC+3
0015FEr 2  91 rr                sta     (INDEX),y
001600r 2  88                   dey
001601r 2  A5 rr                lda     FAC+2
001603r 2  91 rr                sta     (INDEX),y
001605r 2  88                   dey
001606r 2  A5 rr                lda     FACSIGN
001608r 2  09 7F                ora     #$7F
00160Ar 2  25 rr                and     FAC+1
00160Cr 2  91 rr                sta     (INDEX),y
00160Er 2  88                   dey
00160Fr 2  A5 rr                lda     FAC
001611r 2  91 rr                sta     (INDEX),y
001613r 2  84 rr                sty     FACEXTENSION
001615r 2  60                   rts
001616r 2               
001616r 2               ; ----------------------------------------------------------------------------
001616r 2               ; COPY ARG INTO FAC
001616r 2               ; ----------------------------------------------------------------------------
001616r 2               COPY_ARG_TO_FAC:
001616r 2  A5 rr                lda     ARGSIGN
001618r 2               MFA:
001618r 2  85 rr                sta     FACSIGN
00161Ar 2  A2 04                ldx     #BYTES_FP
00161Cr 2               L3A7A:
00161Cr 2  B5 rr                lda     SHIFTSIGNEXT,x
00161Er 2  95 rr                sta     EXPSGN,x
001620r 2  CA                   dex
001621r 2  D0 F9                bne     L3A7A
001623r 2  86 rr                stx     FACEXTENSION
001625r 2  60                   rts
001626r 2               
001626r 2               ; ----------------------------------------------------------------------------
001626r 2               ; ROUND FAC AND COPY TO ARG
001626r 2               ; ----------------------------------------------------------------------------
001626r 2               COPY_FAC_TO_ARG_ROUNDED:
001626r 2  20 rr rr             jsr     ROUND_FAC
001629r 2               MAF:
001629r 2  A2 05                ldx     #BYTES_FP+1
00162Br 2               L3A89:
00162Br 2  B5 rr                lda     EXPSGN,x
00162Dr 2  95 rr                sta     SHIFTSIGNEXT,x
00162Fr 2  CA                   dex
001630r 2  D0 F9                bne     L3A89
001632r 2  86 rr                stx     FACEXTENSION
001634r 2               RTS14:
001634r 2  60                   rts
001635r 2               
001635r 2               ; ----------------------------------------------------------------------------
001635r 2               ; ROUND FAC USING EXTENSION BYTE
001635r 2               ; ----------------------------------------------------------------------------
001635r 2               ROUND_FAC:
001635r 2  A5 rr                lda     FAC
001637r 2  F0 FB                beq     RTS14
001639r 2  06 rr                asl     FACEXTENSION
00163Br 2  90 F7                bcc     RTS14
00163Dr 2               
00163Dr 2               ; ----------------------------------------------------------------------------
00163Dr 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00163Dr 2               ; ----------------------------------------------------------------------------
00163Dr 2               INCREMENT_MANTISSA:
00163Dr 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
001640r 2  D0 F2                bne     RTS14
001642r 2  4C rr rr             jmp     NORMALIZE_FAC6
001645r 2               
001645r 2               ; ----------------------------------------------------------------------------
001645r 2               ; TEST FAC FOR ZERO AND SIGN
001645r 2               ;
001645r 2               ; FAC > 0, RETURN +1
001645r 2               ; FAC = 0, RETURN  0
001645r 2               ; FAC < 0, RETURN -1
001645r 2               ; ----------------------------------------------------------------------------
001645r 2               SIGN:
001645r 2  A5 rr                lda     FAC
001647r 2  F0 09                beq     RTS15
001649r 2               L3AA7:
001649r 2  A5 rr                lda     FACSIGN
00164Br 2               SIGN2:
00164Br 2  2A                   rol     a
00164Cr 2  A9 FF                lda     #$FF
00164Er 2  B0 02                bcs     RTS15
001650r 2  A9 01                lda     #$01
001652r 2               RTS15:
001652r 2  60                   rts
001653r 2               
001653r 2               ; ----------------------------------------------------------------------------
001653r 2               ; "SGN" FUNCTION
001653r 2               ; ----------------------------------------------------------------------------
001653r 2               SGN:
001653r 2  20 rr rr             jsr     SIGN
001656r 2               
001656r 2               ; ----------------------------------------------------------------------------
001656r 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001656r 2               ; ----------------------------------------------------------------------------
001656r 2               FLOAT:
001656r 2  85 rr                sta     FAC+1
001658r 2  A9 00                lda     #$00
00165Ar 2  85 rr                sta     FAC+2
00165Cr 2  A2 88                ldx     #$88
00165Er 2               
00165Er 2               ; ----------------------------------------------------------------------------
00165Er 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00165Er 2               ; (X) = EXPONENT
00165Er 2               ; ----------------------------------------------------------------------------
00165Er 2               FLOAT1:
00165Er 2  A5 rr                lda     FAC+1
001660r 2  49 FF                eor     #$FF
001662r 2  2A                   rol     a
001663r 2               
001663r 2               ; ----------------------------------------------------------------------------
001663r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001663r 2               ; (X) = EXPONENT
001663r 2               ; C=0 TO MAKE VALUE NEGATIVE
001663r 2               ; C=1 TO MAKE VALUE POSITIVE
001663r 2               ; ----------------------------------------------------------------------------
001663r 2               FLOAT2:
001663r 2  A9 00                lda     #$00
001665r 2               .ifndef CONFIG_SMALL
001665r 2                       sta     FAC+4
001665r 2               .endif
001665r 2  85 rr                sta     FAC+3
001667r 2               LDB21:
001667r 2  86 rr                stx     FAC
001669r 2  85 rr                sta     FACEXTENSION
00166Br 2  85 rr                sta     FACSIGN
00166Dr 2  4C rr rr             jmp     NORMALIZE_FAC1
001670r 2               
001670r 2               ; ----------------------------------------------------------------------------
001670r 2               ; "ABS" FUNCTION
001670r 2               ; ----------------------------------------------------------------------------
001670r 2               ABS:
001670r 2  46 rr                lsr     FACSIGN
001672r 2  60                   rts
001673r 2               
001673r 2               ; ----------------------------------------------------------------------------
001673r 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
001673r 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
001673r 2               ; ----------------------------------------------------------------------------
001673r 2               FCOMP:
001673r 2  85 rr                sta     DEST
001675r 2               
001675r 2               ; ----------------------------------------------------------------------------
001675r 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001675r 2               ; "DEST" ALREADY SET UP
001675r 2               ; ----------------------------------------------------------------------------
001675r 2               FCOMP2:
001675r 2  84 rr                sty     DEST+1
001677r 2  A0 00                ldy     #$00
001679r 2  B1 rr                lda     (DEST),y
00167Br 2  C8                   iny
00167Cr 2  AA                   tax
00167Dr 2  F0 C6                beq     SIGN
00167Fr 2  B1 rr                lda     (DEST),y
001681r 2  45 rr                eor     FACSIGN
001683r 2  30 C4                bmi     L3AA7
001685r 2  E4 rr                cpx     FAC
001687r 2  D0 1A                bne     L3B0A
001689r 2  B1 rr                lda     (DEST),y
00168Br 2  09 80                ora     #$80
00168Dr 2  C5 rr                cmp     FAC+1
00168Fr 2  D0 12                bne     L3B0A
001691r 2  C8                   iny
001692r 2  B1 rr                lda     (DEST),y
001694r 2  C5 rr                cmp     FAC+2
001696r 2  D0 0B                bne     L3B0A
001698r 2  C8                   iny
001699r 2               .ifndef CONFIG_SMALL
001699r 2                       lda     (DEST),y
001699r 2                       cmp     FAC+3
001699r 2                       bne     L3B0A
001699r 2                       iny
001699r 2               .endif
001699r 2  A9 7F                lda     #$7F
00169Br 2  C5 rr                cmp     FACEXTENSION
00169Dr 2  B1 rr                lda     (DEST),y
00169Fr 2  E5 rr                sbc     FAC_LAST
0016A1r 2  F0 28                beq     L3B32
0016A3r 2               L3B0A:
0016A3r 2  A5 rr                lda     FACSIGN
0016A5r 2  90 02                bcc     L3B10
0016A7r 2  49 FF                eor     #$FF
0016A9r 2               L3B10:
0016A9r 2  4C rr rr             jmp     SIGN2
0016ACr 2               
0016ACr 2               ; ----------------------------------------------------------------------------
0016ACr 2               ; QUICK INTEGER FUNCTION
0016ACr 2               ;
0016ACr 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
0016ACr 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
0016ACr 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
0016ACr 2               ;
0016ACr 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
0016ACr 2               ; ----------------------------------------------------------------------------
0016ACr 2               QINT:
0016ACr 2  A5 rr                lda     FAC
0016AEr 2  F0 4A                beq     QINT3
0016B0r 2  38                   sec
0016B1r 2  E9 98                sbc     #120+8*BYTES_FP
0016B3r 2  24 rr                bit     FACSIGN
0016B5r 2  10 09                bpl     L3B27
0016B7r 2  AA                   tax
0016B8r 2  A9 FF                lda     #$FF
0016BAr 2  85 rr                sta     SHIFTSIGNEXT
0016BCr 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
0016BFr 2  8A                   txa
0016C0r 2               L3B27:
0016C0r 2  A2 rr                ldx     #FAC
0016C2r 2  C9 F9                cmp     #$F9
0016C4r 2  10 06                bpl     QINT2
0016C6r 2  20 rr rr             jsr     SHIFT_RIGHT
0016C9r 2  84 rr                sty     SHIFTSIGNEXT
0016CBr 2               L3B32:
0016CBr 2  60                   rts
0016CCr 2               QINT2:
0016CCr 2  A8                   tay
0016CDr 2  A5 rr                lda     FACSIGN
0016CFr 2  29 80                and     #$80
0016D1r 2  46 rr                lsr     FAC+1
0016D3r 2  05 rr                ora     FAC+1
0016D5r 2  85 rr                sta     FAC+1
0016D7r 2  20 rr rr             jsr     SHIFT_RIGHT4
0016DAr 2  84 rr                sty     SHIFTSIGNEXT
0016DCr 2  60                   rts
0016DDr 2               
0016DDr 2               ; ----------------------------------------------------------------------------
0016DDr 2               ; "INT" FUNCTION
0016DDr 2               ;
0016DDr 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0016DDr 2               ; AND THEN REFLOATS THE INTEGER.
0016DDr 2               ; ----------------------------------------------------------------------------
0016DDr 2               INT:
0016DDr 2  A5 rr                lda     FAC
0016DFr 2  C9 98                cmp     #120+8*BYTES_FP
0016E1r 2  B0 1E                bcs     RTS17
0016E3r 2  20 rr rr             jsr     QINT
0016E6r 2  84 rr                sty     FACEXTENSION
0016E8r 2  A5 rr                lda     FACSIGN
0016EAr 2  84 rr                sty     FACSIGN
0016ECr 2  49 80                eor     #$80
0016EEr 2  2A                   rol     a
0016EFr 2  A9 98                lda     #120+8*BYTES_FP
0016F1r 2  85 rr                sta     FAC
0016F3r 2  A5 rr                lda     FAC_LAST
0016F5r 2  85 rr                sta     CHARAC
0016F7r 2  4C rr rr             jmp     NORMALIZE_FAC1
0016FAr 2               QINT3:
0016FAr 2  85 rr                sta     FAC+1
0016FCr 2  85 rr                sta     FAC+2
0016FEr 2  85 rr                sta     FAC+3
001700r 2               .ifndef CONFIG_SMALL
001700r 2                       sta     FAC+4
001700r 2               .endif
001700r 2  A8                   tay
001701r 2               RTS17:
001701r 2  60                   rts
001702r 2               
001702r 2               ; ----------------------------------------------------------------------------
001702r 2               ; CONVERT STRING TO FP VALUE IN FAC
001702r 2               ;
001702r 2               ; STRING POINTED TO BY TXTPTR
001702r 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
001702r 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
001702r 2               ; ----------------------------------------------------------------------------
001702r 2               FIN:
001702r 2  A0 00                ldy     #$00
001704r 2  A2 09                ldx     #SERLEN-TMPEXP
001706r 2               L3B6F:
001706r 2  94 rr                sty     TMPEXP,x
001708r 2  CA                   dex
001709r 2  10 FB                bpl     L3B6F
00170Br 2  90 0F                bcc     FIN2
00170Dr 2  C9 2D                cmp     #$2D
00170Fr 2  D0 04                bne     L3B7E
001711r 2  86 rr                stx     SERLEN
001713r 2  F0 04                beq     FIN1
001715r 2               L3B7E:
001715r 2  C9 2B                cmp     #$2B
001717r 2  D0 05                bne     FIN3
001719r 2               FIN1:
001719r 2  20 rr rr             jsr     CHRGET
00171Cr 2               FIN2:
00171Cr 2  90 5B                bcc     FIN9
00171Er 2               FIN3:
00171Er 2  C9 2E                cmp     #$2E
001720r 2  F0 2E                beq     FIN10
001722r 2  C9 45                cmp     #$45
001724r 2  D0 30                bne     FIN7
001726r 2  20 rr rr             jsr     CHRGET
001729r 2  90 17                bcc     FIN5
00172Br 2  C9 A4                cmp     #TOKEN_MINUS
00172Dr 2  F0 0E                beq     L3BA6
00172Fr 2  C9 2D                cmp     #$2D
001731r 2  F0 0A                beq     L3BA6
001733r 2  C9 A3                cmp     #TOKEN_PLUS
001735r 2  F0 08                beq     FIN4
001737r 2  C9 2B                cmp     #$2B
001739r 2  F0 04                beq     FIN4
00173Br 2  D0 07                bne     FIN6
00173Dr 2               L3BA6:
00173Dr 2               .ifndef CONFIG_ROR_WORKAROUND
00173Dr 2  66 rr                ror     EXPSGN
00173Fr 2               .else
00173Fr 2                       lda     #$00
00173Fr 2                       bcc     L3BAC
00173Fr 2                       lda     #$80
00173Fr 2               L3BAC:
00173Fr 2                       lsr     EXPSGN
00173Fr 2                       ora     EXPSGN
00173Fr 2                       sta     EXPSGN
00173Fr 2               .endif
00173Fr 2               FIN4:
00173Fr 2  20 rr rr             jsr     CHRGET
001742r 2               FIN5:
001742r 2  90 5C                bcc     GETEXP
001744r 2               FIN6:
001744r 2  24 rr                bit     EXPSGN
001746r 2  10 0E                bpl     FIN7
001748r 2  A9 00                lda     #$00
00174Ar 2  38                   sec
00174Br 2  E5 rr                sbc     EXPON
00174Dr 2  4C rr rr             jmp     FIN8
001750r 2               
001750r 2               ; ----------------------------------------------------------------------------
001750r 2               ; FOUND A DECIMAL POINT
001750r 2               ; ----------------------------------------------------------------------------
001750r 2               FIN10:
001750r 2               .ifndef CONFIG_ROR_WORKAROUND
001750r 2  66 rr                ror     LOWTR
001752r 2               .else
001752r 2                       lda     #$00
001752r 2                       bcc     L3BC9
001752r 2                       lda     #$80
001752r 2               L3BC9:
001752r 2                       lsr     LOWTR
001752r 2                       ora     LOWTR
001752r 2                       sta     LOWTR
001752r 2               .endif
001752r 2  24 rr                bit     LOWTR
001754r 2  50 C3                bvc     FIN1
001756r 2               
001756r 2               ; ----------------------------------------------------------------------------
001756r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001756r 2               ; ----------------------------------------------------------------------------
001756r 2               FIN7:
001756r 2  A5 rr                lda     EXPON
001758r 2               FIN8:
001758r 2  38                   sec
001759r 2  E5 rr                sbc     INDX
00175Br 2  85 rr                sta     EXPON
00175Dr 2  F0 12                beq     L3BEE
00175Fr 2  10 09                bpl     L3BE7
001761r 2               L3BDE:
001761r 2  20 rr rr             jsr     DIV10
001764r 2  E6 rr                inc     EXPON
001766r 2  D0 F9                bne     L3BDE
001768r 2  F0 07                beq     L3BEE
00176Ar 2               L3BE7:
00176Ar 2  20 rr rr             jsr     MUL10
00176Dr 2  C6 rr                dec     EXPON
00176Fr 2  D0 F9                bne     L3BE7
001771r 2               L3BEE:
001771r 2  A5 rr                lda     SERLEN
001773r 2  30 01                bmi     L3BF3
001775r 2  60                   rts
001776r 2               L3BF3:
001776r 2  4C rr rr             jmp     NEGOP
001779r 2               
001779r 2               ; ----------------------------------------------------------------------------
001779r 2               ; ACCUMULATE A DIGIT INTO FAC
001779r 2               ; ----------------------------------------------------------------------------
001779r 2               FIN9:
001779r 2  48                   pha
00177Ar 2  24 rr                bit     LOWTR
00177Cr 2  10 02                bpl     L3BFD
00177Er 2  E6 rr                inc     INDX
001780r 2               L3BFD:
001780r 2  20 rr rr             jsr     MUL10
001783r 2  68                   pla
001784r 2  38                   sec
001785r 2  E9 30                sbc     #$30
001787r 2  20 rr rr             jsr     ADDACC
00178Ar 2  4C rr rr             jmp     FIN1
00178Dr 2               
00178Dr 2               ; ----------------------------------------------------------------------------
00178Dr 2               ; ADD (A) TO FAC
00178Dr 2               ; ----------------------------------------------------------------------------
00178Dr 2               ADDACC:
00178Dr 2  48                   pha
00178Er 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001791r 2  68                   pla
001792r 2  20 rr rr             jsr     FLOAT
001795r 2  A5 rr                lda     ARGSIGN
001797r 2  45 rr                eor     FACSIGN
001799r 2  85 rr                sta     SGNCPR
00179Br 2  A6 rr                ldx     FAC
00179Dr 2  4C rr rr             jmp     FADDT
0017A0r 2               
0017A0r 2               ; ----------------------------------------------------------------------------
0017A0r 2               ; ACCUMULATE DIGIT OF EXPONENT
0017A0r 2               ; ----------------------------------------------------------------------------
0017A0r 2               GETEXP:
0017A0r 2  A5 rr                lda     EXPON
0017A2r 2  C9 0A                cmp     #MAX_EXPON
0017A4r 2  90 09                bcc     L3C2C
0017A6r 2               .ifdef CONFIG_10A
0017A6r 2  A9 64                lda     #$64
0017A8r 2               .endif
0017A8r 2  24 rr                bit     EXPSGN
0017AAr 2               .ifdef CONFIG_10A
0017AAr 2  30 11                bmi     L3C3A
0017ACr 2               .else
0017ACr 2                       bmi     LDC70
0017ACr 2               .endif
0017ACr 2  4C rr rr             jmp     OVERFLOW
0017AFr 2               LDC70:
0017AFr 2               .ifndef CONFIG_10A
0017AFr 2                       lda     #$0B
0017AFr 2               .endif
0017AFr 2               L3C2C:
0017AFr 2  0A                   asl     a
0017B0r 2  0A                   asl     a
0017B1r 2  18                   clc
0017B2r 2  65 rr                adc     EXPON
0017B4r 2  0A                   asl     a
0017B5r 2  18                   clc
0017B6r 2  A0 00                ldy     #$00
0017B8r 2  71 rr                adc     (TXTPTR),y
0017BAr 2  38                   sec
0017BBr 2  E9 30                sbc     #$30
0017BDr 2               L3C3A:
0017BDr 2  85 rr                sta     EXPON
0017BFr 2  4C rr rr             jmp     FIN4
0017C2r 2               
0017C2r 2               ; ----------------------------------------------------------------------------
0017C2r 2               .ifdef CONFIG_SMALL
0017C2r 2               ; these values are /1000 of what the labels say
0017C2r 2               CON_99999999_9:
0017C2r 2  91 43 4F F8          .byte   $91,$43,$4F,$F8
0017C6r 2               CON_999999999:
0017C6r 2  94 74 23 F7  		.byte   $94,$74,$23,$F7
0017CAr 2               CON_BILLION:
0017CAr 2  94 74 24 00          .byte   $94,$74,$24,$00
0017CEr 2               .else
0017CEr 2               CON_99999999_9:
0017CEr 2                       .byte   $9B,$3E,$BC,$1F,$FD
0017CEr 2               CON_999999999:
0017CEr 2               .ifndef CONFIG_10A
0017CEr 2                       .byte   $9E,$6E,$6B,$27,$FE
0017CEr 2               .else
0017CEr 2                       .byte   $9E,$6E,$6B,$27,$FD
0017CEr 2               .endif
0017CEr 2               CON_BILLION:
0017CEr 2                       .byte   $9E,$6E,$6B,$28,$00
0017CEr 2               .endif
0017CEr 2               
0017CEr 2               ; ----------------------------------------------------------------------------
0017CEr 2               ; PRINT "IN <LINE #>"
0017CEr 2               ; ----------------------------------------------------------------------------
0017CEr 2               INPRT:
0017CEr 2               .ifdef KBD
0017CEr 2                       jsr     LFE0B
0017CEr 2                       .byte	" in"
0017CEr 2                       .byte	0
0017CEr 2               .else
0017CEr 2  A9 rr                lda     #<QT_IN
0017D0r 2  A0 rr                ldy     #>QT_IN
0017D2r 2  20 rr rr             jsr     GOSTROUT2
0017D5r 2               .endif
0017D5r 2  A5 rr                lda     CURLIN+1
0017D7r 2  A6 rr                ldx     CURLIN
0017D9r 2               
0017D9r 2               ; ----------------------------------------------------------------------------
0017D9r 2               ; PRINT A,X AS DECIMAL INTEGER
0017D9r 2               ; ----------------------------------------------------------------------------
0017D9r 2               LINPRT:
0017D9r 2  85 rr                sta     FAC+1
0017DBr 2  86 rr                stx     FAC+2
0017DDr 2  A2 90                ldx     #$90
0017DFr 2  38                   sec
0017E0r 2  20 rr rr             jsr     FLOAT2
0017E3r 2  20 rr rr             jsr     FOUT
0017E6r 2               GOSTROUT2:
0017E6r 2  4C rr rr             jmp     STROUT
0017E9r 2               
0017E9r 2               ; ----------------------------------------------------------------------------
0017E9r 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
0017E9r 2               ; RETURN WITH (Y,A) POINTING AT STRING
0017E9r 2               ; ----------------------------------------------------------------------------
0017E9r 2               FOUT:
0017E9r 2  A0 01                ldy     #$01
0017EBr 2               
0017EBr 2               ; ----------------------------------------------------------------------------
0017EBr 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
0017EBr 2               ; SO THAT RESULT STRING STARTS AT STACK-1
0017EBr 2               ; (THIS IS USED AS A FLAG)
0017EBr 2               ; ----------------------------------------------------------------------------
0017EBr 2               FOUT1:
0017EBr 2  A9 20                lda     #$20
0017EDr 2  24 rr                bit     FACSIGN
0017EFr 2  10 02                bpl     L3C73
0017F1r 2  A9 2D                lda     #$2D
0017F3r 2               L3C73:
0017F3r 2  99 FF 00             sta     $FF,y
0017F6r 2  85 rr                sta     FACSIGN
0017F8r 2  84 rr                sty     STRNG2
0017FAr 2  C8                   iny
0017FBr 2  A9 30                lda     #$30
0017FDr 2  A6 rr                ldx     FAC
0017FFr 2  D0 03                bne     L3C84
001801r 2  4C rr rr             jmp     FOUT4
001804r 2               L3C84:
001804r 2  A9 00                lda     #$00
001806r 2  E0 80                cpx     #$80
001808r 2  F0 02                beq     L3C8C
00180Ar 2  B0 09                bcs     L3C95
00180Cr 2               L3C8C:
00180Cr 2  A9 rr                lda     #<CON_BILLION
00180Er 2  A0 rr                ldy     #>CON_BILLION
001810r 2  20 rr rr             jsr     FMULT
001813r 2               .ifdef CONFIG_SMALL
001813r 2  A9 FA                lda     #<-6 ; exponent adjustment
001815r 2               .else
001815r 2                       lda     #<-9
001815r 2               .endif
001815r 2               L3C95:
001815r 2  85 rr                sta     INDX
001817r 2               ; ----------------------------------------------------------------------------
001817r 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
001817r 2               ; ----------------------------------------------------------------------------
001817r 2               L3C97:
001817r 2  A9 rr                lda     #<CON_999999999
001819r 2  A0 rr                ldy     #>CON_999999999
00181Br 2  20 rr rr             jsr     FCOMP
00181Er 2  F0 1E                beq     L3CBE
001820r 2  10 12                bpl     L3CB4
001822r 2               L3CA2:
001822r 2  A9 rr                lda     #<CON_99999999_9
001824r 2  A0 rr                ldy     #>CON_99999999_9
001826r 2  20 rr rr             jsr     FCOMP
001829r 2  F0 02                beq     L3CAD
00182Br 2  10 0E                bpl     L3CBB
00182Dr 2               L3CAD:
00182Dr 2  20 rr rr             jsr     MUL10
001830r 2  C6 rr                dec     INDX
001832r 2  D0 EE                bne     L3CA2
001834r 2               L3CB4:
001834r 2  20 rr rr             jsr     DIV10
001837r 2  E6 rr                inc     INDX
001839r 2  D0 DC                bne     L3C97
00183Br 2               L3CBB:
00183Br 2  20 rr rr             jsr     FADDH
00183Er 2               L3CBE:
00183Er 2  20 rr rr             jsr     QINT
001841r 2               ; ----------------------------------------------------------------------------
001841r 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
001841r 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
001841r 2               ;
001841r 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
001841r 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
001841r 2               ; ----------------------------------------------------------------------------
001841r 2  A2 01                ldx     #$01
001843r 2  A5 rr                lda     INDX
001845r 2  18                   clc
001846r 2  69 07                adc     #3*BYTES_FP-5
001848r 2  30 09                bmi     L3CD3
00184Ar 2  C9 08                cmp     #3*BYTES_FP-4
00184Cr 2  B0 06                bcs     L3CD4
00184Er 2  69 FF                adc     #$FF
001850r 2  AA                   tax
001851r 2  A9 02                lda     #$02
001853r 2               L3CD3:
001853r 2  38                   sec
001854r 2               L3CD4:
001854r 2  E9 02                sbc     #$02
001856r 2  85 rr                sta     EXPON
001858r 2  86 rr                stx     INDX
00185Ar 2  8A                   txa
00185Br 2  F0 02                beq     L3CDF
00185Dr 2  10 13                bpl     L3CF2
00185Fr 2               L3CDF:
00185Fr 2  A4 rr                ldy     STRNG2
001861r 2  A9 2E                lda     #$2E
001863r 2  C8                   iny
001864r 2  99 FF 00             sta     $FF,y
001867r 2  8A                   txa
001868r 2  F0 06                beq     L3CF0
00186Ar 2  A9 30                lda     #$30
00186Cr 2  C8                   iny
00186Dr 2  99 FF 00             sta     $FF,y
001870r 2               L3CF0:
001870r 2  84 rr                sty     STRNG2
001872r 2               ; ----------------------------------------------------------------------------
001872r 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001872r 2               ; ----------------------------------------------------------------------------
001872r 2               L3CF2:
001872r 2  A0 00                ldy     #$00
001874r 2               LDD3A:
001874r 2  A2 80                ldx     #$80
001876r 2               L3CF6:
001876r 2  A5 rr                lda     FAC_LAST
001878r 2  18                   clc
001879r 2               .ifndef CONFIG_SMALL
001879r 2                       adc     DECTBL+3,y
001879r 2                       sta     FAC+4
001879r 2                       lda     FAC+3
001879r 2               .endif
001879r 2  79 rr rr             adc     DECTBL+2,y
00187Cr 2  85 rr                sta     FAC+3
00187Er 2  A5 rr                lda     FAC+2
001880r 2  79 rr rr             adc     DECTBL+1,y
001883r 2  85 rr                sta     FAC+2
001885r 2  A5 rr                lda     FAC+1
001887r 2  79 rr rr             adc     DECTBL,y
00188Ar 2  85 rr                sta     FAC+1
00188Cr 2  E8                   inx
00188Dr 2  B0 04                bcs     L3D1A
00188Fr 2  10 E5                bpl     L3CF6
001891r 2  30 02                bmi     L3D1C
001893r 2               L3D1A:
001893r 2  30 E1                bmi     L3CF6
001895r 2               L3D1C:
001895r 2  8A                   txa
001896r 2  90 04                bcc     L3D23
001898r 2  49 FF                eor     #$FF
00189Ar 2  69 0A                adc     #$0A
00189Cr 2               L3D23:
00189Cr 2  69 2F                adc     #$2F
00189Er 2  C8                   iny
00189Fr 2  C8                   iny
0018A0r 2  C8                   iny
0018A1r 2               .ifndef CONFIG_SMALL
0018A1r 2                       iny
0018A1r 2               .endif
0018A1r 2  84 rr                sty     VARPNT
0018A3r 2  A4 rr                ldy     STRNG2
0018A5r 2  C8                   iny
0018A6r 2  AA                   tax
0018A7r 2  29 7F                and     #$7F
0018A9r 2  99 FF 00             sta     $FF,y
0018ACr 2  C6 rr                dec     INDX
0018AEr 2  D0 06                bne     L3D3E
0018B0r 2  A9 2E                lda     #$2E
0018B2r 2  C8                   iny
0018B3r 2  99 FF 00             sta     $FF,y
0018B6r 2               L3D3E:
0018B6r 2  84 rr                sty     STRNG2
0018B8r 2  A4 rr                ldy     VARPNT
0018BAr 2  8A                   txa
0018BBr 2  49 FF                eor     #$FF
0018BDr 2  29 80                and     #$80
0018BFr 2  AA                   tax
0018C0r 2  C0 12                cpy     #DECTBL_END-DECTBL
0018C2r 2               .ifdef CONFIG_CBM_ALL
0018C2r 2                       beq     LDD96
0018C2r 2                       cpy     #$3C ; XXX
0018C2r 2               .endif
0018C2r 2  D0 B2                bne     L3CF6
0018C4r 2               ; ----------------------------------------------------------------------------
0018C4r 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
0018C4r 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
0018C4r 2               ; DECIMAL POINT.
0018C4r 2               ; ----------------------------------------------------------------------------
0018C4r 2               LDD96:
0018C4r 2  A4 rr                ldy     STRNG2
0018C6r 2               L3D4E:
0018C6r 2  B9 FF 00             lda     $FF,y
0018C9r 2  88                   dey
0018CAr 2  C9 30                cmp     #$30
0018CCr 2  F0 F8                beq     L3D4E
0018CEr 2  C9 2E                cmp     #$2E
0018D0r 2  F0 01                beq     L3D5B
0018D2r 2  C8                   iny
0018D3r 2               L3D5B:
0018D3r 2  A9 2B                lda     #$2B
0018D5r 2  A6 rr                ldx     EXPON
0018D7r 2  F0 2E                beq     L3D8F
0018D9r 2  10 08                bpl     L3D6B
0018DBr 2  A9 00                lda     #$00
0018DDr 2  38                   sec
0018DEr 2  E5 rr                sbc     EXPON
0018E0r 2  AA                   tax
0018E1r 2  A9 2D                lda     #$2D
0018E3r 2               L3D6B:
0018E3r 2  99 01 01             sta     STACK+1,y
0018E6r 2  A9 45                lda     #$45
0018E8r 2  99 00 01             sta     STACK,y
0018EBr 2  8A                   txa
0018ECr 2  A2 2F                ldx     #$2F
0018EEr 2  38                   sec
0018EFr 2               L3D77:
0018EFr 2  E8                   inx
0018F0r 2  E9 0A                sbc     #$0A
0018F2r 2  B0 FB                bcs     L3D77
0018F4r 2  69 3A                adc     #$3A
0018F6r 2  99 03 01             sta     STACK+3,y
0018F9r 2  8A                   txa
0018FAr 2  99 02 01             sta     STACK+2,y
0018FDr 2  A9 00                lda     #$00
0018FFr 2  99 04 01             sta     STACK+4,y
001902r 2  F0 08                beq     L3D94
001904r 2               FOUT4:
001904r 2  99 FF 00             sta     $FF,y
001907r 2               L3D8F:
001907r 2  A9 00                lda     #$00
001909r 2  99 00 01             sta     STACK,y
00190Cr 2               L3D94:
00190Cr 2  A9 00                lda     #$00
00190Er 2  A0 01                ldy     #$01
001910r 2  60                   rts
001911r 2               
001911r 2               ; ----------------------------------------------------------------------------
001911r 2               CON_HALF:
001911r 2               .ifdef CONFIG_SMALL
001911r 2  80 00 00 00          .byte   $80,$00,$00,$00
001915r 2               .else
001915r 2                       .byte   $80,$00,$00,$00,$00
001915r 2               .endif
001915r 2               
001915r 2               ; ----------------------------------------------------------------------------
001915r 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001915r 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001915r 2               ; ----------------------------------------------------------------------------
001915r 2               DECTBL:
001915r 2               .ifdef CONFIG_SMALL
001915r 2  FE 79 60             .byte   $FE,$79,$60 ; -100000
001918r 2  00 27 10     		.byte	$00,$27,$10 ; 10000
00191Br 2  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
00191Er 2  00 00 64     		.byte	$00,$00,$64 ; 100
001921r 2  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
001924r 2  00 00 01     		.byte	$00,$00,$01 ; 1
001927r 2               .else
001927r 2               		.byte	$FA,$0A,$1F,$00	; -100000000
001927r 2               		.byte	$00,$98,$96,$80	; 10000000
001927r 2               		.byte	$FF,$F0,$BD,$C0	; -1000000
001927r 2               		.byte	$00,$01,$86,$A0	; 100000
001927r 2               		.byte	$FF,$FF,$D8,$F0	; -10000
001927r 2               		.byte   $00,$00,$03,$E8	; 1000
001927r 2               		.byte	$FF,$FF,$FF,$9C	; -100
001927r 2               		.byte   $00,$00,$00,$0A	; 10
001927r 2               		.byte	$FF,$FF,$FF,$FF	; -1
001927r 2               .endif
001927r 2               DECTBL_END:
001927r 2               .ifdef CONFIG_CBM_ALL
001927r 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001927r 2               		.byte	$00,$03,$4B,$C0
001927r 2               		.byte	$FF,$FF,$73,$60
001927r 2               		.byte	$00,$00,$0E,$10
001927r 2               		.byte	$FF,$FF,$FD,$A8
001927r 2               		.byte	$00,$00,$00,$3C
001927r 2               .endif
001927r 2               .ifdef CONFIG_2
001927r 2               C_ZERO = CON_HALF + 2
001927r 2               .endif
001927r 2               
001927r 2               ; ----------------------------------------------------------------------------
001927r 2               ; "SQR" FUNCTION
001927r 2               ; ----------------------------------------------------------------------------
001927r 2               SQR:
001927r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00192Ar 2  A9 rr                lda     #<CON_HALF
00192Cr 2  A0 rr                ldy     #>CON_HALF
00192Er 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001931r 2               
001931r 2               ; ----------------------------------------------------------------------------
001931r 2               ; EXPONENTIATION OPERATION
001931r 2               ;
001931r 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001931r 2               ; ----------------------------------------------------------------------------
001931r 2               FPWRT:
001931r 2  F0 63                beq     EXP
001933r 2  A5 rr                lda     ARG
001935r 2  D0 03                bne     L3DD5
001937r 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
00193Ar 2               L3DD5:
00193Ar 2  A2 rr                ldx     #TEMP3
00193Cr 2  A0 00                ldy     #$00
00193Er 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001941r 2  A5 rr                lda     ARGSIGN
001943r 2  10 0F                bpl     L3DEF
001945r 2  20 rr rr             jsr     INT
001948r 2  A9 rr                lda     #TEMP3
00194Ar 2  A0 00                ldy     #$00
00194Cr 2  20 rr rr             jsr     FCOMP
00194Fr 2  D0 03                bne     L3DEF
001951r 2  98                   tya
001952r 2  A4 rr                ldy     CHARAC
001954r 2               L3DEF:
001954r 2  20 rr rr             jsr     MFA
001957r 2  98                   tya
001958r 2  48                   pha
001959r 2  20 rr rr             jsr     LOG
00195Cr 2  A9 rr                lda     #TEMP3
00195Er 2  A0 00                ldy     #$00
001960r 2  20 rr rr             jsr     FMULT
001963r 2  20 rr rr             jsr     EXP
001966r 2  68                   pla
001967r 2  4A                   lsr     a
001968r 2  90 0A                bcc     L3E0F
00196Ar 2               
00196Ar 2               ; ----------------------------------------------------------------------------
00196Ar 2               ; NEGATE VALUE IN FAC
00196Ar 2               ; ----------------------------------------------------------------------------
00196Ar 2               NEGOP:
00196Ar 2  A5 rr                lda     FAC
00196Cr 2  F0 06                beq     L3E0F
00196Er 2  A5 rr                lda     FACSIGN
001970r 2  49 FF                eor     #$FF
001972r 2  85 rr                sta     FACSIGN
001974r 2               L3E0F:
001974r 2  60                   rts
001975r 2               
001975r 2               ; ----------------------------------------------------------------------------
001975r 2               .ifdef CONFIG_SMALL
001975r 2               CON_LOG_E:
001975r 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B
001979r 2               POLY_EXP:
001979r 2  06           		.byte	$06
00197Ar 2  74 63 90 8C  		.byte	$74,$63,$90,$8C
00197Er 2  77 23 0C AB  		.byte	$77,$23,$0C,$AB
001982r 2  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
001986r 2  7C 63 42 80  		.byte	$7C,$63,$42,$80
00198Ar 2  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
00198Er 2  80 31 72 15  		.byte	$80,$31,$72,$15
001992r 2  81 00 00 00  		.byte	$81,$00,$00,$00
001996r 2               .else
001996r 2               CON_LOG_E:
001996r 2                       .byte   $81,$38,$AA,$3B,$29
001996r 2               POLY_EXP:
001996r 2                       .byte   $07
001996r 2               		.byte	$71,$34,$58,$3E,$56
001996r 2               		.byte	$74,$16,$7E,$B3,$1B
001996r 2               		.byte	$77,$2F,$EE,$E3,$85
001996r 2                       .byte   $7A,$1D,$84,$1C,$2A
001996r 2               		.byte	$7C,$63,$59,$58,$0A
001996r 2               		.byte	$7E,$75,$FD,$E7,$C6
001996r 2               		.byte	$80,$31,$72,$18,$10
001996r 2               		.byte	$81,$00,$00,$00,$00
001996r 2               .endif
001996r 2               
001996r 2               ; ----------------------------------------------------------------------------
001996r 2               ; "EXP" FUNCTION
001996r 2               ;
001996r 2               ; FAC = E ^ FAC
001996r 2               ; ----------------------------------------------------------------------------
001996r 2               EXP:
001996r 2  A9 rr                lda     #<CON_LOG_E
001998r 2  A0 rr                ldy     #>CON_LOG_E
00199Ar 2  20 rr rr             jsr     FMULT
00199Dr 2  A5 rr                lda     FACEXTENSION
00199Fr 2  69 50                adc     #$50
0019A1r 2  90 03                bcc     L3E4E
0019A3r 2  20 rr rr             jsr     INCREMENT_MANTISSA
0019A6r 2               L3E4E:
0019A6r 2  85 rr                sta     ARGEXTENSION
0019A8r 2  20 rr rr             jsr     MAF
0019ABr 2  A5 rr                lda     FAC
0019ADr 2  C9 88                cmp     #$88
0019AFr 2  90 03                bcc     L3E5C
0019B1r 2               L3E59:
0019B1r 2  20 rr rr             jsr     OUTOFRNG
0019B4r 2               L3E5C:
0019B4r 2  20 rr rr             jsr     INT
0019B7r 2  A5 rr                lda     CHARAC
0019B9r 2  18                   clc
0019BAr 2  69 81                adc     #$81
0019BCr 2  F0 F3                beq     L3E59
0019BEr 2  38                   sec
0019BFr 2  E9 01                sbc     #$01
0019C1r 2  48                   pha
0019C2r 2  A2 04                ldx     #BYTES_FP
0019C4r 2               L3E6C:
0019C4r 2  B5 rr                lda     ARG,x
0019C6r 2  B4 rr                ldy     FAC,x
0019C8r 2  95 rr                sta     FAC,x
0019CAr 2  94 rr                sty     ARG,x
0019CCr 2  CA                   dex
0019CDr 2  10 F5                bpl     L3E6C
0019CFr 2  A5 rr                lda     ARGEXTENSION
0019D1r 2  85 rr                sta     FACEXTENSION
0019D3r 2  20 rr rr             jsr     FSUBT
0019D6r 2  20 rr rr             jsr     NEGOP
0019D9r 2  A9 rr                lda     #<POLY_EXP
0019DBr 2  A0 rr                ldy     #>POLY_EXP
0019DDr 2  20 rr rr             jsr     POLYNOMIAL
0019E0r 2  A9 00                lda     #$00
0019E2r 2  85 rr                sta     SGNCPR
0019E4r 2  68                   pla
0019E5r 2  20 rr rr             jsr     ADD_EXPONENTS1
0019E8r 2  60                   rts
0019E9r 2               
0019E9r 2               ; ----------------------------------------------------------------------------
0019E9r 2               ; ODD POLYNOMIAL SUBROUTINE
0019E9r 2               ;
0019E9r 2               ; F(X) = X * P(X^2)
0019E9r 2               ;
0019E9r 2               ; WHERE:  X IS VALUE IN FAC
0019E9r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
0019E9r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
0019E9r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
0019E9r 2               ;
0019E9r 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
0019E9r 2               ; ----------------------------------------------------------------------------
0019E9r 2               POLYNOMIAL_ODD:
0019E9r 2  85 rr                sta     STRNG2
0019EBr 2  84 rr                sty     STRNG2+1
0019EDr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
0019F0r 2  A9 rr                lda     #TEMP1X
0019F2r 2  20 rr rr             jsr     FMULT
0019F5r 2  20 rr rr             jsr     SERMAIN
0019F8r 2  A9 rr                lda     #TEMP1X
0019FAr 2  A0 00                ldy     #$00
0019FCr 2  4C rr rr             jmp     FMULT
0019FFr 2               
0019FFr 2               ; ----------------------------------------------------------------------------
0019FFr 2               ; NORMAL POLYNOMIAL SUBROUTINE
0019FFr 2               ;
0019FFr 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
0019FFr 2               ;
0019FFr 2               ; WHERE:  X IS VALUE IN FAC
0019FFr 2               ;	Y,A POINTS AT COEFFICIENT TABLE
0019FFr 2               ;	FIRST BYTE OF COEFF. TABLE IS N
0019FFr 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
0019FFr 2               ; ----------------------------------------------------------------------------
0019FFr 2               POLYNOMIAL:
0019FFr 2  85 rr                sta     STRNG2
001A01r 2  84 rr                sty     STRNG2+1
001A03r 2               SERMAIN:
001A03r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001A06r 2  B1 rr                lda     (STRNG2),y
001A08r 2  85 rr                sta     SERLEN
001A0Ar 2  A4 rr                ldy     STRNG2
001A0Cr 2  C8                   iny
001A0Dr 2  98                   tya
001A0Er 2  D0 02                bne     L3EBA
001A10r 2  E6 rr                inc     STRNG2+1
001A12r 2               L3EBA:
001A12r 2  85 rr                sta     STRNG2
001A14r 2  A4 rr                ldy     STRNG2+1
001A16r 2               L3EBE:
001A16r 2  20 rr rr             jsr     FMULT
001A19r 2  A5 rr                lda     STRNG2
001A1Br 2  A4 rr                ldy     STRNG2+1
001A1Dr 2  18                   clc
001A1Er 2  69 04                adc     #BYTES_FP
001A20r 2  90 01                bcc     L3ECB
001A22r 2  C8                   iny
001A23r 2               L3ECB:
001A23r 2  85 rr                sta     STRNG2
001A25r 2  84 rr                sty     STRNG2+1
001A27r 2  20 rr rr             jsr     FADD
001A2Ar 2  A9 rr                lda     #TEMP2
001A2Cr 2  A0 00                ldy     #$00
001A2Er 2  C6 rr                dec     SERLEN
001A30r 2  D0 E4                bne     L3EBE
001A32r 2               RTS19:
001A32r 2  60                   rts
001A33r 2               
001A33r 1               .include "chrget.s"
001A33r 2               .segment "RODATA"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 rr                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 rr                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001A33r 2               
001A33r 2               ; ----------------------------------------------------------------------------
001A33r 2               ; "RND" FUNCTION
001A33r 2               ; ----------------------------------------------------------------------------
001A33r 2               
001A33r 2               .ifdef KBD
001A33r 2               RND:
001A33r 2                       ldx     #$10
001A33r 2                       jsr     SIGN
001A33r 2                       beq     LFC26
001A33r 2                       bmi     LFC10
001A33r 2                       lda     RNDSEED
001A33r 2                       ldy     RNDSEED+1
001A33r 2               LFBFA:
001A33r 2                       sta     FAC+2
001A33r 2                       sty     FAC+1
001A33r 2               LFBFE:
001A33r 2                       asl     a
001A33r 2                       asl     a
001A33r 2                       eor     FAC+2
001A33r 2                       asl     a
001A33r 2                       eor     FAC+1
001A33r 2                       asl     a
001A33r 2                       asl     a
001A33r 2                       asl     a
001A33r 2                       asl     a
001A33r 2                       eor     FAC+1
001A33r 2                       asl     a
001A33r 2                       rol     FAC+2
001A33r 2                       rol     FAC+1
001A33r 2               LFC10:
001A33r 2                       lda     FAC+2
001A33r 2                       dex
001A33r 2                       bne     LFBFE
001A33r 2                       sta     RNDSEED
001A33r 2                       sta     FAC+3
001A33r 2                       lda     FAC+1
001A33r 2                       sta     RNDSEED+1
001A33r 2                       lda     #$80
001A33r 2                       sta     FAC
001A33r 2                       stx     FACSIGN
001A33r 2                       jmp     NORMALIZE_FAC2
001A33r 2               LFC26:
001A33r 2                       ldy     $03CA
001A33r 2                       lda     $03C7
001A33r 2                       ora     #$01
001A33r 2               GOMOVMF:
001A33r 2                       bne     LFBFA
001A33r 2                       .byte   $F0
001A33r 2               .else
001A33r 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001A33r 2               ; (non CONFIG_SMALL)
001A33r 2               CONRND1:
001A33r 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001A37r 2               CONRND2:
001A37r 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001A3Br 2               RND:
001A3Br 2  20 rr rr             jsr     SIGN
001A3Er 2               .ifdef CONFIG_CBM_ALL
001A3Er 2                       bmi     L3F01
001A3Er 2                       bne     LDF63
001A3Er 2                       lda     ENTROPY
001A3Er 2                       sta     FAC+1
001A3Er 2                       lda     ENTROPY+4
001A3Er 2                       sta     FAC+2
001A3Er 2                       lda     ENTROPY+1
001A3Er 2                       sta     FAC+3
001A3Er 2                       lda     ENTROPY+5
001A3Er 2                       sta     FAC+4
001A3Er 2                       jmp     LDF88
001A3Er 2               LDF63:
001A3Er 2               .else
001A3Er 2  AA                   tax
001A3Fr 2  30 18                bmi     L3F01
001A41r 2               .endif
001A41r 2  A9 rr                lda     #<RNDSEED
001A43r 2  A0 rr                ldy     #>RNDSEED
001A45r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001A48r 2               .ifndef CONFIG_CBM_ALL
001A48r 2  8A                   txa
001A49r 2  F0 E7                beq     RTS19
001A4Br 2               .endif
001A4Br 2  A9 rr                lda     #<CONRND1
001A4Dr 2  A0 rr                ldy     #>CONRND1
001A4Fr 2  20 rr rr             jsr     FMULT
001A52r 2  A9 rr                lda     #<CONRND2
001A54r 2  A0 rr                ldy     #>CONRND2
001A56r 2  20 rr rr             jsr     FADD
001A59r 2               L3F01:
001A59r 2  A6 rr                ldx     FAC_LAST
001A5Br 2  A5 rr                lda     FAC+1
001A5Dr 2  85 rr                sta     FAC_LAST
001A5Fr 2  86 rr                stx     FAC+1
001A61r 2               .ifdef CONFIG_CBM_ALL
001A61r 2                       ldx     FAC+2
001A61r 2                       lda     FAC+3
001A61r 2                       sta     FAC+2
001A61r 2                       stx     FAC+3
001A61r 2               LDF88:
001A61r 2               .endif
001A61r 2  A9 00                lda     #$00
001A63r 2  85 rr                sta     FACSIGN
001A65r 2  A5 rr                lda     FAC
001A67r 2  85 rr                sta     FACEXTENSION
001A69r 2  A9 80                lda     #$80
001A6Br 2  85 rr                sta     FAC
001A6Dr 2  20 rr rr             jsr     NORMALIZE_FAC2
001A70r 2  A2 rr                ldx     #<RNDSEED
001A72r 2  A0 rr                ldy     #>RNDSEED
001A74r 2               GOMOVMF:
001A74r 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001A77r 2               .endif
001A77r 2               
001A77r 2               .segment "RODATA"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52
00001Cr 2                 .else
00001Cr 2                   .ifdef CONFIG_11
00001Cr 2                       .byte   $80,$4F,$C7,$52,$58
00001Cr 2                   .else
00001Cr 2                       .byte   $80,$4F,$C7,$52,$59
00001Cr 2                   .endif
00001Cr 2                 .endif
00001Cr 2               .endif
00001Cr 2               GENERIC_CHRGET_END:
00001Cr 2               
00001Cr 1               .include "trig.s"
00001Cr 2               .segment "CODE"
001A77r 2               
001A77r 2               SIN_COS_TAN_ATN:
001A77r 2               ; ----------------------------------------------------------------------------
001A77r 2               ; "COS" FUNCTION
001A77r 2               ; ----------------------------------------------------------------------------
001A77r 2               COS:
001A77r 2  A9 rr                lda     #<CON_PI_HALF
001A79r 2  A0 rr                ldy     #>CON_PI_HALF
001A7Br 2  20 rr rr             jsr     FADD
001A7Er 2               
001A7Er 2               ; ----------------------------------------------------------------------------
001A7Er 2               ; "SIN" FUNCTION
001A7Er 2               ; ----------------------------------------------------------------------------
001A7Er 2               SIN:
001A7Er 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A81r 2  A9 rr                lda     #<CON_PI_DOUB
001A83r 2  A0 rr                ldy     #>CON_PI_DOUB
001A85r 2  A6 rr                ldx     ARGSIGN
001A87r 2  20 rr rr             jsr     DIV
001A8Ar 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A8Dr 2  20 rr rr             jsr     INT
001A90r 2  A9 00                lda     #$00
001A92r 2  85 rr                sta     STRNG1
001A94r 2  20 rr rr             jsr     FSUBT
001A97r 2               ; ----------------------------------------------------------------------------
001A97r 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001A97r 2               ;
001A97r 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001A97r 2               ;
001A97r 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001A97r 2               ; ----------------------------------------------------------------------------
001A97r 2  A9 rr                lda     #<QUARTER
001A99r 2  A0 rr                ldy     #>QUARTER
001A9Br 2  20 rr rr             jsr     FSUB
001A9Er 2  A5 rr                lda     FACSIGN
001AA0r 2  48                   pha
001AA1r 2  10 0D                bpl     SIN1
001AA3r 2  20 rr rr             jsr     FADDH
001AA6r 2  A5 rr                lda     FACSIGN
001AA8r 2  30 09                bmi     L3F5B
001AAAr 2  A5 rr                lda     CPRMASK
001AACr 2  49 FF                eor     #$FF
001AAEr 2  85 rr                sta     CPRMASK
001AB0r 2               ; ----------------------------------------------------------------------------
001AB0r 2               ; IF FALL THRU, RANGE IS 0...1/2
001AB0r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001AB0r 2               ; ----------------------------------------------------------------------------
001AB0r 2               SIN1:
001AB0r 2  20 rr rr             jsr     NEGOP
001AB3r 2               ; ----------------------------------------------------------------------------
001AB3r 2               ; IF FALL THRU, RANGE IS -1/2...0
001AB3r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001AB3r 2               ; ----------------------------------------------------------------------------
001AB3r 2               L3F5B:
001AB3r 2  A9 rr                lda     #<QUARTER
001AB5r 2  A0 rr                ldy     #>QUARTER
001AB7r 2  20 rr rr             jsr     FADD
001ABAr 2  68                   pla
001ABBr 2  10 03                bpl     L3F68
001ABDr 2  20 rr rr             jsr     NEGOP
001AC0r 2               L3F68:
001AC0r 2  A9 rr                lda     #<POLY_SIN
001AC2r 2  A0 rr                ldy     #>POLY_SIN
001AC4r 2  4C rr rr             jmp     POLYNOMIAL_ODD
001AC7r 2               
001AC7r 2               ; ----------------------------------------------------------------------------
001AC7r 2               ; "TAN" FUNCTION
001AC7r 2               ;
001AC7r 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001AC7r 2               ; ----------------------------------------------------------------------------
001AC7r 2               TAN:
001AC7r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001ACAr 2  A9 00                lda     #$00
001ACCr 2  85 rr                sta     CPRMASK
001ACEr 2  20 rr rr             jsr     SIN
001AD1r 2  A2 rr                ldx     #TEMP3
001AD3r 2  A0 00                ldy     #$00
001AD5r 2  20 rr rr             jsr     GOMOVMF
001AD8r 2  A9 rr                lda     #TEMP1+(5-BYTES_FP)
001ADAr 2  A0 00                ldy     #$00
001ADCr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001ADFr 2  A9 00                lda     #$00
001AE1r 2  85 rr                sta     FACSIGN
001AE3r 2  A5 rr                lda     CPRMASK
001AE5r 2  20 rr rr             jsr     TAN1
001AE8r 2  A9 rr                lda     #TEMP3
001AEAr 2  A0 00                ldy     #$00
001AECr 2  4C rr rr             jmp     FDIV
001AEFr 2               TAN1:
001AEFr 2  48                   pha
001AF0r 2  4C rr rr             jmp     SIN1
001AF3r 2               
001AF3r 2               ; ----------------------------------------------------------------------------
001AF3r 2               .ifdef CONFIG_SMALL
001AF3r 2               CON_PI_HALF:
001AF3r 2  81 49 0F DB          .byte   $81,$49,$0F,$DB
001AF7r 2               CON_PI_DOUB:
001AF7r 2  83 49 0F DB          .byte   $83,$49,$0F,$DB
001AFBr 2               QUARTER:
001AFBr 2  7F 00 00 00          .byte   $7F,$00,$00,$00
001AFFr 2               POLY_SIN:
001AFFr 2  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001B03r 2  FB 87 99 26  
001B07r 2  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001B0Br 2  58 86 A5 5D  
001B0Fr 2  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
001B13r 2  DB           
001B14r 2               .else
001B14r 2               CON_PI_HALF:
001B14r 2                       .byte   $81,$49,$0F,$DA,$A2
001B14r 2               CON_PI_DOUB:
001B14r 2                       .byte   $83,$49,$0F,$DA,$A2
001B14r 2               QUARTER:
001B14r 2                       .byte   $7F,$00,$00,$00,$00
001B14r 2               POLY_SIN:
001B14r 2                       .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001B14r 2                       .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001B14r 2                       .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001B14r 2                       .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001B14r 2                 .ifndef CONFIG_11
001B14r 2               ; no easter egg text before BASIC 1.1
001B14r 2                 .elseif !.def(CONFIG_2A)
001B14r 2               ; ASCII encoded easter egg
001B14r 2               MICROSOFT:
001B14r 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001B14r 2                       .byte   $CE,$CA
001B14r 2                 .else
001B14r 2               ; PET encoded easter egg text since CBM2
001B14r 2               MICROSOFT:
001B14r 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001B14r 2                       .byte   $89,$CD
001B14r 2                 .endif
001B14r 2               .endif
001B14r 2               
001B14r 2               ; ----------------------------------------------------------------------------
001B14r 2               ; "ATN" FUNCTION
001B14r 2               ; ----------------------------------------------------------------------------
001B14r 2               ATN:
001B14r 2  A5 rr                lda     FACSIGN
001B16r 2  48                   pha
001B17r 2  10 03                bpl     L3FDB
001B19r 2  20 rr rr             jsr     NEGOP
001B1Cr 2               L3FDB:
001B1Cr 2  A5 rr                lda     FAC
001B1Er 2  48                   pha
001B1Fr 2  C9 81                cmp     #$81
001B21r 2  90 07                bcc     L3FE9
001B23r 2  A9 rr                lda     #<CON_ONE
001B25r 2  A0 rr                ldy     #>CON_ONE
001B27r 2  20 rr rr             jsr     FDIV
001B2Ar 2               ; ----------------------------------------------------------------------------
001B2Ar 2               ; 0 <= X <= 1
001B2Ar 2               ; 0 <= ATN(X) <= PI/8
001B2Ar 2               ; ----------------------------------------------------------------------------
001B2Ar 2               L3FE9:
001B2Ar 2  A9 rr                lda     #<POLY_ATN
001B2Cr 2  A0 rr                ldy     #>POLY_ATN
001B2Er 2  20 rr rr             jsr     POLYNOMIAL_ODD
001B31r 2  68                   pla
001B32r 2  C9 81                cmp     #$81
001B34r 2  90 07                bcc     L3FFC
001B36r 2  A9 rr                lda     #<CON_PI_HALF
001B38r 2  A0 rr                ldy     #>CON_PI_HALF
001B3Ar 2  20 rr rr             jsr     FSUB
001B3Dr 2               L3FFC:
001B3Dr 2  68                   pla
001B3Er 2  10 03                bpl     L4002
001B40r 2  4C rr rr             jmp     NEGOP
001B43r 2               L4002:
001B43r 2  60                   rts
001B44r 2               
001B44r 2               ; ----------------------------------------------------------------------------
001B44r 2               POLY_ATN:
001B44r 2               .ifdef CONFIG_SMALL
001B44r 2  08                   .byte   $08
001B45r 2  78 3A C5 37  		.byte	$78,$3A,$C5,$37
001B49r 2  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
001B4Dr 2  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
001B51r 2  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
001B55r 2  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
001B59r 2  7E 91 72 00  		.byte	$7E,$91,$72,$00
001B5Dr 2  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
001B61r 2  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
001B65r 2  81 00 00 00  		.byte	$81,$00,$00,$00
001B69r 2               .else
001B69r 2                       .byte   $0B
001B69r 2               		.byte	$76,$B3,$83,$BD,$D3
001B69r 2               		.byte	$79,$1E,$F4,$A6,$F5
001B69r 2               		.byte	$7B,$83,$FC,$B0,$10
001B69r 2                       .byte   $7C,$0C,$1F,$67,$CA
001B69r 2               		.byte	$7C,$DE,$53,$CB,$C1
001B69r 2               		.byte	$7D,$14,$64,$70,$4C
001B69r 2               		.byte	$7D,$B7,$EA,$51,$7A
001B69r 2               		.byte	$7D,$63,$30,$88,$7E
001B69r 2               		.byte	$7E,$92,$44,$99,$3A
001B69r 2               		.byte	$7E,$4C,$CC,$91,$C7
001B69r 2               		.byte	$7F,$AA,$AA,$AA,$13
001B69r 2                       .byte   $81,$00,$00,$00,$00
001B69r 2               .endif
001B69r 2               
001B69r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001B69r 2               		.byte	$00 ; XXX
001B69r 2               .endif
001B69r 2               
001B69r 1               .include "init.s"
001B69r 2               .segment "CODE"
001B69r 2               
001B69r 2               .ifdef KBD
001B69r 2               FNDLIN2:
001B69r 2                       php
001B69r 2                       jmp     FNDLIN
001B69r 2               .endif
001B69r 2               
001B69r 2               ; ----------------------------------------------------------------------------
001B69r 2               PR_WRITTEN_BY:
001B69r 2               .ifndef KBD
001B69r 2                 .ifndef CONFIG_CBM_ALL
001B69r 2  A9 rr                lda     #<QT_WRITTEN_BY
001B6Br 2  A0 rr                ldy     #>QT_WRITTEN_BY
001B6Dr 2  20 rr rr             jsr     STROUT
001B70r 2                 .endif
001B70r 2               .endif
001B70r 2               COLD_START:
001B70r 2               .ifdef KBD
001B70r 2                       lda     #<LFD81
001B70r 2                       sta     $03A0
001B70r 2                       lda     #>LFD81
001B70r 2                       sta     $03A1
001B70r 2                       lda     #$20
001B70r 2                       sta     $0480
001B70r 2                       lda     $0352
001B70r 2                       sta     $04
001B70r 2                       lda     $0353
001B70r 2                       sta     $05
001B70r 2               .else
001B70r 2                 .ifndef CBM2
001B70r 2  A2 FF                ldx     #$FF
001B72r 2  86 rr                stx     CURLIN+1
001B74r 2                 .endif
001B74r 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
001B74r 2  A2 FB                ldx     #$FB
001B76r 2                 .endif
001B76r 2  9A                   txs
001B77r 2                 .ifndef CONFIG_CBM_ALL
001B77r 2  A9 rr                lda     #<COLD_START
001B79r 2  A0 rr                ldy     #>COLD_START
001B7Br 2  85 rr                sta     GORESTART+1
001B7Dr 2  84 rr                sty     GORESTART+2
001B7Fr 2  85 rr                sta     GOSTROUT+1
001B81r 2  84 rr                sty     GOSTROUT+2
001B83r 2  A9 rr                lda     #<AYINT
001B85r 2  A0 rr                ldy     #>AYINT
001B87r 2  85 rr                sta     GOAYINT
001B89r 2  84 rr                sty     GOAYINT+1
001B8Br 2  A9 rr                lda     #<GIVAYF
001B8Dr 2  A0 rr                ldy     #>GIVAYF
001B8Fr 2  85 rr                sta     GOGIVEAYF
001B91r 2  84 rr                sty     GOGIVEAYF+1
001B93r 2                 .endif
001B93r 2  A9 4C                lda     #$4C
001B95r 2                 .ifdef CONFIG_CBM_ALL
001B95r 2                       sta     JMPADRS
001B95r 2                 .endif
001B95r 2  85 rr                sta     GORESTART
001B97r 2                 .ifndef CONFIG_CBM_ALL
001B97r 2  85 rr                sta     GOSTROUT
001B99r 2  85 rr                sta     JMPADRS
001B9Br 2                 .endif
001B9Br 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
001B9Br 2  85 0A                sta     USR
001B9Dr 2                 .endif
001B9Dr 2               
001B9Dr 2                 .ifndef CONFIG_RAM
001B9Dr 2                   .ifdef APPLE
001B9Dr 2                         lda     #<USR_FUNC
001B9Dr 2                         ldy     #>USR_FUNC
001B9Dr 2                   .else
001B9Dr 2  A9 rr                  lda     #<IQERR
001B9Fr 2  A0 rr                  ldy     #>IQERR
001BA1r 2                   .endif
001BA1r 2  85 0B                  sta     USR+1
001BA3r 2  84 0C                  sty     USR+2
001BA5r 2                 .endif
001BA5r 2                 .ifndef CBM1
001BA5r 2  A9 48                lda     #WIDTH
001BA7r 2  85 rr                sta     Z17
001BA9r 2  A9 38                lda     #WIDTH2
001BABr 2  85 rr                sta     Z18
001BADr 2                 .endif
001BADr 2               .endif ;/* KBD */
001BADr 2               
001BADr 2               ; All non-CONFIG_SMALL versions of BASIC have
001BADr 2               ; the same bug here: While the number of bytes
001BADr 2               ; to be copied is correct for CONFIG_SMALL,
001BADr 2               ; it is one byte short on non-CONFIG_SMALL:
001BADr 2               ; It seems the "ldx" value below has been
001BADr 2               ; hardcoded. So on these configurations,
001BADr 2               ; the last byte of GENERIC_RNDSEED, which
001BADr 2               ; is 5 bytes instead of 4, does not get copied -
001BADr 2               ; which is nothing major, because it is just
001BADr 2               ; the least significant 8 bits of the mantissa
001BADr 2               ; of the random number seed.
001BADr 2               ; KBD added three bytes to CHRGET and removed
001BADr 2               ; the random number seed, but only adjusted
001BADr 2               ; the number of bytes by adding 3 - this
001BADr 2               ; copies four bytes too many, which is no
001BADr 2               ; problem.
001BADr 2               .ifdef CONFIG_SMALL
001BADr 2                 .ifdef KBD
001BADr 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
001BADr 2                 .else
001BADr 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
001BAFr 2                 .endif
001BAFr 2               .else
001BAFr 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
001BAFr 2               .endif
001BAFr 2               L4098:
001BAFr 2  BD rr rr             lda     GENERIC_CHRGET-1,x
001BB2r 2  95 rr                sta     CHRGET-1,x
001BB4r 2  CA                   dex
001BB5r 2  D0 F8                bne     L4098
001BB7r 2               .ifdef CONFIG_2
001BB7r 2  A9 03                lda     #$03
001BB9r 2  85 rr                sta     DSCLEN
001BBBr 2               .endif
001BBBr 2               .ifndef KBD
001BBBr 2  8A                   txa
001BBCr 2  85 rr                sta     SHIFTSIGNEXT
001BBEr 2                 .ifdef CONFIG_CBM_ALL
001BBEr 2                       sta     CURDVC
001BBEr 2                 .endif
001BBEr 2  85 rr                sta     LASTPT+1
001BC0r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
001BC0r 2  85 rr                sta     Z15
001BC2r 2                 .endif
001BC2r 2                 .ifndef CONFIG_11
001BC2r 2                       sta     POSX
001BC2r 2                 .endif
001BC2r 2  48                   pha
001BC3r 2  85 rr                sta     Z14
001BC5r 2                 .ifndef CBM2
001BC5r 2                   .ifndef MICROTAN
001BC5r 2  A9 03                lda     #$03
001BC7r 2  85 rr                sta     DSCLEN
001BC9r 2                   .endif
001BC9r 2                   .ifndef CONFIG_11
001BC9r 2                       lda     #$2C
001BC9r 2                       sta     LINNUM+1
001BC9r 2                   .endif
001BC9r 2  20 rr rr             jsr     CRDO
001BCCr 2                 .endif
001BCCr 2                 .ifdef CBM2
001BCCr 2                       inx
001BCCr 2                       stx     INPUTBUFFER-3
001BCCr 2                       stx     INPUTBUFFER-4
001BCCr 2                 .endif
001BCCr 2                 .ifdef APPLE
001BCCr 2                       lda     #$01
001BCCr 2                       sta     INPUTBUFFER-3
001BCCr 2                       sta     INPUTBUFFER-4
001BCCr 2                 .endif
001BCCr 2  A2 rr                ldx     #TEMPST
001BCEr 2  86 rr                stx     TEMPPT
001BD0r 2               .ifndef CONFIG_CBM_ALL
001BD0r 2  A9 rr                lda     #<QT_MEMORY_SIZE
001BD2r 2  A0 rr                ldy     #>QT_MEMORY_SIZE
001BD4r 2  20 rr rr             jsr     STROUT
001BD7r 2                 .ifdef APPLE
001BD7r 2                       jsr     INLINX
001BD7r 2                 .else
001BD7r 2  20 rr rr             jsr     NXIN
001BDAr 2                 .endif
001BDAr 2  86 rr                stx     TXTPTR
001BDCr 2  84 rr                sty     TXTPTR+1
001BDEr 2  20 rr rr             jsr     CHRGET
001BE1r 2  C9 41                cmp     #$41
001BE3r 2  F0 84                beq     PR_WRITTEN_BY
001BE5r 2  A8                   tay
001BE6r 2  D0 25                bne     L40EE
001BE8r 2               .endif
001BE8r 2               .ifndef CBM2
001BE8r 2  A9 rr                lda     #<RAMSTART2
001BEAr 2               .endif
001BEAr 2  A0 rr                ldy     #>RAMSTART2
001BECr 2               .ifdef CONFIG_2
001BECr 2  85 rr                sta     TXTTAB
001BEEr 2  84 rr                sty     TXTTAB+1
001BF0r 2               .endif
001BF0r 2  85 rr                sta     LINNUM
001BF2r 2  84 rr                sty     LINNUM+1
001BF4r 2               .ifdef CBM2
001BF4r 2               		tay
001BF4r 2               .else
001BF4r 2  A0 00                ldy     #$00
001BF6r 2               .endif
001BF6r 2               L40D7:
001BF6r 2  E6 rr                inc     LINNUM
001BF8r 2  D0 02                bne     L40DD
001BFAr 2  E6 rr                inc     LINNUM+1
001BFCr 2               .ifdef CBM1
001BFCr 2               ; CBM: hard RAM top limit is $8000
001BFCr 2                       lda     LINNUM+1
001BFCr 2                       cmp     #$80
001BFCr 2                       beq     L40FA
001BFCr 2               .endif
001BFCr 2               .ifdef CBM2
001BFCr 2               ; optimized version of the CBM1 code
001BFCr 2                       bmi     L40FA
001BFCr 2               .endif
001BFCr 2               L40DD:
001BFCr 2               .ifdef CONFIG_2
001BFCr 2  A9 55                lda     #$55 ; 01010101 / 10101010
001BFEr 2               .else
001BFEr 2                       lda     #$92 ; 10010010 / 00100100
001BFEr 2               .endif
001BFEr 2  91 rr                sta     (LINNUM),y
001C00r 2  D1 rr                cmp     (LINNUM),y
001C02r 2  D0 15                bne     L40FA
001C04r 2  0A                   asl     a
001C05r 2  91 rr                sta     (LINNUM),y
001C07r 2  D1 rr                cmp     (LINNUM),y
001C09r 2               .ifdef CONFIG_CBM_ALL
001C09r 2                       beq     L40D7
001C09r 2               .else
001C09r 2                 .ifndef CONFIG_11
001C09r 2                       beq     L40D7; old: faster
001C09r 2                       bne     L40FA
001C09r 2                 .else
001C09r 2  D0 0E                bne     L40FA; new: slower
001C0Br 2  F0 E9                beq     L40D7
001C0Dr 2                 .endif
001C0Dr 2               L40EE:
001C0Dr 2  20 rr rr             jsr     CHRGOT
001C10r 2  20 rr rr             jsr     LINGET
001C13r 2  A8                   tay
001C14r 2  F0 03                beq     L40FA
001C16r 2  4C rr rr             jmp     SYNERR
001C19r 2               .endif
001C19r 2               L40FA:
001C19r 2  A5 rr                lda     LINNUM
001C1Br 2  A4 rr                ldy     LINNUM+1
001C1Dr 2  85 rr                sta     MEMSIZ
001C1Fr 2  84 rr                sty     MEMSIZ+1
001C21r 2               .ifndef MICROTAN
001C21r 2  85 rr                sta     FRETOP
001C23r 2  84 rr                sty     FRETOP+1
001C25r 2               .endif
001C25r 2               L4106:
001C25r 2               .ifndef CONFIG_CBM_ALL
001C25r 2                 .ifdef APPLE
001C25r 2                       lda     #$FF
001C25r 2                       jmp     L2829
001C25r 2                       .word	STROUT ; PATCH!
001C25r 2                       jsr     NXIN
001C25r 2                 .else
001C25r 2  A9 rr                lda     #<QT_TERMINAL_WIDTH
001C27r 2  A0 rr                ldy     #>QT_TERMINAL_WIDTH
001C29r 2  20 rr rr             jsr     STROUT
001C2Cr 2  20 rr rr             jsr     NXIN
001C2Fr 2                 .endif
001C2Fr 2  86 rr                stx     TXTPTR
001C31r 2  84 rr                sty     TXTPTR+1
001C33r 2  20 rr rr             jsr     CHRGET
001C36r 2  A8                   tay
001C37r 2  F0 1C                beq     L4136
001C39r 2  20 rr rr             jsr     LINGET
001C3Cr 2  A5 rr                lda     LINNUM+1
001C3Er 2  D0 E5                bne     L4106
001C40r 2  A5 rr                lda     LINNUM
001C42r 2  C9 10                cmp     #$10
001C44r 2  90 DF                bcc     L4106
001C46r 2               L2829:
001C46r 2  85 rr                sta     Z17
001C48r 2               L4129:
001C48r 2  E9 0E                sbc     #$0E
001C4Ar 2  B0 FC                bcs     L4129
001C4Cr 2  49 FF                eor     #$FF
001C4Er 2  E9 0C                sbc     #$0C
001C50r 2  18                   clc
001C51r 2  65 rr                adc     Z17
001C53r 2  85 rr                sta     Z18
001C55r 2               .endif
001C55r 2               L4136:
001C55r 2               .ifdef CONFIG_RAM
001C55r 2                       lda     #<QT_WANT
001C55r 2                       ldy     #>QT_WANT
001C55r 2                       jsr     STROUT
001C55r 2                       jsr     NXIN
001C55r 2                       stx     TXTPTR
001C55r 2                       sty     TXTPTR+1
001C55r 2                       jsr     CHRGET
001C55r 2                       ldx     #<RAMSTART1
001C55r 2                       ldy     #>RAMSTART1
001C55r 2                       cmp     #'Y'
001C55r 2                       beq     L4183
001C55r 2                       cmp     #'A'
001C55r 2                       beq     L4157
001C55r 2                       cmp     #'N'
001C55r 2                       bne     L4136
001C55r 2               L4157:
001C55r 2                       ldx     #<IQERR
001C55r 2                       ldy     #>IQERR
001C55r 2                       stx     UNFNC_ATN
001C55r 2                       sty     UNFNC_ATN+1
001C55r 2                       ldx     #<ATN	; overwrite starting
001C55r 2                       ldy     #>ATN	; with ATN
001C55r 2                       cmp     #'A'
001C55r 2                       beq     L4183
001C55r 2                       ldx     #<IQERR
001C55r 2                       ldy     #>IQERR
001C55r 2                       stx     UNFNC_COS
001C55r 2                       sty     UNFNC_COS+1
001C55r 2                       stx     UNFNC_TAN
001C55r 2                       sty     UNFNC_TAN+1
001C55r 2                       stx     UNFNC_SIN
001C55r 2                       sty     UNFNC_SIN+1
001C55r 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
001C55r 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
001C55r 2               L4183:
001C55r 2               .else
001C55r 2  A2 rr                ldx     #<RAMSTART2
001C57r 2  A0 rr                ldy     #>RAMSTART2
001C59r 2               .endif
001C59r 2  86 rr                stx     TXTTAB
001C5Br 2  84 rr                sty     TXTTAB+1
001C5Dr 2  A0 00                ldy     #$00
001C5Fr 2  98                   tya
001C60r 2  91 rr                sta     (TXTTAB),y
001C62r 2  E6 rr                inc     TXTTAB
001C64r 2               .ifndef CBM2
001C64r 2  D0 02                bne     L4192
001C66r 2  E6 rr                inc     TXTTAB+1
001C68r 2               L4192:
001C68r 2               .endif
001C68r 2               .if CONFIG_SCRTCH_ORDER = 1
001C68r 2                       jsr     SCRTCH
001C68r 2               .endif
001C68r 2  A5 rr                lda     TXTTAB
001C6Ar 2  A4 rr                ldy     TXTTAB+1
001C6Cr 2  20 rr rr             jsr     REASON
001C6Fr 2               .ifdef CBM2
001C6Fr 2                       lda     #<QT_BASIC
001C6Fr 2                       ldy     #>QT_BASIC
001C6Fr 2                       jsr     STROUT
001C6Fr 2               .else
001C6Fr 2  20 rr rr             jsr     CRDO
001C72r 2               .endif
001C72r 2  A5 rr                lda     MEMSIZ
001C74r 2  38                   sec
001C75r 2  E5 rr                sbc     TXTTAB
001C77r 2  AA                   tax
001C78r 2  A5 rr                lda     MEMSIZ+1
001C7Ar 2  E5 rr                sbc     TXTTAB+1
001C7Cr 2  20 rr rr             jsr     LINPRT
001C7Fr 2  A9 rr                lda     #<QT_BYTES_FREE
001C81r 2  A0 rr                ldy     #>QT_BYTES_FREE
001C83r 2  20 rr rr             jsr     STROUT
001C86r 2               .if CONFIG_SCRTCH_ORDER = 2
001C86r 2                       jsr     SCRTCH
001C86r 2               .endif
001C86r 2               .ifdef CONFIG_CBM_ALL
001C86r 2                       jmp     RESTART
001C86r 2               .else
001C86r 2  A9 rr                lda     #<STROUT
001C88r 2  A0 rr                ldy     #>STROUT
001C8Ar 2  85 rr                sta     GOSTROUT+1
001C8Cr 2  84 rr                sty     GOSTROUT+2
001C8Er 2                 .if CONFIG_SCRTCH_ORDER = 3
001C8Er 2  20 rr rr              jsr     SCRTCH
001C91r 2                 .endif
001C91r 2  A9 rr                lda     #<RESTART
001C93r 2  A0 rr                ldy     #>RESTART
001C95r 2  85 rr                sta     GORESTART+1
001C97r 2  84 rr                sty     GORESTART+2
001C99r 2  6C rr rr             jmp     (GORESTART+1)
001C9Cr 2               .endif
001C9Cr 2               
001C9Cr 2               .segment "RODATA"
00001Cr 2               
00001Cr 2                 .if .def(CONFIG_RAM) || .def(OSI)
00001Cr 2               ; OSI is compiled for ROM, but includes
00001Cr 2               ; this unused string
00001Cr 2               QT_WANT:
00001Cr 2                       .byte   "WANT SIN-COS-TAN-ATN"
00001Cr 2                       .byte   0
00001Cr 2                 .endif
00001Cr 2               QT_WRITTEN_BY:
00001Cr 2                 .ifndef CONFIG_CBM_ALL
00001Cr 2                   .ifdef APPLE
00001Cr 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
00001Cr 2               		.byte	CR,0
00001Cr 2                   .else
00001Cr 2  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
00001Fr 2                     .ifndef CONFIG_11
00001Fr 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
00001Fr 2                     .else
00001Fr 2  57 52 49 54          .byte   "WRITTEN BY WEILAND & GATES"
000023r 2  54 45 4E 20  
000027r 2  42 59 20 57  
000039r 2                     .endif
000039r 2  0D 0A 00             .byte   CR,LF,0
00003Cr 2                   .endif
00003Cr 2               QT_MEMORY_SIZE:
00003Cr 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
000040r 2  52 59 20 53  
000044r 2  49 5A 45     
000047r 2  00                   .byte   0
000048r 2               QT_TERMINAL_WIDTH:
000048r 2  54 45 52 4D          .byte   "TERMINAL WIDTH"
00004Cr 2  49 4E 41 4C  
000050r 2  20 57 49 44  
000056r 2  00                   .byte   0
000057r 2                 .endif
000057r 2               QT_BYTES_FREE:
000057r 2  20 42 59 54          .byte   " BYTES FREE"
00005Br 2  45 53 20 46  
00005Fr 2  52 45 45     
000062r 2                 .ifdef CBM1
000062r 2                 .elseif .def(CBM2)
000062r 2                       .byte   CR,0
000062r 2                 .elseif .def(APPLE)
000062r 2                       .byte   0
000062r 2                 .else
000062r 2  0D 0A 0D 0A          .byte   CR,LF,CR,LF
000066r 2                 .endif
000066r 2               QT_BASIC:
000066r 2                 .ifdef DB6502
000066r 2  44 42 36 35          .byte   "DB6502 BASIC VERSION 2C"
00006Ar 2  30 32 20 42  
00006Er 2  41 53 49 43  
00007Dr 2                 .endif
00007Dr 2                 .ifdef OSI
00007Dr 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
00007Dr 2                 .endif
00007Dr 2                 .ifdef KIM
00007Dr 2                       .byte   "MOS TECH 6502 BASIC V1.1"
00007Dr 2                 .endif
00007Dr 2                 .ifdef MICROTAN
00007Dr 2                       .byte   "MICROTAN BASIC"
00007Dr 2                 .endif
00007Dr 2                 .ifdef CBM1
00007Dr 2                       .byte   $13 ; HOME
00007Dr 2                       .byte   "*** COMMODORE BASIC ***"
00007Dr 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
00007Dr 2                 .endif
00007Dr 2                 .ifdef CBM2
00007Dr 2                       .byte   "### COMMODORE BASIC ###"
00007Dr 2                       .byte   CR,CR,0
00007Dr 2                 .endif
00007Dr 2                 .ifdef APPLE
00007Dr 2                       .byte   LF,CR,LF
00007Dr 2               		.byte	"APPLE BASIC V1.1"
00007Dr 2                 .endif
00007Dr 2                 .ifndef CONFIG_CBM_ALL
00007Dr 2  0D 0A                .byte   CR,LF
00007Fr 2                   .ifdef MICROTAN
00007Fr 2                       .byte   "(C) 1980 MICROSOFT"
00007Fr 2                   .else
00007Fr 2  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
000083r 2  52 49 47 48  
000087r 2  54 20 31 39  
00009Er 2                   .endif
00009Er 2  0D 0A 00             .byte   CR,LF,0
0000A1r 2                 .endif
0000A1r 2               .endif ;/* KBD */
0000A1r 2               
0000A1r 1               .include "extra.s"
0000A1r 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef MICROTAN
000000r 2               .include "microtan_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef DB6502
000000r 2               .include "db6502_extra.s"
000000r 3                     .include "utils.inc"
000000r 4                       .import _delay_ms
000000r 4                       .import _delay_sec
000000r 4                       .import _convert_to_hex
000000r 4                       .import convert_to_hex
000000r 4                       .import _convert_hex_to_dec
000000r 4                       .import convert_hex_to_dec
000000r 4               
000000r 4                       .macro convert_hex_to_dec hex_num, dec_buffer
000000r 4                       .if (.match (.left (1, {dec_buffer}), #))
000000r 4                           ; immediate mode
000000r 4                           lda #<(.right (.tcount ({dec_buffer})-1, {dec_buffer}))
000000r 4                           sta ptr1
000000r 4                           lda #>(.right (.tcount ({dec_buffer})-1, {dec_buffer}))
000000r 4                           sta ptr1+1
000000r 4                       .else
000000r 4                           ; assume absolute or zero page
000000r 4                           lda dec_buffer
000000r 4                           sta ptr1
000000r 4                           lda 1+(dec_buffer)
000000r 4                           sta ptr1+1
000000r 4                       .endif
000000r 4                       .if (.match (.left (1, {hex_num}), #))
000000r 4                           ; immediate mode
000000r 4                           lda #<(.right (.tcount ({hex_num})-1, {hex_num}))
000000r 4                           ldx #>(.right (.tcount ({hex_num})-1, {hex_num}))
000000r 4                       .else
000000r 4                           ; assume absolute or zero page
000000r 4                           lda hex_num
000000r 4                           ldx 1+(hex_num)
000000r 4                       .endif
000000r 4                       jsr convert_hex_to_dec
000000r 4                       .endmacro
000000r 4               
000000r 3                     .include "lcd.inc"
000000r 4                       .include "zeropage.inc"
000000r 5               .globalzp sp
000000r 5               .globalzp sreg
000000r 5               .globalzp regsave
000000r 5               .globalzp tmp1
000000r 5               .globalzp tmp2
000000r 5               .globalzp tmp3
000000r 5               .globalzp tmp4
000000r 5               .globalzp ptr1
000000r 5               .globalzp ptr2
000000r 5               .globalzp ptr3
000000r 5               .globalzp ptr4
000000r 5               .globalzp lcd_temp_char1
000000r 5               .globalzp lcd_temp_char2
000000r 5               .globalzp lcd_temp_char3
000000r 5               .globalzp acia_conn
000000r 5               .globalzp acia_rx_rptr
000000r 5               .globalzp acia_rx_wptr
000000r 5               .globalzp acia_tx_rptr
000000r 5               .globalzp acia_tx_wptr
000000r 5               .globalzp keyboard_conn
000000r 5               .globalzp keyboard_rptr
000000r 5               .globalzp keyboard_wptr
000000r 5               .globalzp tty_config
000000r 5               .globalzp system_break_flag
000000r 5               .globalzp system_break_address
000000r 5               .globalzp system_break_sp
000000r 5               .globalzp user_break_address
000000r 5               .globalzp user_break_sp
000000r 5               .globalzp user_irq_address
000000r 5               .globalzp zp_sd_address  ; 2 bytes
000000r 5               .globalzp zp_sd_currentsector  ; 4 bytes
000000r 5               .globalzp zp_fat32_variables  ; 24 bytes
000000r 5               
000000r 5               
000000r 5               
000000r 4                       .import _lcd_init
000000r 4                       .import _lcd_print
000000r 4                       .import _lcd_print_char
000000r 4                       .import _lcd_clear
000000r 4                       .import _lcd_get_position
000000r 4                       .import lcd_get_position
000000r 4                       .import _lcd_set_position
000000r 4                       .import lcd_set_position
000000r 4                       .import _lcd_backspace
000000r 4                       .import _lcd_newline
000000r 4                       .import _lcd_display_mode
000000r 4                       .import _lcd_scroll_up
000000r 4                       .import _lcd_scroll_down
000000r 4                       .import _lcd_define_char
000000r 4                       .import lcd_define_char
000000r 4               
000000r 4               ; Display mode command parameters
000000r 4               LCD_DM_CURSOR_NOBLINK   = %00000000
000000r 4               LCD_DM_CURSOR_BLINK     = %00000001
000000r 4               LCD_DM_CURSOR_OFF       = %00000000
000000r 4               LCD_DM_CURSOR_ON        = %00000010
000000r 4               LCD_DM_DISPLAY_OFF      = %00000000
000000r 4               LCD_DM_DISPLAY_ON       = %00000100
000000r 4               
000000r 4                       .macro write_lcd string
000000r 4                       pha
000000r 4                       phx
000000r 4                       .if (.match (.left (1, {string}), #))
000000r 4                           ; immediate mode
000000r 4                           lda #<(.right (.tcount ({string})-1, {string}))
000000r 4                           ldx #>(.right (.tcount ({string})-1, {string}))
000000r 4                       .else
000000r 4                           ; assume absolute or zero page
000000r 4                           lda string
000000r 4                           ldx 1+(string)
000000r 4                       .endif
000000r 4                       jsr _lcd_print
000000r 4                       plx
000000r 4                       pla
000000r 4                       .endmacro
000000r 4               
000000r 4                       .macro lcd_define_char code, char_map
000000r 4                       pha
000000r 4                       .if (.match (.left (1, {char_map}), #))
000000r 4                           ; immediate mode
000000r 4                           lda #<(.right (.tcount ({char_map})-1, {char_map}))
000000r 4                           sta ptr1
000000r 4                           lda #>(.right (.tcount ({char_map})-1, {char_map}))
000000r 4                           sta ptr1+1
000000r 4                       .else
000000r 4                           ; assume absolute or zero page
000000r 4                           lda string
000000r 4                           sta ptr1
000000r 4                           lda 1+(string)
000000r 4                           sta ptr1+1
000000r 4                       .endif
000000r 4                       lda #(code)
000000r 4                       jsr lcd_define_char
000000r 4                       pla
000000r 4                       .endmacro
000000r 4               
000000r 3                     .include "core.inc"
000000r 4                       .import _system_init
000000r 4                       .import _interrupt_handler
000000r 4                       .import _register_system_break
000000r 4                       .import _register_user_break
000000r 4                       .import _deregister_user_break
000000r 4                       .import _register_user_irq
000000r 4                       .import _deregister_user_irq
000000r 4               
000000r 4                       .macro register_system_break address
000000r 4                       .if (.match (.left (1, {address}), #))
000000r 4                           ; immediate mode
000000r 4                           lda #<(.right (.tcount ({address})-1, {address}))
000000r 4                           ldx #>(.right (.tcount ({address})-1, {address}))
000000r 4                       .else
000000r 4                           ; assume absolute or zero page
000000r 4                           lda address
000000r 4                           ldx 1+(address)
000000r 4                       .endif
000000r 4                       jsr _register_system_break
000000r 4                       .endmacro
000000r 4               
000000r 4                       .macro register_user_break address
000000r 4                       .if (.match (.left (1, {address}), #))
000000r 4                           ; immediate mode
000000r 4                           lda #<(.right (.tcount ({address})-1, {address}))
000000r 4                           ldx #>(.right (.tcount ({address})-1, {address}))
000000r 4                       .else
000000r 4                           ; assume absolute or zero page
000000r 4                           lda address
000000r 4                           ldx 1+(address)
000000r 4                       .endif
000000r 4                       jsr _register_user_break
000000r 4                       .endmacro
000000r 4               
000000r 4                       .macro register_user_irq address
000000r 4                       .if (.match (.left (1, {address}), #))
000000r 4                           ; immediate mode
000000r 4                           lda #<(.right (.tcount ({address})-1, {address}))
000000r 4                           ldx #>(.right (.tcount ({address})-1, {address}))
000000r 4                       .else
000000r 4                           ; assume absolute or zero page
000000r 4                           lda address
000000r 4                           ldx 1+(address)
000000r 4                       .endif
000000r 4                       jsr _register_user_irq
000000r 4                       .endmacro
000000r 4               
000000r 3                     .include "acia.inc"
000000r 4                       .include "zeropage.inc"
000000r 5               .globalzp sp
000000r 5               .globalzp sreg
000000r 5               .globalzp regsave
000000r 5               .globalzp tmp1
000000r 5               .globalzp tmp2
000000r 5               .globalzp tmp3
000000r 5               .globalzp tmp4
000000r 5               .globalzp ptr1
000000r 5               .globalzp ptr2
000000r 5               .globalzp ptr3
000000r 5               .globalzp ptr4
000000r 5               .globalzp lcd_temp_char1
000000r 5               .globalzp lcd_temp_char2
000000r 5               .globalzp lcd_temp_char3
000000r 5               .globalzp acia_conn
000000r 5               .globalzp acia_rx_rptr
000000r 5               .globalzp acia_rx_wptr
000000r 5               .globalzp acia_tx_rptr
000000r 5               .globalzp acia_tx_wptr
000000r 5               .globalzp keyboard_conn
000000r 5               .globalzp keyboard_rptr
000000r 5               .globalzp keyboard_wptr
000000r 5               .globalzp tty_config
000000r 5               .globalzp system_break_flag
000000r 5               .globalzp system_break_address
000000r 5               .globalzp system_break_sp
000000r 5               .globalzp user_break_address
000000r 5               .globalzp user_break_sp
000000r 5               .globalzp user_irq_address
000000r 5               .globalzp zp_sd_address  ; 2 bytes
000000r 5               .globalzp zp_sd_currentsector  ; 4 bytes
000000r 5               .globalzp zp_fat32_variables  ; 24 bytes
000000r 5               
000000r 5               
000000r 5               
000000r 4               
000000r 4                       .import _acia_init
000000r 4                       .import _handle_acia_irq
000000r 4                       .import _acia_is_data_available
000000r 4                       .import _acia_read_byte
000000r 4                       .import _acia_write_byte
000000r 4                       .import _acia_write_string
000000r 4                       .import ACIA_STATUS
000000r 4               
000000r 4               ACIA_DATA_AVAILABLE    = $01
000000r 4               ACIA_NO_DATA_AVAILABLE = $00
000000r 4               
000000r 4                       .macro write_acia string
000000r 4                       pha
000000r 4                       phx
000000r 4                       .if (.match (.left (1, {string}), #))
000000r 4                           ; immediate mode
000000r 4                           lda #<(.right (.tcount ({string})-1, {string}))
000000r 4                           ldx #>(.right (.tcount ({string})-1, {string}))
000000r 4                       .else
000000r 4                           ; assume absolute or zero page
000000r 4                           lda string
000000r 4                           ldx 1+(string)
000000r 4                       .endif
000000r 4                       jsr _acia_write_string
000000r 4                       plx
000000r 4                       pla
000000r 4                       .endmacro
000000r 4               
000000r 3                     .include "keyboard.inc"
000000r 4                     .import _keyboard_init
000000r 4                     .import _handle_keyboard_irq
000000r 4                     .import _keyboard_is_connected
000000r 4                     .import _keyboard_is_data_available
000000r 4                     .import _keyboard_read_char
000000r 4               
000000r 4               KEY_SPACE        = $20
000000r 4               KEY_ENTER        = $0d
000000r 4               KEY_ESCAPE       = $1b
000000r 4               KEY_BACKSPACE    = $7f
000000r 4               KEY_ARROW_UP     = $0b
000000r 4               KEY_ARROW_DOWN   = $0a
000000r 4               KEY_ARROW_LEFT   = $08
000000r 4               KEY_ARROW_RIGHT  = $15
000000r 4               KEY_TAB          = $09
000000r 4               KEY_PAGE_UP      = $19
000000r 4               KEY_PAGE_DOWN    = $1a
000000r 4               KEY_CTRL_X       = $18
000000r 4               
000000r 4               KEYBOARD_NOT_CONNECTED     = $00
000000r 4               KEYBOARD_CONNECTED         = $01
000000r 4               
000000r 4               KEYBOARD_NO_DATA_AVAILABLE = $00
000000r 4               KEYBOARD_DATA_AVAILABLE    = $01
000000r 4               
000000r 3                     .include "syscalls.inc"
000000r 4               ; Init routines
000000r 4                       .forceimport _syscall__system_init
000000r 4                       .forceimport _syscall__blink_init
000000r 4                       .forceimport _syscall__lcd_init
000000r 4                       .forceimport _syscall__acia_init
000000r 4                       .forceimport _syscall__keyboard_init
000000r 4               
000000r 4               ; Core routines
000000r 4                       .forceimport _syscall__register_user_break
000000r 4                       .forceimport _syscall__deregister_user_break
000000r 4                       .forceimport _syscall__register_user_irq
000000r 4                       .forceimport _syscall__deregister_user_irq
000000r 4               ; Common routines
000000r 4                       .forceimport _syscall__delay_ms
000000r 4                       .forceimport _syscall__delay_sec
000000r 4                       .forceimport _syscall__convert_to_hex
000000r 4                       .forceimport _syscall_convert_to_hex
000000r 4                       .forceimport _syscall__convert_hex_to_dec
000000r 4                       .forceimport _syscall_convert_hex_to_dec
000000r 4               ; Blink routines
000000r 4                       .forceimport _syscall__blink_led
000000r 4                       .forceimport _syscall__strobe_led
000000r 4               ; VIA routines
000000r 4                       .forceimport _syscall_via2_get_register
000000r 4                       .forceimport _syscall__via2_get_register
000000r 4                       .forceimport _syscall_via2_set_register
000000r 4                       .forceimport _syscall__via2_set_register
000000r 4               ; ACIA routines
000000r 4                       .forceimport _syscall__acia_is_data_available
000000r 4                       .forceimport _syscall__acia_read_byte
000000r 4                       .forceimport _syscall__acia_write_byte
000000r 4                       .forceimport _syscall__acia_write_string
000000r 4               ; Keyboard routines
000000r 4                       .forceimport _syscall__keyboard_is_connected
000000r 4                       .forceimport _syscall__keyboard_is_data_available
000000r 4                       .forceimport _syscall__keyboard_read_char
000000r 4               ; LCD routines
000000r 4                       .forceimport _syscall__lcd_print
000000r 4                       .forceimport _syscall__lcd_print_char
000000r 4                       .forceimport _syscall__lcd_clear
000000r 4                       .forceimport _syscall__lcd_get_position
000000r 4                       .forceimport _syscall_lcd_get_position
000000r 4                       .forceimport _syscall__lcd_set_position
000000r 4                       .forceimport _syscall_lcd_set_position
000000r 4                       .forceimport _syscall__lcd_backspace
000000r 4                       .forceimport _syscall__lcd_newline
000000r 4                       .forceimport _syscall__lcd_display_mode
000000r 4                       .forceimport _syscall__lcd_scroll_up
000000r 4                       .forceimport _syscall__lcd_scroll_down
000000r 4                       .forceimport _syscall__lcd_define_char
000000r 4                       .forceimport _syscall_lcd_define_char
000000r 4               ; XMODEM routines
000000r 4                       .forceimport _syscall__modem_send
000000r 4                       .forceimport _syscall__modem_receive
000000r 4               ; string routines
000000r 4                       .forceimport _syscall__strcopy
000000r 4                       .forceimport _syscall_strcopy
000000r 4                       .forceimport _syscall__strcompare
000000r 4                       .forceimport _syscall_strcompare
000000r 4                       .forceimport _syscall__strlength
000000r 4                       .forceimport _syscall__strtoupper
000000r 4                       .forceimport _syscall__strtolower
000000r 4                       .forceimport _syscall__strtriml
000000r 4                       .forceimport _syscall__strtrimr
000000r 4                       .forceimport _syscall__strtokenize
000000r 4                       .forceimport _syscall_strtokenize
000000r 4                       .forceimport _syscall__strgettoken
000000r 4               ; parser routines
000000r 4                       .forceimport _syscall__parse_onoff
000000r 4                       .forceimport _syscall_parse_onoff
000000r 4                       .forceimport _syscall__parse_hex_byte
000000r 4                       .forceimport _syscall_parse_hex_byte
000000r 4                       .forceimport _syscall__parse_hex_word
000000r 4                       .forceimport _syscall_parse_hex_word
000000r 4                       .forceimport _syscall__parse_dec_word
000000r 4                       .forceimport _syscall_parse_dec_word
000000r 4               ; tty routines
000000r 4                       .forceimport _syscall__tty_init
000000r 4                       .forceimport _syscall__tty_read_line
000000r 4                       .forceimport _syscall_tty_read_line
000000r 4                       .forceimport _syscall__tty_write
000000r 4                       .forceimport _syscall__tty_writeln
000000r 4                       .forceimport _syscall__tty_write_hex
000000r 4                       .forceimport _syscall__tty_write_dec
000000r 4                       .forceimport _syscall__tty_send_newline
000000r 4                       .forceimport _syscall__tty_send_character
000000r 4               ; menu routines
000000r 4                       .forceimport _syscall__run_menu
000000r 4                       .forceimport _syscall_run_menu
000000r 4                       .forceimport _syscall__setup_menuitem
000000r 4               ; Dpad routines
000000r 4                       .forceimport _syscall__dpad_init
000000r 4                       .forceimport _syscall__dpad_is_up
000000r 4                       .forceimport _syscall__dpad_is_down
000000r 4                       .forceimport _syscall__dpad_is_left
000000r 4                       .forceimport _syscall__dpad_is_right
000000r 4               ; SD card routines
000000r 4                       .forceimport _syscall__sd_init
000000r 4               
000000r 3               
000000r 3               .segment "CODE"
001C9Cr 3               ; ISCNTC:
001C9Cr 3               ;         jmp     MONISCNTC
001C9Cr 3               ;         nop
001C9Cr 3               ;         nop
001C9Cr 3               ;         nop
001C9Cr 3               ;         nop
001C9Cr 3               ;         lsr     a
001C9Cr 3               ;         bcc     RET2
001C9Cr 3               ;         jsr     GETLN
001C9Cr 3               ;         cmp     #$03
001C9Cr 3               ISCNTC:
001C9Cr 3  4C rr rr               jmp MONISCNTC
001C9Fr 3               ;!!! *used*to* run into "STOP"
001C9Fr 3               
001C9Fr 3               init:
001C9Fr 3               
001C9Fr 3  A2 FF              ldx #$ff
001CA1r 3  9A                 txs
001CA2r 3               
001CA2r 3  20 rr rr           jsr _system_init
001CA5r 3               
001CA5r 3  48 DA A9 rr        write_lcd #ms_basic
001CA9r 3  A2 rr 20 rr  
001CADr 3  rr FA 68     
001CB0r 3               
001CB0r 3  A9 07              lda #(TTY_CONFIG_INPUT_SERIAL | TTY_CONFIG_INPUT_KEYBOARD | TTY_CONFIG_OUTPUT_SERIAL)
001CB2r 3  20 rr rr           jsr _tty_init
001CB5r 3               
001CB5r 3                     ; lda #(ACIA_PARITY_DISABLE | ACIA_ECHO_DISABLE | ACIA_TX_INT_DISABLE_RTS_LOW | ACIA_RX_INT_DISABLE | ACIA_DTR_LOW)
001CB5r 3                     ; sta ACIA_COMMAND
001CB5r 3                     ; lda #(ACIA_STOP_BITS_1 | ACIA_DATA_BITS_8 | ACIA_CLOCK_INT | ACIA_BAUD_19200)
001CB5r 3                     ; sta ACIA_CONTROL
001CB5r 3               
001CB5r 3               ; Display startup message
001CB5r 3               ShowStartMsg:
001CB5r 3  48 DA A9 rr        writeln_tty #StartupMessage
001CB9r 3  A2 rr 20 rr  
001CBDr 3  rr FA 68     
001CC0r 3               	; LDA	StartupMessage,Y
001CC0r 3               	; BEQ	WaitForKeypress
001CC0r 3               	; JSR	MONCOUT
001CC0r 3               	; INY
001CC0r 3               	; BNE	ShowStartMsg
001CC0r 3               
001CC0r 3               ; Wait for a cold/warm start selection
001CC0r 3               WaitForKeypress:
001CC0r 3  20 rr rr     	JSR	MONRDKEY
001CC3r 3  90 FB        	BCC	WaitForKeypress
001CC5r 3               
001CC5r 3  29 DF        	AND	#$DF			; Make upper case
001CC7r 3  C9 57        	CMP	#'W'			; compare with [W]arm start
001CC9r 3  F0 07        	BEQ	WarmStart
001CCBr 3               
001CCBr 3  C9 43        	CMP	#'C'			; compare with [C]old start
001CCDr 3  D0 E6        	BNE	ShowStartMsg
001CCFr 3               
001CCFr 3  4C rr rr     	JMP	COLD_START	; BASIC cold start
001CD2r 3               
001CD2r 3               WarmStart:
001CD2r 3  4C rr rr     	JMP	RESTART		; BASIC warm start
001CD5r 3               
001CD5r 3               MONCOUT:
001CD5r 3               ;	PHA
001CD5r 3               ; SerialOutWait:
001CD5r 3               ; 	LDA	ACIA_STATUS
001CD5r 3               ; 	AND	#ACIA_STATUS_TX_EMPTY
001CD5r 3               ; 	BEQ	SerialOutWait
001CD5r 3               ; 	PLA
001CD5r 3               ; 	STA	ACIA_DATA
001CD5r 3  20 rr rr         jsr _tty_send_character
001CD8r 3  60           	RTS
001CD9r 3               
001CD9r 3               MONRDKEY:
001CD9r 3               ; 	LDA	ACIA_STATUS
001CD9r 3               ; 	AND	#ACIA_STATUS_RX_FULL
001CD9r 3               ; 	BEQ	NoDataIn
001CD9r 3               ; 	LDA	ACIA_DATA
001CD9r 3               ; 	SEC		; Carry set if key available
001CD9r 3               ; 	RTS
001CD9r 3               ; NoDataIn:
001CD9r 3               ; 	CLC		; Carry clear if no key pressed
001CD9r 3  20 rr rr       jsr _acia_is_data_available
001CDCr 3                 ; skip, no data available at this point
001CDCr 3  C9 00          cmp #(ACIA_NO_DATA_AVAILABLE)
001CDEr 3  F0 06          beq isPS2KeyboardAvailable
001CE0r 3  20 rr rr       jsr _acia_read_byte
001CE3r 3  4C rr rr       jmp donereading
001CE6r 3               isPS2KeyboardAvailable:
001CE6r 3  20 rr rr       jsr _keyboard_is_data_available
001CE9r 3  C9 00          cmp #(KEYBOARD_NO_DATA_AVAILABLE)
001CEBr 3  F0 05          beq NoDataIn
001CEDr 3  20 rr rr       jsr _keyboard_read_char
001CF0r 3               donereading:
001CF0r 3  38             sec
001CF1r 3  60             rts
001CF2r 3               NoDataIn:
001CF2r 3  18             clc
001CF3r 3  60           	RTS
001CF4r 3               
001CF4r 3               MONISCNTC:
001CF4r 3  20 rr rr     	JSR	MONRDKEY
001CF7r 3  90 06        	BCC	NotCTRLC ; If no key pressed then exit
001CF9r 3  C9 03        	CMP	#3
001CFBr 3  D0 02        	BNE	NotCTRLC ; if CTRL-C not pressed then exit
001CFDr 3  38           	SEC		; Carry set if control C pressed
001CFEr 3  60           	RTS
001CFFr 3               NotCTRLC:
001CFFr 3  18           	CLC		; Carry clear if control C not pressed
001D00r 3  60           	RTS
001D01r 3               
001D01r 3               ; SEND_BACKSPACE:
001D01r 3               ;   PHA
001D01r 3               ;   PHX
001D01r 3               ;   LDX #$FF
001D01r 3               ; BackspaceLoop:
001D01r 3               ;   INX
001D01r 3               ;   LDA Backspace,X
001D01r 3               ;   BEQ BackspaceLoopEnd
001D01r 3               ;   JSR MONCOUT
001D01r 3               ;   BNE BackspaceLoop
001D01r 3               ; BackspaceLoopEnd:
001D01r 3               ;   PLX
001D01r 3               ;   PLA
001D01r 3               ;   RTS
001D01r 3               
001D01r 3               StartupMessage:
001D01r 3  0C 43 6F 6C  	.byte	$0C,"Cold [C] or warm [W] start?",$0D,$0A,$00
001D05r 3  64 20 5B 43  
001D09r 3  5D 20 6F 72  
001D20r 3               
001D20r 3               Backspace:
001D20r 3  1B 5B 44 20    .byte $1B,"[D ",$1B,"[D",$00
001D24r 3  1B 5B 44 00  
001D28r 3               
001D28r 3               ms_basic:
001D28r 3  4D 69 63 72    .asciiz "Microsoft BASIC"
001D2Cr 3  6F 73 6F 66  
001D30r 3  74 20 42 41  
001D38r 3               
001D38r 3               LOAD:
001D38r 3  60           	RTS
001D39r 3               
001D39r 3               SAVE:
001D39r 3  60           	RTS
001D3Ar 3               
001D3Ar 3               .segment "VECTORS"
000000r 3               
000000r 3  00 00              .word   $0000
000002r 3  rr rr              .word   init
000004r 3  rr rr              .word   _interrupt_handler
000006r 3               
000006r 2               .endif
000006r 2               
000006r 1               
