ca65 V2.18 - Git N/A
Main file   : ../../common/source/../../load/22_msbasic/msbasic.s
Current file: ../../common/source/../../load/22_msbasic/msbasic.s

000000r 1               ; Microsoft BASIC for 6502
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ; This is a single integrated assembly source tree that can generate seven different versions of
000000r 1               ; Microsoft BASIC for 6502.
000000r 1               ;
000000r 1               ; By running ./make.sh, this will generate all versions and compare them to the original files
000000r 1               ; byte by byte. The CC65 compiler suite is need to build this project.
000000r 1               ;
000000r 1               ; These are the first eight (known) versions of Microsoft BASIC for 6502:
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions   .define
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; Commodore BASIC 1     1977                    Y      Y          ZP          CBM
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -        CONFIG_10A
000000r 1               ; AppleSoft I           1977     1.1            N      Y        $0200         Apple      CONFIG_11
000000r 1               ; KIM BASIC             1977     1.1            N      Y          ZP            -        CONFIG_11A
000000r 1               ; AppleSoft II          1978                    Y      Y        $0200         Apple      CONFIG_2
000000r 1               ; Commodore BASIC 2     1979                    Y      Y        $0200          CBM       CONFIG_2A
000000r 1               ; KBD BASIC             1982                    Y      N        $0700          KBD       CONFIG_2B
000000r 1               ; MicroTAN              1980                    Y      Y          ZP            -        CONFIG_2C
000000r 1               ;
000000r 1               ; (Note that this assembly source cannot (yet) build AppleSoft II.)
000000r 1               ;
000000r 1               ; This lists the versions in the order in which they were forked from the Microsoft source base.
000000r 1               ; Commodore BASIC 1, as used on the original PET is the oldest known version of Microsoft BASIC
000000r 1               ; for 6502. It contains some additions to Microsoft's version, like Commodore-style file I/O.
000000r 1               ;
000000r 1               ; The CONFIG_n defines specify what Microsoft-version the OEM version is based on. If CONFIG_2B
000000r 1               ; is defined, for example, CONFIG_2A, CONFIG_2, CONFIG_11A, CONFIG_11 and CONFIG_10A will be
000000r 1               ; defined as well, and all bugfixes up to version 2B will be enabled.
000000r 1               ;
000000r 1               ; The following symbols can be defined in addition:
000000r 1               ;
000000r 1               ; CONFIG_CBM1_PATCHES				jump out into CBM1's binary patches instead of doing the right thing inline
000000r 1               ; CONFIG_CBM_ALL					add all Commodore-specific additions except file I/O
000000r 1               ; CONFIG_DATAFLG					?
000000r 1               ; CONFIG_EASTER_EGG					include the CBM2 "WAIT 6502" easter egg
000000r 1               ; CONFIG_FILE						support Commodore PRINT#, INPUT#, GET#, CMD
000000r 1               ; CONFIG_IO_MSB						all I/O has bit #7 set
000000r 1               ; CONFIG_MONCOUT_DESTROYS_Y			Y needs to be preserved when calling MONCOUT
000000r 1               ; CONFIG_NO_CR						terminal doesn't need explicit CRs on line ends
000000r 1               ; CONFIG_NO_LINE_EDITING			disable support for Microsoft-style "@", "_", BEL etc.
000000r 1               ; CONFIG_NO_POKE					don't support PEEK, POKE and WAIT
000000r 1               ; CONFIG_NO_READ_Y_IS_ZERO_HACK		don't do a very volatile trick that saves one byte
000000r 1               ; CONFIG_NULL						support for the NULL statement
000000r 1               ; CONFIG_PEEK_SAVE_LINNUM			preserve LINNUM on a PEEK
000000r 1               ; CONFIG_PRINTNULLS					whether PRINTNULLS does anything
000000r 1               ; CONFIG_PRINT_CR					print CR when line end reached
000000r 1               ; CONFIG_RAM						optimizations for RAM version of BASIC, only use on 1.x
000000r 1               ; CONFIG_ROR_WORKAROUND				use workaround for buggy 6502s from 1975/1976; not safe for CONFIG_SMALL!
000000r 1               ; CONFIG_SAFE_NAMENOTFOUND			check both bytes of the caller's address in NAMENOTFOUND
000000r 1               ; CONFIG_SCRTCH_ORDER				where in the init code to call SCRTCH
000000r 1               ; CONFIG_SMALL						use 6 digit FP instead of 9 digit, use 2 character error messages, don't have GET
000000r 1               ;
000000r 1               ; Changing symbol definitions can alter an existing base configuration, but it not guaranteed to assemble
000000r 1               ; or work correctly.
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               ;.debuginfo +
000000r 1               
000000r 1               .setcpu "65C02"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 2               .elseif .def(db6502)
000000r 2               DB6502 := 1
000000r 2               .include "defines_db6502.s"
000000r 3               .import __USERRAM_START__
000000r 3               
000000r 3               ; configuration
000000r 3               CONFIG_2C := 1
000000r 3               
000000r 3               CONFIG_DATAFLG := 1
000000r 3               CONFIG_NULL := 1
000000r 3               CONFIG_PRINT_CR := 1 ; print CR when line end reached
000000r 3               CONFIG_SCRTCH_ORDER := 3
000000r 3               CONFIG_SMALL := 1
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $0D
000000r 3               ZP_START3 = $5B
000000r 3               ZP_START4 = $65
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR             := $000A
000000r 3               
000000r 3               ; inputbuffer
000000r 3               INPUTBUFFER     := $0900
000000r 3               STACK2          := TXTBUFFER
000000r 3               ; constants
000000r 3               ; STACK_TOP		:= $FC
000000r 3               SPACE_FOR_GOSUB := $33
000000r 3               NULL_MAX		:= $0A
000000r 3               WIDTH			:= 72
000000r 3               WIDTH2			:= 56
000000r 3               
000000r 3               ; memory layout
000000r 3               RAMSTART2		:= __USERRAM_START__
000000r 3               
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               ; CR=13
000000r 2               ; LF=10
000000r 2               CR = $0d
000000r 2               LF = $0a
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2               .ifndef DB6502
000000r 2                       .segment "VECTORS"
000000r 2               .else
000000r 2                       .segment "BAS_VEC"
000000r 2               .endif
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2               .ifndef DB6502
000000r 2                       .segment "KEYWORDS"
000000r 2               .else
000000r 2                       .segment "BAS_KEY"
000000r 2               .endif
000000r 2               TOKEN_NAME_TABLE:
000000r 2               .ifndef DB6502
000000r 2               		.segment "DUMMY"
000000r 2               .else
000000r 2                   .segment "BAS_DUM"
000000r 2               .endif
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2               .ifndef DB6502
000000r 2                       .segment "DUMMY"
000000r 2               .else
000000r 2                       .segment "BAS_DUM"
000000r 2               .endif
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               .ifndef DB6502
000000r 2               		.segment "KEYWORDS"
000000r 2               .else
000000r 2               		.segment "BAS_KEY"
000000r 2               .endif
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2               .ifndef DB6502
000000r 2                       .segment "VECTORS"
000000r 2               .else
000000r 2                       .segment "BAS_VEC"
000000r 2               .endif
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2               .ifndef DB6502
000000r 2                       .segment "VECTORS"
000000r 2               .else
000000r 2                       .segment "BAS_VEC"
000000r 2               .endif
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2               .ifndef DB6502
000000r 2                       .segment "DUMMY"
000000r 2               .else
000000r 2                       .segment "BAS_DUM"
000000r 2               .endif
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2               .ifndef DB6502
000000r 2                       .segment "ERROR"
000000r 2               .else
000000r 2                       .segment "BAS_ERR"
000000r 2               .endif
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2               .ifndef DB6502
000000r 2                       .segment "ERROR"
000000r 2               .else
000000r 2                       .segment "BAS_ERR"
000000r 2               .endif
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "basic_zp.s"
000000r 2               
000000r 2               ;.feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               ;.org ZP_START1
000000r 2               
000000r 2               GORESTART:
000000r 2  xx xx xx     	.res 3
000003r 2               GOSTROUT:
000003r 2  xx xx xx     	.res 3
000006r 2               GOAYINT:
000006r 2  xx xx        	.res 2
000008r 2               GOGIVEAYF:
000008r 2  xx xx        	.res 2
00000Ar 2               
00000Ar 2               ;.org ZP_START2
00000Ar 2               Z15:
00000Ar 2  xx           	.res 1
00000Br 2               .ifndef POSX; allow override
00000Br 2               POSX:
00000Br 2               .endif
00000Br 2  xx           	.res 1
00000Cr 2               .ifndef Z17; allow override
00000Cr 2               Z17:
00000Cr 2               .endif
00000Cr 2  xx           	.res 1
00000Dr 2               .ifndef Z18; allow override
00000Dr 2               Z18:
00000Dr 2               .endif
00000Dr 2  xx           	.res 1
00000Er 2               LINNUM:
00000Er 2               .ifndef TXPSV; allow override
00000Er 2               TXPSV:
00000Er 2               .endif
00000Er 2  xx xx        	.res 2
000010r 2               .ifndef INPUTBUFFER; allow override
000010r 2               INPUTBUFFER:
000010r 2               .endif
000010r 2               .ifdef DB6502
000010r 2               EXITFLAG:
000010r 2  xx             .res 1
000011r 2               INIT_STACK:
000011r 2  xx             .res 1
000012r 2               .endif
000012r 2               ;.org ZP_START3
000012r 2               
000012r 2               CHARAC:
000012r 2  xx           	.res 1
000013r 2               ENDCHR:
000013r 2  xx           	.res 1
000014r 2               EOLPNTR:
000014r 2  xx           	.res 1
000015r 2               DIMFLG:
000015r 2  xx           	.res 1
000016r 2               VALTYP:
000016r 2               .ifdef CONFIG_SMALL
000016r 2  xx           	.res 1
000017r 2               .else
000017r 2               	.res 2
000017r 2               .endif
000017r 2               DATAFLG:
000017r 2  xx           	.res 1
000018r 2               SUBFLG:
000018r 2  xx           	.res 1
000019r 2               INPUTFLG:
000019r 2  xx           	.res 1
00001Ar 2               CPRMASK:
00001Ar 2  xx           	.res 1
00001Br 2               Z14:
00001Br 2  xx           	.res 1
00001Cr 2               
00001Cr 2               ;.org ZP_START4
00001Cr 2               
00001Cr 2               TEMPPT:
00001Cr 2  xx           	.res 1
00001Dr 2               LASTPT:
00001Dr 2  xx xx        	.res 2
00001Fr 2               TEMPST:
00001Fr 2  xx xx xx xx  	.res 9
000023r 2  xx xx xx xx  
000027r 2  xx           
000028r 2               INDEX:
000028r 2  xx xx        	.res 2
00002Ar 2               DEST:
00002Ar 2  xx xx        	.res 2
00002Cr 2               RESULT:
00002Cr 2  xx xx xx xx  	.res BYTES_FP
000030r 2               RESULT_LAST = RESULT + BYTES_FP-1
000030r 2               TXTTAB:
000030r 2  xx xx        	.res 2
000032r 2               VARTAB:
000032r 2  xx xx        	.res 2
000034r 2               ARYTAB:
000034r 2  xx xx        	.res 2
000036r 2               STREND:
000036r 2  xx xx        	.res 2
000038r 2               FRETOP:
000038r 2  xx xx        	.res 2
00003Ar 2               FRESPC:
00003Ar 2  xx xx        	.res 2
00003Cr 2               MEMSIZ:
00003Cr 2  xx xx        	.res 2
00003Er 2               CURLIN:
00003Er 2  xx xx        	.res 2
000040r 2               OLDLIN:
000040r 2  xx xx        	.res 2
000042r 2               OLDTEXT:
000042r 2  xx xx        	.res 2
000044r 2               Z8C:
000044r 2  xx xx        	.res 2
000046r 2               DATPTR:
000046r 2  xx xx        	.res 2
000048r 2               INPTR:
000048r 2  xx xx        	.res 2
00004Ar 2               VARNAM:
00004Ar 2  xx xx        	.res 2
00004Cr 2               VARPNT:
00004Cr 2  xx xx        	.res 2
00004Er 2               FORPNT:
00004Er 2  xx xx        	.res 2
000050r 2               LASTOP:
000050r 2  xx xx        	.res 2
000052r 2               CPRTYP:
000052r 2  xx           	.res 1
000053r 2               FNCNAM:
000053r 2               TEMP3:
000053r 2  xx xx        	.res 2
000055r 2               DSCPTR:
000055r 2               .ifdef CONFIG_SMALL
000055r 2  xx xx        		.res 2
000057r 2               .else
000057r 2               		.res 3
000057r 2               .endif
000057r 2               DSCLEN:
000057r 2  xx xx        	.res 2
000059r 2               .ifndef JMPADRS ; allow override
000059r 2               JMPADRS			:= DSCLEN + 1
000059r 2               .endif
000059r 2               Z52:
000059r 2  xx           	.res 1
00005Ar 2               ARGEXTENSION:
00005Ar 2               .ifndef CONFIG_SMALL
00005Ar 2               	.res 1
00005Ar 2               .endif
00005Ar 2               TEMP1:
00005Ar 2  xx           	.res 1
00005Br 2               HIGHDS:
00005Br 2  xx xx        	.res 2
00005Dr 2               HIGHTR:
00005Dr 2  xx xx        	.res 2
00005Fr 2               .ifndef CONFIG_SMALL
00005Fr 2               TEMP2:
00005Fr 2               	.res 1
00005Fr 2               .endif
00005Fr 2               INDX:
00005Fr 2               TMPEXP:
00005Fr 2               .ifdef CONFIG_SMALL
00005Fr 2               TEMP2:
00005Fr 2               .endif
00005Fr 2  xx           	.res 1
000060r 2               EXPON:
000060r 2  xx           	.res 1
000061r 2               LOWTR:
000061r 2               .ifndef LOWTRX ; allow override
000061r 2               LOWTRX:
000061r 2               .endif
000061r 2  xx           	.res 1
000062r 2               EXPSGN:
000062r 2  xx           	.res 1
000063r 2               FAC:
000063r 2  xx xx xx xx  	.res BYTES_FP
000067r 2               FAC_LAST = FAC + BYTES_FP-1
000067r 2               FACSIGN:
000067r 2  xx           	.res 1
000068r 2               SERLEN:
000068r 2  xx           	.res 1
000069r 2               SHIFTSIGNEXT:
000069r 2  xx           	.res 1
00006Ar 2               ARG:
00006Ar 2  xx xx xx xx  	.res BYTES_FP
00006Er 2               ARG_LAST = ARG + BYTES_FP-1
00006Er 2               ARGSIGN:
00006Er 2  xx           	.res 1
00006Fr 2               STRNG1:
00006Fr 2  xx xx        	.res 2
000071r 2               SGNCPR = STRNG1
000071r 2               FACEXTENSION = STRNG1+1
000071r 2               STRNG2:
000071r 2  xx xx        	.res 2
000073r 2               .ifndef DB6502
000073r 2               CHRGET:
000073r 2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
000073r 2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
000073r 2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
000073r 2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
000073r 2               .else
000073r 2               TXTPTR:
000073r 2  xx xx          .res 2
000075r 2               RNDSEED:
000075r 2  xx xx xx xx    .res 4
000079r 2               .endif
000079r 2               
000079r 2               
000079r 1               
000079r 1               .include "header.s"
000079r 2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef AIM65
000000r 2                       jmp     COLD_START
000000r 2                       jmp     RESTART
000000r 2                       .word   AYINT,GIVAYF
000000r 2               .endif
000000r 2               .ifdef SYM1
000000r 2                       jmp     PR_WRITTEN_BY
000000r 2               .endif
000000r 2               
000000r 1               .include "token.s"
000000r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2               		keyword_rts "PLT", PLT
000007r 2               .else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2               .ifdef DB6502
000009r 2  rr rr 45 58      keyword_rts "EXIT", EXIT_BASIC
00000Dr 2  49 D4 xx     
00000Ar 2               .endif
00000Ar 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Er 2  CE xx        
00000Br 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Fr 2  xx           
00000Cr 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
000010r 2  53 54 4F 52  
000014r 2  C5 xx        
00000Dr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000011r 2  53 55 C2 xx  
00000Er 2  rr rr 52 45  		keyword_rts "RETURN", POP
000012r 2  54 55 52 CE  
000016r 2  xx           
00000Fr 2               .ifdef APPLE
00000Fr 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Fr 2               .else
00000Fr 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000013r 2  CD xx        
000010r 2               .endif
000010r 2  rr rr 53 54  		keyword_rts "STOP", STOP
000014r 2  4F D0 xx     
000011r 2  rr rr 4F CE  		keyword_rts "ON", ON
000015r 2  xx           
000012r 2               .ifdef CONFIG_NULL
000012r 2  rr rr 4E 55  		keyword_rts "NULL", NULL
000016r 2  4C CC xx     
000013r 2               .endif
000013r 2               .ifdef KBD
000013r 2               		keyword_rts "PLOD", PLOD
000013r 2               		keyword_rts "PSAV", PSAV
000013r 2               		keyword_rts "VLOD", VLOD
000013r 2               		keyword_rts "VSAV", VSAV
000013r 2               .endif
000013r 2               .ifndef CONFIG_NO_POKE
000013r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000017r 2  49 D4 xx     
000014r 2               .endif
000014r 2               .ifndef KBD
000014r 2  rr rr 4C 4F  		keyword_rts "LOAD", LOAD
000018r 2  41 C4 xx     
000015r 2  rr rr 53 41  		keyword_rts "SAVE", SAVE
000019r 2  56 C5 xx     
000016r 2               .endif
000016r 2               .ifdef CONFIG_CBM_ALL
000016r 2               		keyword_rts "VERIFY", VERIFY
000016r 2               .endif
000016r 2  rr rr 44 45  		keyword_rts "DEF", DEF
00001Ar 2  C6 xx        
000017r 2               .ifdef KBD
000017r 2               		keyword_rts "SLOD", SLOD
000017r 2               .endif
000017r 2               .ifndef CONFIG_NO_POKE
000017r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Br 2  4B C5 xx     
000018r 2               .endif
000018r 2               .ifdef CONFIG_FILE
000018r 2               		keyword_rts "PRINT#", PRINTH
000018r 2               .endif
000018r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Cr 2  49 4E D4 xx  
000019r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Dr 2  4E D4 xx     
00001Ar 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Er 2  53 D4 xx     
00001Br 2               .ifdef CONFIG_CBM_ALL
00001Br 2               		keyword_rts "CLR", CLEAR
00001Br 2               .else
00001Br 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Fr 2  45 41 D2 xx  
00001Cr 2               .endif
00001Cr 2               .ifdef CONFIG_FILE
00001Cr 2               		keyword_rts "CMD", CMD
00001Cr 2               		keyword_rts "SYS", SYS
00001Cr 2               		keyword_rts "OPEN", OPEN
00001Cr 2               		keyword_rts "CLOSE", CLOSE
00001Cr 2               .endif
00001Cr 2               .ifndef CONFIG_SMALL
00001Cr 2               		keyword_rts "GET", GET
00001Cr 2               .endif
00001Cr 2               .ifdef KBD
00001Cr 2               		keyword_rts "PRT", PRT
00001Cr 2               .endif
00001Cr 2  rr rr 4E 45  		keyword_rts "NEW", NEW
000020r 2  D7 xx        
00001Dr 2               
00001Dr 2               		count_tokens
00001Dr 2               
00001Dr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000021r 2  xx           
00001Er 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Fr 2  46 CE xx     		keyword	"FN", TOKEN_FN
000020r 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000024r 2  xx           
000021r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000025r 2  xx           
000022r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000023r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000027r 2  xx           
000024r 2  AB xx        		keyword	"+", TOKEN_PLUS
000025r 2  AD xx        		keyword	"-", TOKEN_MINUS
000026r 2  AA xx        		keyword	"*"
000027r 2  AF xx        		keyword	"/"
000028r 2               .ifdef KBD
000028r 2               		keyword	"#"
000028r 2               .else
000028r 2  DE xx        		keyword	"^"
000029r 2               .endif
000029r 2  41 4E C4 xx  		keyword	"AND"
00002Ar 2  4F D2 xx     		keyword	"OR"
00002Br 2  BE xx        		keyword	">", TOKEN_GREATER
00002Cr 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Dr 2  BC xx        		keyword	"<"
00002Er 2               
00002Er 2               .ifndef DB6502
00002Er 2                       .segment "VECTORS"
00002Er 2               .else
00002Er 2                       .segment "BAS_VEC"
00003Ar 2               .endif
00003Ar 2               UNFNC:
00003Ar 2               
00003Ar 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Er 2  CE xx        
00002Fr 2  rr rr 49 4E  		keyword_addr "INT", INT
000033r 2  D4 xx        
000030r 2  rr rr 41 42  		keyword_addr "ABS", ABS
000034r 2  D3 xx        
000031r 2               .ifdef KBD
000031r 2               		keyword_addr "VER", VER
000031r 2               .endif
000031r 2               .ifndef CONFIG_NO_POKE
000031r 2                 .ifdef CONFIG_RAM
000031r 2               		keyword_addr "USR", IQERR
000031r 2                 .else
000031r 2  0A 00 55 53  		keyword_addr "USR", USR, TOKEN_USR
000035r 2  D2 xx        
000032r 2                 .endif
000032r 2               .endif
000032r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000036r 2  C5 xx        
000033r 2  rr rr 50 4F  		keyword_addr "POS", POS
000037r 2  D3 xx        
000034r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000038r 2  D2 xx        
000035r 2  rr rr 52 4E  		keyword_addr "RND", RND
000039r 2  C4 xx        
000036r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
00003Ar 2  C7 xx        
000037r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Br 2  D0 xx        
000038r 2               .ifndef DB6502
000038r 2               .segment "VECTORS"
000038r 2               .else
000038r 2               .segment "BAS_VEC"
00004Er 2               .endif
00004Er 2               UNFNC_COS:
00004Er 2  rr rr 43 4F  		keyword_addr "COS", COS
000052r 2  D3 xx        
000039r 2               .ifndef DB6502
000039r 2               .segment "VECTORS"
000039r 2               .else
000039r 2               .segment "BAS_VEC"
000050r 2               .endif
000050r 2               UNFNC_SIN:
000050r 2  rr rr 53 49  		keyword_addr "SIN", SIN
000054r 2  CE xx        
00003Ar 2               .ifndef DB6502
00003Ar 2               .segment "VECTORS"
00003Ar 2               .else
00003Ar 2               .segment "BAS_VEC"
000052r 2               .endif
000052r 2               UNFNC_TAN:
000052r 2  rr rr 54 41  		keyword_addr "TAN", TAN
000056r 2  CE xx        
00003Br 2               .ifndef DB6502
00003Br 2               .segment "VECTORS"
00003Br 2               .else
00003Br 2               .segment "BAS_VEC"
000054r 2               .endif
000054r 2               UNFNC_ATN:
000054r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000058r 2  CE xx        
00003Cr 2               .ifdef KBD
00003Cr 2               		keyword_addr "GETC", GETC
00003Cr 2               .endif
00003Cr 2               .ifndef CONFIG_NO_POKE
00003Cr 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
000040r 2  45 CB xx     
00003Dr 2               .endif
00003Dr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000041r 2  CE xx        
00003Er 2  rr rr 53 54  		keyword_addr "STR$", STR
000042r 2  52 A4 xx     
00003Fr 2  rr rr 56 41  		keyword_addr "VAL", VAL
000043r 2  CC xx        
000040r 2  rr rr 41 53  		keyword_addr "ASC", ASC
000044r 2  C3 xx        
000041r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000045r 2  52 A4 xx     
000042r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000046r 2  46 54 A4 xx  
000043r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000047r 2  47 48 54 A4  
00004Br 2  xx           
000044r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000048r 2  44 A4 xx     
000045r 2               .ifdef CONFIG_2
000045r 2  47 CF xx     		keyword	"GO", TOKEN_GO
000046r 2               .endif
000046r 2               .ifndef DB6502
000046r 2                       .segment "KEYWORDS"
000046r 2               .else
000046r 2                       .segment "BAS_KEY"
0000E5r 2               .endif
0000E5r 2  00           		.byte   0
0000E6r 2               
0000E6r 2               .ifndef DB6502
0000E6r 2                       .segment "VECTORS"
0000E6r 2               .else
0000E6r 2                       .segment "BAS_VEC"
000068r 2               .endif
000068r 2               MATHTBL:
000068r 2  79                   .byte   $79
000069r 2  rr rr                .word   FADDT-1
00006Br 2  79                   .byte   $79
00006Cr 2  rr rr                .word   FSUBT-1
00006Er 2  7B                   .byte   $7B
00006Fr 2  rr rr                .word   FMULTT-1
000071r 2  7B                   .byte   $7B
000072r 2  rr rr                .word   FDIVT-1
000074r 2  7F                   .byte   $7F
000075r 2  rr rr                .word   FPWRT-1
000077r 2  50                   .byte   $50
000078r 2  rr rr                .word   TAND-1
00007Ar 2  46                   .byte   $46
00007Br 2  rr rr                .word   OR-1
00007Dr 2  7D                   .byte   $7D
00007Er 2  rr rr                .word   NEGOP-1
000080r 2  5A                   .byte   $5A
000081r 2  rr rr                .word   EQUOP-1
000083r 2  64                   .byte   $64
000084r 2  rr rr                .word   RELOPS-1
000086r 2               
000086r 1               .include "error.s"
000086r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2  4E C6        define_error ERR_NOFOR, "NF"
000002r 2  53 CE        define_error ERR_SYNTAX, "SN"
000004r 2  52 C7        define_error ERR_NOGOSUB, "RG"
000006r 2  4F C4        define_error ERR_NODATA, "OD"
000008r 2  46 C3        define_error ERR_ILLQTY, "FC"
00000Ar 2  4F D6        define_error ERR_OVERFLOW, "OV"
00000Cr 2  4F CD        define_error ERR_MEMFULL, "OM"
00000Er 2  55 D3        define_error ERR_UNDEFSTAT, "US"
000010r 2  42 D3        define_error ERR_BADSUBS, "BS"
000012r 2  44 C4        define_error ERR_REDIMD, "DD"
000014r 2  2F B0        define_error ERR_ZERODIV, "/0"
000016r 2  49 C4        define_error ERR_ILLDIR, "ID"
000018r 2  54 CD        define_error ERR_BADTYPE, "TM"
00001Ar 2  4C D3        define_error ERR_STRLONG, "LS"
00001Cr 2  53 D4        define_error ERR_FRMCPX, "ST"
00001Er 2  43 CE        define_error ERR_CANTCONT, "CN"
000020r 2  55 C6        define_error ERR_UNDEFFN, "UF"
000022r 2               .else
000022r 2               define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000022r 2               define_error ERR_SYNTAX, "SYNTAX"
000022r 2               define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
000022r 2               define_error ERR_NODATA, "OUT OF DATA"
000022r 2               define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000022r 2               .ifdef CBM1
000022r 2               	.byte 0,0,0,0,0
000022r 2               .endif
000022r 2               define_error ERR_OVERFLOW, "OVERFLOW"
000022r 2               define_error ERR_MEMFULL, "OUT OF MEMORY"
000022r 2               define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
000022r 2               define_error ERR_BADSUBS, "BAD SUBSCRIPT"
000022r 2               define_error ERR_REDIMD, "REDIM'D ARRAY"
000022r 2               define_error ERR_ZERODIV, "DIVISION BY ZERO"
000022r 2               define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000022r 2               define_error ERR_BADTYPE, "TYPE MISMATCH"
000022r 2               define_error ERR_STRLONG, "STRING TOO LONG"
000022r 2               .ifdef CONFIG_FILE
000022r 2                 .ifdef CBM1
000022r 2               define_error ERR_BADDATA, "BAD DATA"
000022r 2                 .else
000022r 2               define_error ERR_BADDATA, "FILE DATA"
000022r 2                 .endif
000022r 2               .endif
000022r 2               define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
000022r 2               define_error ERR_CANTCONT, "CAN'T CONTINUE"
000022r 2               define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
000022r 2               .endif
000022r 2               
000022r 1               .include "message.s"
000022r 2               ; global messages: "error", "in", "ready", "break"
000022r 2               
000022r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2                .ifndef AIM65
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2                       .byte   CR,0,0,"K",CR,LF
00000Cr 2                   .else
00000Cr 2               ;		.byte   CR,LF,"OK",CR,LF
00000Cr 2  0D 0A 4F 4B  		.byte   $0d, $0a, "OK", $0d, $0a
000010r 2  0D 0A        
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2                .endif
000013r 2               .endif
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN) || .def(AIM65)
000013r 2               		.byte CR,LF," BREAK"
000013r 2                       .byte   0
000013r 2               .else
000013r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
000017r 2  45 41 4B     
00001Ar 2  00                   .byte   0
00001Br 2               .endif
00001Br 2               
00001Br 1               .include "memory.s"
00001Br 2               ; generic stack and memory management code
00001Br 2               ; this code is identical across all versions of
00001Br 2               ; BASIC
00001Br 2               
00001Br 2               .segment "CODE"
00001Br 2               
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Br 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Br 2               ;
00001Br 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Br 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Br 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Br 2               ;
00001Br 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Br 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Br 2               ;
00001Br 2               ;	.EQ. IF FOUND
00001Br 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GTFORPNT:
00001Br 2  BA                   tsx
00001Cr 2  E8                   inx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2               L2279:
000020r 2  BD 01 01             lda     STACK+1,x
000023r 2  C9 81                cmp     #$81
000025r 2  D0 21                bne     L22A1
000027r 2  A5 rr                lda     FORPNT+1
000029r 2  D0 0A                bne     L228E
00002Br 2  BD 02 01             lda     STACK+2,x
00002Er 2  85 rr                sta     FORPNT
000030r 2  BD 03 01             lda     STACK+3,x
000033r 2  85 rr                sta     FORPNT+1
000035r 2               L228E:
000035r 2  DD 03 01             cmp     STACK+3,x
000038r 2  D0 07                bne     L229A
00003Ar 2  A5 rr                lda     FORPNT
00003Cr 2  DD 02 01             cmp     STACK+2,x
00003Fr 2  F0 07                beq     L22A1
000041r 2               L229A:
000041r 2  8A                   txa
000042r 2  18                   clc
000043r 2  69 10                adc     #BYTES_PER_FRAME
000045r 2  AA                   tax
000046r 2  D0 D8                bne     L2279
000048r 2               L22A1:
000048r 2  60                   rts
000049r 2               
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               ; MOVE BLOCK OF MEMORY UP
000049r 2               ;
000049r 2               ; ON ENTRY:
000049r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000049r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000049r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               BLTU:
000049r 2  20 rr rr             jsr     REASON
00004Cr 2  85 rr                sta     STREND
00004Er 2  84 rr                sty     STREND+1
000050r 2               BLTU2:
000050r 2  38                   sec
000051r 2  A5 rr                lda     HIGHTR
000053r 2  E5 rr                sbc     LOWTR
000055r 2  85 rr                sta     INDEX
000057r 2  A8                   tay
000058r 2  A5 rr                lda     HIGHTR+1
00005Ar 2  E5 rr                sbc     LOWTR+1
00005Cr 2  AA                   tax
00005Dr 2  E8                   inx
00005Er 2  98                   tya
00005Fr 2  F0 23                beq     L22DD
000061r 2  A5 rr                lda     HIGHTR
000063r 2  38                   sec
000064r 2  E5 rr                sbc     INDEX
000066r 2  85 rr                sta     HIGHTR
000068r 2  B0 03                bcs     L22C6
00006Ar 2  C6 rr                dec     HIGHTR+1
00006Cr 2  38                   sec
00006Dr 2               L22C6:
00006Dr 2  A5 rr                lda     HIGHDS
00006Fr 2  E5 rr                sbc     INDEX
000071r 2  85 rr                sta     HIGHDS
000073r 2  B0 08                bcs     L22D6
000075r 2  C6 rr                dec     HIGHDS+1
000077r 2  90 04                bcc     L22D6
000079r 2               L22D2:
000079r 2  B1 rr                lda     (HIGHTR),y
00007Br 2  91 rr                sta     (HIGHDS),y
00007Dr 2               L22D6:
00007Dr 2  88                   dey
00007Er 2  D0 F9                bne     L22D2
000080r 2  B1 rr                lda     (HIGHTR),y
000082r 2  91 rr                sta     (HIGHDS),y
000084r 2               L22DD:
000084r 2  C6 rr                dec     HIGHTR+1
000086r 2  C6 rr                dec     HIGHDS+1
000088r 2  CA                   dex
000089r 2  D0 F2                bne     L22D6
00008Br 2  60                   rts
00008Cr 2               
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Cr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               CHKMEM:
00008Cr 2  0A                   asl     a
00008Dr 2  69 33                adc     #SPACE_FOR_GOSUB
00008Fr 2  B0 35                bcs     MEMERR
000091r 2  85 rr                sta     INDEX
000093r 2  BA                   tsx
000094r 2  E4 rr                cpx     INDEX
000096r 2  90 2E                bcc     MEMERR
000098r 2  60                   rts
000099r 2               
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000099r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               REASON:
000099r 2  C4 rr                cpy     FRETOP+1
00009Br 2  90 28                bcc     L231E
00009Dr 2  D0 04                bne     L22FC
00009Fr 2  C5 rr                cmp     FRETOP
0000A1r 2  90 22                bcc     L231E
0000A3r 2               L22FC:
0000A3r 2  48                   pha
0000A4r 2  A2 08                ldx     #FAC-TEMP1-1
0000A6r 2  98                   tya
0000A7r 2               L2300:
0000A7r 2  48                   pha
0000A8r 2  B5 rr                lda     TEMP1,x
0000AAr 2  CA                   dex
0000ABr 2  10 FA                bpl     L2300
0000ADr 2  20 rr rr             jsr     GARBAG
0000B0r 2  A2 F8                ldx     #<(TEMP1-FAC+1)
0000B2r 2               L230B:
0000B2r 2  68                   pla
0000B3r 2  95 rr                sta     FAC,x
0000B5r 2  E8                   inx
0000B6r 2  30 FA                bmi     L230B
0000B8r 2  68                   pla
0000B9r 2  A8                   tay
0000BAr 2  68                   pla
0000BBr 2  C4 rr                cpy     FRETOP+1
0000BDr 2  90 06                bcc     L231E
0000BFr 2  D0 05                bne     MEMERR
0000C1r 2  C5 rr                cmp     FRETOP
0000C3r 2  B0 01                bcs     MEMERR
0000C5r 2               L231E:
0000C5r 2  60                   rts
0000C6r 2               
0000C6r 1               .include "program.s"
0000C6r 2               ; error
0000C6r 2               ; line input, line editing
0000C6r 2               ; tokenize
0000C6r 2               ; detokenize
0000C6r 2               ; BASIC program memory management
0000C6r 2               
0000C6r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C6r 2               
0000C6r 2               .segment "CODE"
0000C6r 2               
0000C6r 2               MEMERR:
0000C6r 2  A2 0C                ldx     #ERR_MEMFULL
0000C8r 2               
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ; HANDLE AN ERROR
0000C8r 2               ;
0000C8r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C8r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C8r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ERROR:
0000C8r 2  46 rr                lsr     Z14
0000CAr 2               .ifdef CONFIG_FILE
0000CAr 2                       lda     CURDVC    ; output
0000CAr 2                       beq     LC366     ; is screen
0000CAr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CAr 2                       lda     #$00
0000CAr 2                       sta     CURDVC
0000CAr 2               LC366:
0000CAr 2               .endif
0000CAr 2  20 rr rr             jsr     CRDO
0000CDr 2  20 rr rr             jsr     OUTQUES
0000D0r 2               L2329:
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D3r 2               .ifndef CONFIG_SMALL_ERROR
0000D3r 2                       pha
0000D3r 2                       and     #$7F
0000D3r 2               .endif
0000D3r 2  20 rr rr             jsr     OUTDO
0000D6r 2               .ifdef CONFIG_SMALL_ERROR
0000D6r 2  BD rr rr             lda     ERROR_MESSAGES+1,x
0000D9r 2                 .if .def(KBD) || .def(DB6502)
0000D9r 2  29 7F                and     #$7F
0000DBr 2                 .endif
0000DBr 2  20 rr rr             jsr     OUTDO
0000DEr 2               .else
0000DEr 2                       inx
0000DEr 2                       pla
0000DEr 2                       bpl     L2329
0000DEr 2               .endif
0000DEr 2  20 rr rr             jsr     STKINI
0000E1r 2  A9 rr                lda     #<QT_ERROR
0000E3r 2  A0 rr                ldy     #>QT_ERROR
0000E5r 2               
0000E5r 2               ; ----------------------------------------------------------------------------
0000E5r 2               ; PRINT STRING AT (Y,A)
0000E5r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E5r 2               ; FALL INTO WARM RESTART
0000E5r 2               ; ----------------------------------------------------------------------------
0000E5r 2               PRINT_ERROR_LINNUM:
0000E5r 2  20 rr rr             jsr     STROUT
0000E8r 2  A4 rr                ldy     CURLIN+1
0000EAr 2  C8                   iny
0000EBr 2  F0 03                beq     RESTART
0000EDr 2  20 rr rr             jsr     INPRT
0000F0r 2               
0000F0r 2               ; ----------------------------------------------------------------------------
0000F0r 2               ; WARM RESTART ENTRY
0000F0r 2               ; ----------------------------------------------------------------------------
0000F0r 2               RESTART:
0000F0r 2               .ifdef DB6502
0000F0r 2  24 rr                bit EXITFLAG
0000F2r 2  F0 01                beq KeepGoing
0000F4r 2  60                   rts
0000F5r 2               KeepGoing:
0000F5r 2               .endif
0000F5r 2               .ifdef KBD
0000F5r 2                       jsr     CRDO
0000F5r 2                       nop
0000F5r 2               L2351X:
0000F5r 2                       jsr     OKPRT
0000F5r 2               L2351:
0000F5r 2                       jsr     INLIN
0000F5r 2               LE28E:
0000F5r 2                       bpl     RESTART
0000F5r 2               .else
0000F5r 2  46 rr                lsr     Z14
0000F7r 2                .ifndef AIM65
0000F7r 2  A9 rr                lda     #<QT_OK
0000F9r 2  A0 rr                ldy     #>QT_OK
0000FBr 2                 .ifdef CONFIG_CBM_ALL
0000FBr 2                       jsr     STROUT
0000FBr 2                 .else
0000FBr 2  20 rr rr             jsr     GOSTROUT
0000FEr 2                 .endif
0000FEr 2                .else
0000FEr 2                       jsr     GORESTART
0000FEr 2                .endif
0000FEr 2               L2351:
0000FEr 2  20 rr rr             jsr     INLIN
000101r 2               .endif
000101r 2  86 rr                stx     TXTPTR
000103r 2  84 rr                sty     TXTPTR+1
000105r 2  20 rr rr             jsr     CHRGET
000108r 2               .ifdef CONFIG_11
000108r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000108r 2               ; and ':' - a line starting with ':' in
000108r 2               ; direct mode gets ignored
000108r 2  AA                   tax
000109r 2               .endif
000109r 2               .ifdef KBD
000109r 2                       beq     L2351X
000109r 2               .else
000109r 2  F0 F3                beq     L2351
00010Br 2               .endif
00010Br 2  A2 FF                ldx     #$FF
00010Dr 2  86 rr                stx     CURLIN+1
00010Fr 2  90 06                bcc     NUMBERED_LINE
000111r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000114r 2  4C rr rr             jmp     NEWSTT2
000117r 2               
000117r 2               ; ----------------------------------------------------------------------------
000117r 2               ; HANDLE NUMBERED LINE
000117r 2               ; ----------------------------------------------------------------------------
000117r 2               NUMBERED_LINE:
000117r 2  20 rr rr             jsr     LINGET
00011Ar 2  20 rr rr             jsr     PARSE_INPUT_LINE
00011Dr 2  84 rr                sty     EOLPNTR
00011Fr 2               .ifdef KBD
00011Fr 2                       jsr     FNDLIN2
00011Fr 2                       lda     JMPADRS+1
00011Fr 2                       sta     LOWTR
00011Fr 2                       sta     Z96
00011Fr 2                       lda     JMPADRS+2
00011Fr 2                       sta     LOWTR+1
00011Fr 2                       sta     Z96+1
00011Fr 2                       lda     LINNUM
00011Fr 2                       sta     L06FE
00011Fr 2                       lda     LINNUM+1
00011Fr 2                       sta     L06FE+1
00011Fr 2                       inc     LINNUM
00011Fr 2                       bne     LE2D2
00011Fr 2                       inc     LINNUM+1
00011Fr 2                       bne     LE2D2
00011Fr 2                       jmp     SYNERR
00011Fr 2               LE2D2:
00011Fr 2                       jsr     LF457
00011Fr 2                       ldx     #Z96
00011Fr 2                       jsr     CMPJMPADRS
00011Fr 2                       bcs     LE2FD
00011Fr 2               LE2DC:
00011Fr 2                       ldx     #$00
00011Fr 2                       lda     (JMPADRS+1,x)
00011Fr 2                       sta     (Z96,x)
00011Fr 2                       inc     JMPADRS+1
00011Fr 2                       bne     LE2E8
00011Fr 2                       inc     JMPADRS+2
00011Fr 2               LE2E8:
00011Fr 2                       inc     Z96
00011Fr 2                       bne     LE2EE
00011Fr 2                       inc     Z96+1
00011Fr 2               LE2EE:
00011Fr 2                       ldx     #VARTAB
00011Fr 2                       jsr     CMPJMPADRS
00011Fr 2                       bne     LE2DC
00011Fr 2                       lda     Z96
00011Fr 2                       sta     VARTAB
00011Fr 2                       lda     Z96+1
00011Fr 2                       sta     VARTAB+1
00011Fr 2               LE2FD:
00011Fr 2                       jsr     SETPTRS
00011Fr 2                       jsr     LE33D
00011Fr 2                       lda     INPUTBUFFER
00011Fr 2               LE306:
00011Fr 2                       beq     LE28E
00011Fr 2                       cmp     #$A5
00011Fr 2                       beq     LE306
00011Fr 2                       clc
00011Fr 2               .else
00011Fr 2  20 rr rr             jsr     FNDLIN
000122r 2  90 44                bcc     PUT_NEW_LINE
000124r 2  A0 01                ldy     #$01
000126r 2  B1 rr                lda     (LOWTR),y
000128r 2  85 rr                sta     INDEX+1
00012Ar 2  A5 rr                lda     VARTAB
00012Cr 2  85 rr                sta     INDEX
00012Er 2  A5 rr                lda     LOWTR+1
000130r 2  85 rr                sta     DEST+1
000132r 2  A5 rr                lda     LOWTR
000134r 2  88                   dey
000135r 2  F1 rr                sbc     (LOWTR),y
000137r 2  18                   clc
000138r 2  65 rr                adc     VARTAB
00013Ar 2  85 rr                sta     VARTAB
00013Cr 2  85 rr                sta     DEST
00013Er 2  A5 rr                lda     VARTAB+1
000140r 2  69 FF                adc     #$FF
000142r 2  85 rr                sta     VARTAB+1
000144r 2  E5 rr                sbc     LOWTR+1
000146r 2  AA                   tax
000147r 2  38                   sec
000148r 2  A5 rr                lda     LOWTR
00014Ar 2  E5 rr                sbc     VARTAB
00014Cr 2  A8                   tay
00014Dr 2  B0 03                bcs     L23A5
00014Fr 2  E8                   inx
000150r 2  C6 rr                dec     DEST+1
000152r 2               L23A5:
000152r 2  18                   clc
000153r 2  65 rr                adc     INDEX
000155r 2  90 03                bcc     L23AD
000157r 2  C6 rr                dec     INDEX+1
000159r 2  18                   clc
00015Ar 2               L23AD:
00015Ar 2  B1 rr                lda     (INDEX),y
00015Cr 2  91 rr                sta     (DEST),y
00015Er 2  C8                   iny
00015Fr 2  D0 F9                bne     L23AD
000161r 2  E6 rr                inc     INDEX+1
000163r 2  E6 rr                inc     DEST+1
000165r 2  CA                   dex
000166r 2  D0 F2                bne     L23AD
000168r 2               .endif
000168r 2               ; ----------------------------------------------------------------------------
000168r 2               PUT_NEW_LINE:
000168r 2               .ifndef KBD
000168r 2                 .ifdef CONFIG_2
000168r 2  20 rr rr             jsr     SETPTRS
00016Br 2  20 rr rr             jsr     LE33D
00016Er 2  AD 00 09             lda     INPUTBUFFER
000171r 2  F0 8B                beq     L2351
000173r 2  18                   clc
000174r 2                 .else
000174r 2                       lda     INPUTBUFFER
000174r 2                       beq     FIX_LINKS
000174r 2                       lda     MEMSIZ
000174r 2                       ldy     MEMSIZ+1
000174r 2                       sta     FRETOP
000174r 2                       sty     FRETOP+1
000174r 2                 .endif
000174r 2               .endif
000174r 2  A5 rr                lda     VARTAB
000176r 2  85 rr                sta     HIGHTR
000178r 2  65 rr                adc     EOLPNTR
00017Ar 2  85 rr                sta     HIGHDS
00017Cr 2  A4 rr                ldy     VARTAB+1
00017Er 2  84 rr                sty     HIGHTR+1
000180r 2  90 01                bcc     L23D6
000182r 2  C8                   iny
000183r 2               L23D6:
000183r 2  84 rr                sty     HIGHDS+1
000185r 2  20 rr rr             jsr     BLTU
000188r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && (!.def(KBD))
000188r 2  A5 rr                lda     LINNUM
00018Ar 2  A4 rr                ldy     LINNUM+1
00018Cr 2  8D FE 08             sta     INPUTBUFFER-2
00018Fr 2  8C FF 08             sty     INPUTBUFFER-1
000192r 2               .endif
000192r 2  A5 rr                lda     STREND
000194r 2  A4 rr                ldy     STREND+1
000196r 2  85 rr                sta     VARTAB
000198r 2  84 rr                sty     VARTAB+1
00019Ar 2  A4 rr                ldy     EOLPNTR
00019Cr 2  88                   dey
00019Dr 2               ; ---COPY LINE INTO PROGRAM-------
00019Dr 2               L23E6:
00019Dr 2  B9 FC 08             lda     INPUTBUFFER-4,y
0001A0r 2  91 rr                sta     (LOWTR),y
0001A2r 2  88                   dey
0001A3r 2  10 F8                bpl     L23E6
0001A5r 2               
0001A5r 2               ; ----------------------------------------------------------------------------
0001A5r 2               ; CLEAR ALL VARIABLES
0001A5r 2               ; RE-ESTABLISH ALL FORWARD LINKS
0001A5r 2               ; ----------------------------------------------------------------------------
0001A5r 2               FIX_LINKS:
0001A5r 2  20 rr rr             jsr     SETPTRS
0001A8r 2               .ifdef CONFIG_2
0001A8r 2  20 rr rr             jsr     LE33D
0001ABr 2  4C rr rr             jmp     L2351
0001AEr 2               LE33D:
0001AEr 2               .endif
0001AEr 2  A5 rr                lda     TXTTAB
0001B0r 2  A4 rr                ldy     TXTTAB+1
0001B2r 2  85 rr                sta     INDEX
0001B4r 2  84 rr                sty     INDEX+1
0001B6r 2  18                   clc
0001B7r 2               L23FA:
0001B7r 2  A0 01                ldy     #$01
0001B9r 2  B1 rr                lda     (INDEX),y
0001BBr 2               .ifdef CONFIG_2
0001BBr 2  F0 1D                beq     RET3
0001BDr 2               .else
0001BDr 2                       jeq     L2351
0001BDr 2               .endif
0001BDr 2  A0 04                ldy     #$04
0001BFr 2               L2405:
0001BFr 2  C8                   iny
0001C0r 2  B1 rr                lda     (INDEX),y
0001C2r 2  D0 FB                bne     L2405
0001C4r 2  C8                   iny
0001C5r 2  98                   tya
0001C6r 2  65 rr                adc     INDEX
0001C8r 2  AA                   tax
0001C9r 2  A0 00                ldy     #$00
0001CBr 2  91 rr                sta     (INDEX),y
0001CDr 2  A5 rr                lda     INDEX+1
0001CFr 2  69 00                adc     #$00
0001D1r 2  C8                   iny
0001D2r 2  91 rr                sta     (INDEX),y
0001D4r 2  86 rr                stx     INDEX
0001D6r 2  85 rr                sta     INDEX+1
0001D8r 2  90 DD                bcc     L23FA	; always
0001DAr 2               
0001DAr 2               ; ----------------------------------------------------------------------------
0001DAr 2               .ifdef KBD
0001DAr 2               .include "kbd_loadsave.s"
0001DAr 2               .endif
0001DAr 2               
0001DAr 2               .ifdef CONFIG_2
0001DAr 2               ; !!! kbd_loadsave.s requires an RTS here!
0001DAr 2               RET3:
0001DAr 2  60           		rts
0001DBr 2               .endif
0001DBr 2               
0001DBr 2               .include "inline.s"
0001DBr 3               .ifdef DB6502
0001DBr 3                       .include "tty.inc"
0001DBr 4                       .include "zeropage.inc"
0001DBr 5               .globalzp sp
0001DBr 5               .globalzp sreg
0001DBr 5               .globalzp regsave
0001DBr 5               .globalzp tmp1
0001DBr 5               .globalzp tmp2
0001DBr 5               .globalzp tmp3
0001DBr 5               .globalzp tmp4
0001DBr 5               .globalzp ptr1
0001DBr 5               .globalzp ptr2
0001DBr 5               .globalzp ptr3
0001DBr 5               .globalzp ptr4
0001DBr 5               .globalzp lcd_temp_char1
0001DBr 5               .globalzp lcd_temp_char2
0001DBr 5               .globalzp lcd_temp_char3
0001DBr 5               .globalzp acia_conn
0001DBr 5               .globalzp acia_rx_rptr
0001DBr 5               .globalzp acia_rx_wptr
0001DBr 5               .globalzp acia_tx_rptr
0001DBr 5               .globalzp acia_tx_wptr
0001DBr 5               .globalzp keyboard_conn
0001DBr 5               .globalzp keyboard_rptr
0001DBr 5               .globalzp keyboard_wptr
0001DBr 5               .globalzp tty_config
0001DBr 5               .globalzp system_break_flag
0001DBr 5               .globalzp system_break_address
0001DBr 5               .globalzp system_break_sp
0001DBr 5               .globalzp user_break_address
0001DBr 5               .globalzp user_break_sp
0001DBr 5               .globalzp user_irq_address
0001DBr 5               .globalzp zp_sd_address  ; 2 bytes
0001DBr 5               .globalzp zp_sd_currentsector  ; 4 bytes
0001DBr 5               .globalzp zp_fat32_variables  ; 24 bytes
0001DBr 5               
0001DBr 5               
0001DBr 5               
0001DBr 4               
0001DBr 4                       .import _tty_init
0001DBr 4                       .import _tty_read_line
0001DBr 4                       .import tty_read_line
0001DBr 4                       .import _tty_write
0001DBr 4                       .import _tty_writeln
0001DBr 4                       .import _tty_write_hex
0001DBr 4                       .import _tty_write_dec
0001DBr 4                       .import _tty_send_newline
0001DBr 4                       .import _tty_send_character
0001DBr 4               
0001DBr 4                       .macro tty_read_line buffer, buffer_size
0001DBr 4                       pha
0001DBr 4                       phx
0001DBr 4                       phy
0001DBr 4                       .if (.match (.left (1, {buffer}), #))
0001DBr 4                           ; immediate mode
0001DBr 4                           lda #<(.right (.tcount ({buffer})-1, {buffer}))
0001DBr 4                           ldx #>(.right (.tcount ({buffer})-1, {buffer}))
0001DBr 4                       .else
0001DBr 4                           ; assume absolute or zero page
0001DBr 4                           lda buffer
0001DBr 4                           ldx 1+(buffer)
0001DBr 4                       .endif
0001DBr 4                       ldy #(buffer_size)
0001DBr 4                       jsr tty_read_line
0001DBr 4                       ply
0001DBr 4                       plx
0001DBr 4                       pla
0001DBr 4                       .endmacro
0001DBr 4               
0001DBr 4                       .macro write_tty string
0001DBr 4                       pha
0001DBr 4                       phx
0001DBr 4                       .if (.match (.left (1, {string}), #))
0001DBr 4                           ; immediate mode
0001DBr 4                           lda #<(.right (.tcount ({string})-1, {string}))
0001DBr 4                           ldx #>(.right (.tcount ({string})-1, {string}))
0001DBr 4                       .else
0001DBr 4                           ; assume absolute or zero page
0001DBr 4                           lda string
0001DBr 4                           ldx 1+(string)
0001DBr 4                       .endif
0001DBr 4                       jsr _tty_write
0001DBr 4                       plx
0001DBr 4                       pla
0001DBr 4                       .endmacro
0001DBr 4               
0001DBr 4                       .macro writeln_tty string
0001DBr 4                       pha
0001DBr 4                       phx
0001DBr 4                       .if (.match (.left (1, {string}), #))
0001DBr 4                           ; immediate mode
0001DBr 4                           lda #<(.right (.tcount ({string})-1, {string}))
0001DBr 4                           ldx #>(.right (.tcount ({string})-1, {string}))
0001DBr 4                       .else
0001DBr 4                           ; assume absolute or zero page
0001DBr 4                           lda string
0001DBr 4                           ldx 1+(string)
0001DBr 4                       .endif
0001DBr 4                       jsr _tty_writeln
0001DBr 4                       plx
0001DBr 4                       pla
0001DBr 4                       .endmacro
0001DBr 4               
0001DBr 4                       .macro write_tty_hex
0001DBr 4                       jsr _tty_write_hex
0001DBr 4                       .endmacro
0001DBr 4               
0001DBr 4                       .macro write_tty_address pointer
0001DBr 4                       pha
0001DBr 4                       .if (.match (.left (1, {pointer}), #))
0001DBr 4                           ; immediate mode
0001DBr 4                           lda #>(.right (.tcount ({pointer})-1, {pointer}))
0001DBr 4                           jsr _tty_write_hex
0001DBr 4                           lda #<(.right (.tcount ({pointer})-1, {pointer}))
0001DBr 4                           jsr _tty_write_hex
0001DBr 4                       .else
0001DBr 4                           ; assume absolute or zero page
0001DBr 4                           lda 1+(pointer)
0001DBr 4                           jsr _tty_write_hex
0001DBr 4                           lda pointer
0001DBr 4                           jsr _tty_write_hex
0001DBr 4                       .endif
0001DBr 4                       pla
0001DBr 4                       .endmacro
0001DBr 4               
0001DBr 4                       .macro write_tty_dec value
0001DBr 4                       pha
0001DBr 4                       phx
0001DBr 4                       .if (.match (.left (1, {value}), #))
0001DBr 4                           ; immediate mode
0001DBr 4                           lda #<(.right (.tcount ({value})-1, {value}))
0001DBr 4                           ldx #>(.right (.tcount ({value})-1, {value}))
0001DBr 4                       .else
0001DBr 4                           ; assume absolute or zero page
0001DBr 4                           lda value
0001DBr 4                           ldx 1+(value)
0001DBr 4                       .endif
0001DBr 4                       jsr _tty_write_dec
0001DBr 4                       plx
0001DBr 4                       pla
0001DBr 4                       .endmacro
0001DBr 4               
0001DBr 4               TTY_CONFIG_INPUT_SERIAL   = %00000001
0001DBr 4               TTY_CONFIG_INPUT_KEYBOARD = %00000010
0001DBr 4               TTY_CONFIG_OUTPUT_SERIAL  = %00000100
0001DBr 4               TTY_CONFIG_OUTPUT_LCD     = %00001000
0001DBr 4               TTY_CONFIG_DISABLE_SERIAL = %00001010
0001DBr 4               
0001DBr 3               .endif
0001DBr 3               
0001DBr 3               .segment "CODE"
0001DBr 3               
0001DBr 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001DBr 3               L2420:
0001DBr 3                 .ifdef OSI
0001DBr 3                       jsr     OUTDO
0001DBr 3                 .endif
0001DBr 3                 .ifdef DB6502
0001DBr 3                       jsr SEND_BACKSPACE
0001DBr 3                 .endif
0001DBr 3                       dex
0001DBr 3                 .ifdef AIM65
0001DBr 3                       bmi     L2423
0001DBr 3                       jsr     PSLS
0001DBr 3                       jmp     INLIN2
0001DBr 3               LB35F:
0001DBr 3                       jsr     OUTDO
0001DBr 3                 .else
0001DBr 3                       bpl     INLIN2
0001DBr 3                 .endif
0001DBr 3               L2423:
0001DBr 3                 .ifdef OSI
0001DBr 3                       jsr     OUTDO
0001DBr 3                 .endif
0001DBr 3                       jsr     CRDO
0001DBr 3               .endif
0001DBr 3               
0001DBr 3               ; ----------------------------------------------------------------------------
0001DBr 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001DBr 3               ; ----------------------------------------------------------------------------
0001DBr 3               .ifndef KBD
0001DBr 3               INLIN:
0001DBr 3                 .ifdef APPLE
0001DBr 3                       ldx     #$DD
0001DBr 3               INLIN1:
0001DBr 3                       stx     $33
0001DBr 3                       jsr     L2900
0001DBr 3                       cpx     #$EF
0001DBr 3                       bcs     L0C32
0001DBr 3                       ldx     #$EF
0001DBr 3               L0C32:
0001DBr 3                       lda     #$00
0001DBr 3                       sta     INPUTBUFFER,x
0001DBr 3                       ldx     #<(INPUTBUFFER-1)
0001DBr 3                       ldy     #>(INPUTBUFFER-1)
0001DBr 3                       rts
0001DBr 3                 .endif
0001DBr 3                 .ifdef DB6502
0001DBr 3  48 DA 5A A9          tty_read_line #INPUTBUFFER, 80
0001DFr 3  00 A2 09 A0  
0001E3r 3  50 20 rr rr  
0001EAr 3  A2 FF                ldx     #<(INPUTBUFFER-1)
0001ECr 3  A0 08                ldy     #>(INPUTBUFFER-1)
0001EEr 3  60                   rts
0001EFr 3                 .endif
0001EFr 3               
0001EFr 3                 .if (!.def(APPLE)) && (!.def(DB6502))
0001EFr 3                       ldx     #$00
0001EFr 3               INLIN2:
0001EFr 3                       jsr     GETLN
0001EFr 3                   .ifdef AIM65
0001EFr 3                       cmp     #$1A
0001EFr 3                       bne     INLINAIM
0001EFr 3                       jsr     DU13
0001EFr 3                       jmp     INLIN
0001EFr 3               INLINAIM:
0001EFr 3                   .endif
0001EFr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001EFr 3                       cmp     #$07
0001EFr 3                       beq     L2443
0001EFr 3                   .endif
0001EFr 3                       cmp     #$0D
0001EFr 3                       beq     L2453
0001EFr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001EFr 3                       cmp     #$20
0001EFr 3                     .ifdef AIM65
0001EFr 3                       bcc     L244E
0001EFr 3                     .else
0001EFr 3                       bcc     INLIN2
0001EFr 3                     .endif
0001EFr 3                     .if .def(MICROTAN) || .def(DB6502)
0001EFr 3                       cmp     #$80
0001EFr 3                     .else
0001EFr 3                       .ifdef AIM65
0001EFr 3                       cmp     #$7F
0001EFr 3                       beq     L2420
0001EFr 3                       .endif
0001EFr 3                       cmp     #$7D
0001EFr 3                     .endif
0001EFr 3                       bcs     INLIN2
0001EFr 3                       cmp     #$40 ; @
0001EFr 3                     .ifdef AIM65
0001EFr 3                       beq     LB35F
0001EFr 3                     .else
0001EFr 3                       beq     L2423
0001EFr 3                     .if .def(MICROTAN) || .def(DB6502)
0001EFr 3                       cmp     #$7F ; DEL
0001EFr 3                     .else
0001EFr 3                       cmp     #$5F ; _
0001EFr 3                     .endif
0001EFr 3                       beq     L2420
0001EFr 3                     .endif
0001EFr 3               L2443:
0001EFr 3                     .ifdef MICROTAN
0001EFr 3                       cpx     #$4F
0001EFr 3                     .else
0001EFr 3                       cpx     #$47
0001EFr 3                     .endif
0001EFr 3                       bcs     L244C
0001EFr 3                   .endif
0001EFr 3                       sta     INPUTBUFFER,x
0001EFr 3                       inx
0001EFr 3                   .if .def(OSI) || .def(AIM65) || .def(DB6502)
0001EFr 3                       .byte   $2C
0001EFr 3                   .else
0001EFr 3                       bne     INLIN2
0001EFr 3                   .endif
0001EFr 3               L244C:
0001EFr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001EFr 3                       lda     #$07 ; BEL
0001EFr 3               L244E:
0001EFr 3                       jsr     OUTDO
0001EFr 3                       bne     INLIN2
0001EFr 3                   .endif
0001EFr 3               L2453:
0001EFr 3                       jmp     L29B9
0001EFr 3                 .endif
0001EFr 3               .endif
0001EFr 3               
0001EFr 3               .if (!.def(KBD)) && (!.def(DB6502))
0001EFr 3                 .ifndef APPLE
0001EFr 3               GETLN:
0001EFr 3                   .ifdef CONFIG_FILE
0001EFr 3                       jsr     CHRIN
0001EFr 3                       ldy     CURDVC
0001EFr 3                       bne     L2465
0001EFr 3                   .else
0001EFr 3                       jsr     MONRDKEY
0001EFr 3                   .endif
0001EFr 3                   .ifdef OSI
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       nop
0001EFr 3                       and     #$7F
0001EFr 3                   .endif
0001EFr 3                 .endif
0001EFr 3                 .ifdef APPLE
0001EFr 3               RDKEY:
0001EFr 3                       jsr     LFD0C
0001EFr 3                       and     #$7F
0001EFr 3                 .endif
0001EFr 3                   .ifdef SYM1
0001EFr 3                       cmp     #$14
0001EFr 3                   .else
0001EFr 3                       cmp     #$0F
0001EFr 3                   .endif
0001EFr 3                       bne     L2465
0001EFr 3                       pha
0001EFr 3                       lda     Z14
0001EFr 3                       eor     #$FF
0001EFr 3                       sta     Z14
0001EFr 3                       pla
0001EFr 3               L2465:
0001EFr 3                       rts
0001EFr 3               .endif
0001EFr 3               
0001EFr 2               
0001EFr 2               ; ----------------------------------------------------------------------------
0001EFr 2               ; TOKENIZE THE INPUT LINE
0001EFr 2               ; ----------------------------------------------------------------------------
0001EFr 2               PARSE_INPUT_LINE:
0001EFr 2  A6 rr                ldx     TXTPTR
0001F1r 2  A0 04                ldy     #$04
0001F3r 2  84 rr                sty     DATAFLG
0001F5r 2               L246C:
0001F5r 2  BD 00 09             lda     INPUTBUFFERX,x
0001F8r 2               .ifdef CONFIG_CBM_ALL
0001F8r 2                       bpl     LC49E
0001F8r 2                       cmp     #$FF
0001F8r 2                       beq     L24AC
0001F8r 2                       inx
0001F8r 2                       bne     L246C
0001F8r 2               LC49E:
0001F8r 2               .endif
0001F8r 2  C9 20                cmp     #$20
0001FAr 2  F0 37                beq     L24AC
0001FCr 2  85 rr                sta     ENDCHR
0001FEr 2  C9 22                cmp     #$22
000200r 2  F0 56                beq     L24D0
000202r 2  24 rr                bit     DATAFLG
000204r 2  70 2D                bvs     L24AC
000206r 2  C9 3F                cmp     #$3F
000208r 2  D0 04                bne     L2484
00020Ar 2  A9 98                lda     #TOKEN_PRINT
00020Cr 2  D0 25                bne     L24AC
00020Er 2               L2484:
00020Er 2  C9 30                cmp     #$30
000210r 2  90 04                bcc     L248C
000212r 2  C9 3C                cmp     #$3C
000214r 2  90 1D                bcc     L24AC
000216r 2               ; ----------------------------------------------------------------------------
000216r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000216r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000216r 2               ; ----------------------------------------------------------------------------
000216r 2               L248C:
000216r 2  84 rr                sty     STRNG2
000218r 2  A0 00                ldy     #$00
00021Ar 2  84 rr                sty     EOLPNTR
00021Cr 2  88                   dey
00021Dr 2  86 rr                stx     TXTPTR
00021Fr 2  CA                   dex
000220r 2               L2496:
000220r 2  C8                   iny
000221r 2               L2497:
000221r 2  E8                   inx
000222r 2               L2498:
000222r 2               .ifdef KBD
000222r 2                       jsr     GET_UPPER
000222r 2               .else
000222r 2  BD 00 09             lda     INPUTBUFFERX,x
000225r 2                 .ifndef CONFIG_2
000225r 2                       cmp     #$20
000225r 2                       beq     L2497
000225r 2                 .endif
000225r 2               .endif
000225r 2  38                   sec
000226r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
000229r 2  F0 F5                beq     L2496
00022Br 2  C9 80                cmp     #$80
00022Dr 2  D0 30                bne     L24D7
00022Fr 2  05 rr                ora     EOLPNTR
000231r 2               ; ----------------------------------------------------------------------------
000231r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000231r 2               ; ----------------------------------------------------------------------------
000231r 2               L24AA:
000231r 2  A4 rr                ldy     STRNG2
000233r 2               L24AC:
000233r 2  E8                   inx
000234r 2  C8                   iny
000235r 2  99 FB 08             sta     INPUTBUFFER-5,y
000238r 2  B9 FB 08             lda     INPUTBUFFER-5,y
00023Br 2  F0 36                beq     L24EA
00023Dr 2  38                   sec
00023Er 2  E9 3A                sbc     #$3A
000240r 2  F0 04                beq     L24BF
000242r 2  C9 49                cmp     #$49
000244r 2  D0 02                bne     L24C1
000246r 2               L24BF:
000246r 2  85 rr                sta     DATAFLG
000248r 2               L24C1:
000248r 2  38                   sec
000249r 2  E9 55                sbc     #TOKEN_REM-':'
00024Br 2  D0 A8                bne     L246C
00024Dr 2  85 rr                sta     ENDCHR
00024Fr 2               ; ----------------------------------------------------------------------------
00024Fr 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00024Fr 2               ; BY COPYING CHARS UP TO ENDCHR.
00024Fr 2               ; ----------------------------------------------------------------------------
00024Fr 2               L24C8:
00024Fr 2  BD 00 09             lda     INPUTBUFFERX,x
000252r 2  F0 DF                beq     L24AC
000254r 2  C5 rr                cmp     ENDCHR
000256r 2  F0 DB                beq     L24AC
000258r 2               L24D0:
000258r 2  C8                   iny
000259r 2  99 FB 08             sta     INPUTBUFFER-5,y
00025Cr 2  E8                   inx
00025Dr 2  D0 F0                bne     L24C8
00025Fr 2               ; ----------------------------------------------------------------------------
00025Fr 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
00025Fr 2               ; ----------------------------------------------------------------------------
00025Fr 2               L24D7:
00025Fr 2  A6 rr                ldx     TXTPTR
000261r 2  E6 rr                inc     EOLPNTR
000263r 2               L24DB:
000263r 2  C8                   iny
000264r 2  B9 rr rr             lda     MATHTBL+28+1,y
000267r 2  10 FA                bpl     L24DB
000269r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00026Cr 2  D0 B4                bne     L2498
00026Er 2  BD 00 09             lda     INPUTBUFFERX,x
000271r 2  10 BE                bpl     L24AA
000273r 2               ; ---END OF LINE------------------
000273r 2               L24EA:
000273r 2  99 FD 08             sta     INPUTBUFFER-3,y
000276r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000276r 2  C6 rr                dec     TXTPTR+1
000278r 2               .endif
000278r 2  A9 FF                lda     #<(INPUTBUFFER-1)
00027Ar 2  85 rr                sta     TXTPTR
00027Cr 2  60                   rts
00027Dr 2               
00027Dr 2               ; ----------------------------------------------------------------------------
00027Dr 2               ; SEARCH FOR LINE
00027Dr 2               ;
00027Dr 2               ; (LINNUM) = LINE # TO FIND
00027Dr 2               ; IF NOT FOUND:  CARRY = 0
00027Dr 2               ;	LOWTR POINTS AT NEXT LINE
00027Dr 2               ; IF FOUND:      CARRY = 1
00027Dr 2               ;	LOWTR POINTS AT LINE
00027Dr 2               ; ----------------------------------------------------------------------------
00027Dr 2               FNDLIN:
00027Dr 2               .ifdef KBD
00027Dr 2                       jsr     CHRGET
00027Dr 2                       jmp     LE444
00027Dr 2               LE440:
00027Dr 2                       php
00027Dr 2                       jsr     LINGET
00027Dr 2               LE444:
00027Dr 2                       jsr     LF457
00027Dr 2                       ldx     #$FF
00027Dr 2                       plp
00027Dr 2                       beq     LE464
00027Dr 2                       jsr     CHRGOT
00027Dr 2                       beq     L2520
00027Dr 2                       cmp     #$A5
00027Dr 2                       bne     L2520
00027Dr 2                       jsr     CHRGET
00027Dr 2                       beq     LE464
00027Dr 2                       bcs     LE461
00027Dr 2                       jsr     LINGET
00027Dr 2                       beq     L2520
00027Dr 2               LE461:
00027Dr 2                       jmp     SYNERR
00027Dr 2               LE464:
00027Dr 2                       stx     LINNUM
00027Dr 2                       stx     LINNUM+1
00027Dr 2               .else
00027Dr 2  A5 rr                lda     TXTTAB
00027Fr 2  A6 rr                ldx     TXTTAB+1
000281r 2               FL1:
000281r 2  A0 01                ldy     #$01
000283r 2  85 rr                sta     LOWTR
000285r 2  86 rr                stx     LOWTR+1
000287r 2  B1 rr                lda     (LOWTR),y
000289r 2  F0 1F                beq     L251F
00028Br 2  C8                   iny
00028Cr 2  C8                   iny
00028Dr 2  A5 rr                lda     LINNUM+1
00028Fr 2  D1 rr                cmp     (LOWTR),y
000291r 2  90 18                bcc     L2520
000293r 2  F0 03                beq     L250D
000295r 2  88                   dey
000296r 2  D0 09                bne     L2516
000298r 2               L250D:
000298r 2  A5 rr                lda     LINNUM
00029Ar 2  88                   dey
00029Br 2  D1 rr                cmp     (LOWTR),y
00029Dr 2  90 0C                bcc     L2520
00029Fr 2  F0 0A                beq     L2520
0002A1r 2               L2516:
0002A1r 2  88                   dey
0002A2r 2  B1 rr                lda     (LOWTR),y
0002A4r 2  AA                   tax
0002A5r 2  88                   dey
0002A6r 2  B1 rr                lda     (LOWTR),y
0002A8r 2  B0 D7                bcs     FL1
0002AAr 2               L251F:
0002AAr 2  18                   clc
0002ABr 2               .endif
0002ABr 2               L2520:
0002ABr 2  60                   rts
0002ACr 2               
0002ACr 2               ; ----------------------------------------------------------------------------
0002ACr 2               ; "NEW" STATEMENT
0002ACr 2               ; ----------------------------------------------------------------------------
0002ACr 2               NEW:
0002ACr 2  D0 FD                bne     L2520
0002AEr 2               SCRTCH:
0002AEr 2  A9 00                lda     #$00
0002B0r 2  A8                   tay
0002B1r 2  91 rr                sta     (TXTTAB),y
0002B3r 2  C8                   iny
0002B4r 2  91 rr                sta     (TXTTAB),y
0002B6r 2  A5 rr                lda     TXTTAB
0002B8r 2               .ifdef CONFIG_2
0002B8r 2  18           		clc
0002B9r 2               .endif
0002B9r 2  69 02                adc     #$02
0002BBr 2  85 rr                sta     VARTAB
0002BDr 2  A5 rr                lda     TXTTAB+1
0002BFr 2  69 00                adc     #$00
0002C1r 2  85 rr                sta     VARTAB+1
0002C3r 2               ; ----------------------------------------------------------------------------
0002C3r 2               SETPTRS:
0002C3r 2  20 rr rr             jsr     STXTPT
0002C6r 2               .ifdef CONFIG_11A
0002C6r 2  A9 00                lda     #$00
0002C8r 2               
0002C8r 2               ; ----------------------------------------------------------------------------
0002C8r 2               ; "CLEAR" STATEMENT
0002C8r 2               ; ----------------------------------------------------------------------------
0002C8r 2               CLEAR:
0002C8r 2  D0 2A                bne     L256A
0002CAr 2               .endif
0002CAr 2               CLEARC:
0002CAr 2               .ifdef KBD
0002CAr 2                       lda     #<CONST_MEMSIZ
0002CAr 2                       ldy     #>CONST_MEMSIZ
0002CAr 2               .else
0002CAr 2  A5 rr                lda     MEMSIZ
0002CCr 2  A4 rr                ldy     MEMSIZ+1
0002CEr 2               .endif
0002CEr 2  85 rr                sta     FRETOP
0002D0r 2  84 rr                sty     FRETOP+1
0002D2r 2               .ifdef CONFIG_CBM_ALL
0002D2r 2                       jsr     CLALL
0002D2r 2               .endif
0002D2r 2  A5 rr                lda     VARTAB
0002D4r 2  A4 rr                ldy     VARTAB+1
0002D6r 2  85 rr                sta     ARYTAB
0002D8r 2  84 rr                sty     ARYTAB+1
0002DAr 2  85 rr                sta     STREND
0002DCr 2  84 rr                sty     STREND+1
0002DEr 2  20 rr rr             jsr     RESTORE
0002E1r 2               ; ----------------------------------------------------------------------------
0002E1r 2               STKINI:
0002E1r 2  A2 rr                ldx     #TEMPST
0002E3r 2  86 rr                stx     TEMPPT
0002E5r 2  68                   pla
0002E6r 2               .ifdef CONFIG_2
0002E6r 2  A8           		tay
0002E7r 2               .else
0002E7r 2                       sta     STACK+STACK_TOP+1
0002E7r 2               .endif
0002E7r 2  68                   pla
0002E8r 2               .ifndef CONFIG_2
0002E8r 2                       sta     STACK+STACK_TOP+2
0002E8r 2               .endif
0002E8r 2               .ifdef DB6502
0002E8r 2  A6 rr                ldx     INIT_STACK
0002EAr 2               .else
0002EAr 2                       ldx     #STACK_TOP
0002EAr 2               .endif
0002EAr 2  9A                   txs
0002EBr 2               .ifdef CONFIG_2
0002EBr 2  48                   pha
0002ECr 2  98                   tya
0002EDr 2  48                   pha
0002EEr 2               .endif
0002EEr 2  A9 00                lda     #$00
0002F0r 2  85 rr                sta     OLDTEXT+1
0002F2r 2  85 rr                sta     SUBFLG
0002F4r 2               L256A:
0002F4r 2  60                   rts
0002F5r 2               
0002F5r 2               ; ----------------------------------------------------------------------------
0002F5r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
0002F5r 2               ; ----------------------------------------------------------------------------
0002F5r 2               STXTPT:
0002F5r 2  18                   clc
0002F6r 2  A5 rr                lda     TXTTAB
0002F8r 2  69 FF                adc     #$FF
0002FAr 2  85 rr                sta     TXTPTR
0002FCr 2  A5 rr                lda     TXTTAB+1
0002FEr 2  69 FF                adc     #$FF
000300r 2  85 rr                sta     TXTPTR+1
000302r 2  60                   rts
000303r 2               
000303r 2               ; ----------------------------------------------------------------------------
000303r 2               .ifdef KBD
000303r 2               LE4C0:
000303r 2                       ldy     #<LE444
000303r 2                       ldx     #>LE444
000303r 2               LE4C4:
000303r 2                       jsr     LFFD6
000303r 2                       jsr     LFFED
000303r 2                       lda     $0504
000303r 2                       clc
000303r 2                       adc     #$08
000303r 2                       sta     $0504
000303r 2                       rts
000303r 2               
000303r 2               CMPJMPADRS:
000303r 2                       lda     1,x
000303r 2                       cmp     JMPADRS+2
000303r 2                       bne     LE4DE
000303r 2                       lda     0,x
000303r 2                       cmp     JMPADRS+1
000303r 2               LE4DE:
000303r 2                       rts
000303r 2               .endif
000303r 2               
000303r 2               ; ----------------------------------------------------------------------------
000303r 2               ; "LIST" STATEMENT
000303r 2               ; ----------------------------------------------------------------------------
000303r 2               LIST:
000303r 2               .ifdef KBD
000303r 2                       jsr     LE440
000303r 2                       bne     LE4DE
000303r 2                       pla
000303r 2                       pla
000303r 2               L25A6:
000303r 2                       jsr     CRDO
000303r 2               .else
000303r 2                   .ifdef AIM65
000303r 2                       pha
000303r 2                       lda     #$00
000303r 2               LB4BF:
000303r 2                       sta     INPUTFLG
000303r 2                       pla
000303r 2                   .endif
000303r 2                 .ifdef MICROTAN
000303r 2                       php
000303r 2                       jmp     LE21C ; patch
000303r 2               LC57E:
000303r 2                  .elseif .def(AIM65) || .def(SYM1)
000303r 2                       php
000303r 2                       jsr     LINGET
000303r 2               LC57E:
000303r 2                 .else
000303r 2  90 06                bcc     L2581
000305r 2  F0 04                beq     L2581
000307r 2  C9 A5                cmp     #TOKEN_MINUS
000309r 2  D0 E9                bne     L256A
00030Br 2               L2581:
00030Br 2  20 rr rr             jsr     LINGET
00030Er 2                 .endif
00030Er 2  20 rr rr             jsr     FNDLIN
000311r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000311r 2                       plp
000311r 2                       beq     L2598
000311r 2                 .endif
000311r 2  20 rr rr             jsr     CHRGOT
000314r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000314r 2                       beq     L25A6
000314r 2                 .else
000314r 2  F0 0C                beq     L2598
000316r 2                 .endif
000316r 2  C9 A5                cmp     #TOKEN_MINUS
000318r 2  D0 91                bne     L2520
00031Ar 2  20 rr rr             jsr     CHRGET
00031Dr 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00031Dr 2                       beq     L2598
00031Dr 2                       jsr     LINGET
00031Dr 2                       beq     L25A6
00031Dr 2                       rts
00031Dr 2                 .else
00031Dr 2  20 rr rr             jsr     LINGET
000320r 2  D0 89                bne     L2520
000322r 2                 .endif
000322r 2               L2598:
000322r 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
000322r 2  68                   pla
000323r 2  68                   pla
000324r 2  A5 rr                lda     LINNUM
000326r 2  05 rr                ora     LINNUM+1
000328r 2  D0 06                bne     L25A6
00032Ar 2                 .endif
00032Ar 2  A9 FF                lda     #$FF
00032Cr 2  85 rr                sta     LINNUM
00032Er 2  85 rr                sta     LINNUM+1
000330r 2               L25A6:
000330r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000330r 2                       pla
000330r 2                       pla
000330r 2                 .endif
000330r 2               L25A6X:
000330r 2               .endif
000330r 2  A0 01                ldy     #$01
000332r 2               .ifdef CONFIG_DATAFLG
000332r 2  84 rr                sty     DATAFLG
000334r 2               .endif
000334r 2  B1 rr                lda     (LOWTRX),y
000336r 2  F0 43                beq     L25E5
000338r 2               .ifdef MICROTAN
000338r 2                       jmp     LE21F
000338r 2               LC5A9:
000338r 2               .else
000338r 2  20 rr rr             jsr     ISCNTC
00033Br 2               .endif
00033Br 2               .ifndef KBD
00033Br 2  20 rr rr             jsr     CRDO
00033Er 2               .endif
00033Er 2  C8                   iny
00033Fr 2  B1 rr                lda     (LOWTRX),y
000341r 2  AA                   tax
000342r 2  C8                   iny
000343r 2  B1 rr                lda     (LOWTRX),y
000345r 2  C5 rr                cmp     LINNUM+1
000347r 2  D0 04                bne     L25C1
000349r 2  E4 rr                cpx     LINNUM
00034Br 2  F0 02                beq     L25C3
00034Dr 2               L25C1:
00034Dr 2  B0 2C                bcs     L25E5
00034Fr 2               ; ---LIST ONE LINE----------------
00034Fr 2               L25C3:
00034Fr 2  84 rr                sty     FORPNT
000351r 2  20 rr rr             jsr     LINPRT
000354r 2  A9 20                lda     #$20
000356r 2               L25CA:
000356r 2  A4 rr                ldy     FORPNT
000358r 2  29 7F                and     #$7F
00035Ar 2               L25CE:
00035Ar 2  20 rr rr             jsr     OUTDO
00035Dr 2               .ifdef CONFIG_DATAFLG
00035Dr 2  C9 22                cmp     #$22
00035Fr 2  D0 06                bne     LA519
000361r 2  A5 rr                lda     DATAFLG
000363r 2  49 FF                eor     #$FF
000365r 2  85 rr                sta     DATAFLG
000367r 2               LA519:
000367r 2               .endif
000367r 2  C8                   iny
000368r 2               .ifdef CONFIG_11
000368r 2  F0 11                beq     L25E5
00036Ar 2               .endif
00036Ar 2  B1 rr                lda     (LOWTRX),y
00036Cr 2  D0 10                bne     L25E8
00036Er 2  A8                   tay
00036Fr 2  B1 rr                lda     (LOWTRX),y
000371r 2  AA                   tax
000372r 2  C8                   iny
000373r 2  B1 rr                lda     (LOWTRX),y
000375r 2  86 rr                stx     LOWTRX
000377r 2  85 rr                sta     LOWTRX+1
000379r 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000379r 2                       bne     L25A6X
000379r 2               .else
000379r 2  D0 B5                bne     L25A6
00037Br 2               .endif
00037Br 2               L25E5:
00037Br 2               .ifdef AIM65
00037Br 2                       lda     INPUTFLG
00037Br 2                       beq     L25E5a
00037Br 2                       jsr     CRDO
00037Br 2                       jsr     CRDO
00037Br 2                       lda     #$1a
00037Br 2                       jsr     OUTDO
00037Br 2                       jsr     $e50a
00037Br 2               L25E5a:
00037Br 2               .endif
00037Br 2  4C rr rr             jmp     RESTART
00037Er 2               L25E8:
00037Er 2  10 DA                bpl     L25CE
000380r 2               .ifdef CONFIG_DATAFLG
000380r 2  C9 FF                cmp     #$FF
000382r 2  F0 D6                beq     L25CE
000384r 2  24 rr                bit     DATAFLG
000386r 2  30 D2                bmi     L25CE
000388r 2               .endif
000388r 2  38                   sec
000389r 2  E9 7F                sbc     #$7F
00038Br 2  AA                   tax
00038Cr 2  84 rr                sty     FORPNT
00038Er 2  A0 FF                ldy     #$FF
000390r 2               L25F2:
000390r 2  CA                   dex
000391r 2  F0 08                beq     L25FD
000393r 2               L25F5:
000393r 2  C8                   iny
000394r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000397r 2  10 FA                bpl     L25F5
000399r 2  30 F5                bmi     L25F2
00039Br 2               L25FD:
00039Br 2  C8                   iny
00039Cr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00039Fr 2  30 B5                bmi     L25CA
0003A1r 2  20 rr rr             jsr     OUTDO
0003A4r 2  D0 F5                bne     L25FD	; always
0003A6r 2               
0003A6r 2               
0003A6r 1               .include "flow1.s"
0003A6r 2               .segment "CODE"
0003A6r 2               
0003A6r 2               ; ----------------------------------------------------------------------------
0003A6r 2               ; "FOR" STATEMENT
0003A6r 2               ;
0003A6r 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003A6r 2               ; 2 -- TXTPTR
0003A6r 2               ; 2 -- LINE NUMBER
0003A6r 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003A6r 2               ; 1 -- STEP SIGN
0003A6r 2               ; 5 -- STEP VALUE
0003A6r 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003A6r 2               ; 1 -- FOR TOKEN ($81)
0003A6r 2               ; ----------------------------------------------------------------------------
0003A6r 2               FOR:
0003A6r 2  A9 80                lda     #$80
0003A8r 2  85 rr                sta     SUBFLG
0003AAr 2  20 rr rr             jsr     LET
0003ADr 2  20 rr rr             jsr     GTFORPNT
0003B0r 2  D0 05                bne     L2619
0003B2r 2  8A                   txa
0003B3r 2  69 0D                adc     #FOR_STACK1
0003B5r 2  AA                   tax
0003B6r 2  9A                   txs
0003B7r 2               L2619:
0003B7r 2  68                   pla
0003B8r 2  68                   pla
0003B9r 2  A9 08                lda     #FOR_STACK2
0003BBr 2  20 rr rr             jsr     CHKMEM
0003BEr 2  20 rr rr             jsr     DATAN
0003C1r 2  18                   clc
0003C2r 2  98                   tya
0003C3r 2  65 rr                adc     TXTPTR
0003C5r 2  48                   pha
0003C6r 2  A5 rr                lda     TXTPTR+1
0003C8r 2  69 00                adc     #$00
0003CAr 2  48                   pha
0003CBr 2  A5 rr                lda     CURLIN+1
0003CDr 2  48                   pha
0003CEr 2  A5 rr                lda     CURLIN
0003D0r 2  48                   pha
0003D1r 2  A9 9E                lda     #TOKEN_TO
0003D3r 2  20 rr rr             jsr     SYNCHR
0003D6r 2  20 rr rr             jsr     CHKNUM
0003D9r 2  20 rr rr             jsr     FRMNUM
0003DCr 2  A5 rr                lda     FACSIGN
0003DEr 2  09 7F                ora     #$7F
0003E0r 2  25 rr                and     FAC+1
0003E2r 2  85 rr                sta     FAC+1
0003E4r 2  A9 rr                lda     #<STEP
0003E6r 2  A0 rr                ldy     #>STEP
0003E8r 2  85 rr                sta     INDEX
0003EAr 2  84 rr                sty     INDEX+1
0003ECr 2  4C rr rr             jmp     FRM_STACK3
0003EFr 2               
0003EFr 2               ; ----------------------------------------------------------------------------
0003EFr 2               ; "STEP" PHRASE OF "FOR" STATEMENT
0003EFr 2               ; ----------------------------------------------------------------------------
0003EFr 2               STEP:
0003EFr 2  A9 rr                lda     #<CON_ONE
0003F1r 2  A0 rr                ldy     #>CON_ONE
0003F3r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0003F6r 2  20 rr rr             jsr     CHRGOT
0003F9r 2  C9 A3                cmp     #TOKEN_STEP
0003FBr 2  D0 06                bne     L2665
0003FDr 2  20 rr rr             jsr     CHRGET
000400r 2  20 rr rr             jsr     FRMNUM
000403r 2               L2665:
000403r 2  20 rr rr             jsr     SIGN
000406r 2  20 rr rr             jsr     FRM_STACK2
000409r 2  A5 rr                lda     FORPNT+1
00040Br 2  48                   pha
00040Cr 2  A5 rr                lda     FORPNT
00040Er 2  48                   pha
00040Fr 2  A9 81                lda     #$81
000411r 2  48                   pha
000412r 2               
000412r 2               ; ----------------------------------------------------------------------------
000412r 2               ; PERFORM NEXT STATEMENT
000412r 2               ; ----------------------------------------------------------------------------
000412r 2               NEWSTT:
000412r 2  20 rr rr             jsr     ISCNTC
000415r 2  A5 rr                lda     TXTPTR
000417r 2  A4 rr                ldy     TXTPTR+1
000419r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000419r 2  C0 09                cpy     #>INPUTBUFFER
00041Br 2                 .ifdef CBM2
00041Br 2                       nop
00041Br 2                 .endif
00041Br 2  F0 04                beq     LC6D4
00041Dr 2               .else
00041Dr 2               ; BUG on AppleSoft I,
00041Dr 2               ; fixed differently on AppleSoft II (ldx/inx)
00041Dr 2                       beq     L2683
00041Dr 2               .endif
00041Dr 2  85 rr                sta     OLDTEXT
00041Fr 2  84 rr                sty     OLDTEXT+1
000421r 2               LC6D4:
000421r 2  A0 00                ldy     #$00
000423r 2               L2683:
000423r 2  B1 rr                lda     (TXTPTR),y
000425r 2               .ifndef CONFIG_11
000425r 2                       beq     LA5DC	; old: 1 cycle more on generic case
000425r 2                       cmp     #$3A
000425r 2                       beq     NEWSTT2
000425r 2               SYNERR1:
000425r 2                       jmp     SYNERR
000425r 2               LA5DC:
000425r 2               .else
000425r 2  D0 40                bne     COLON; new: 1 cycle more on ":" case
000427r 2               .endif
000427r 2  A0 02                ldy     #$02
000429r 2  B1 rr                lda     (TXTPTR),y
00042Br 2  18                   clc
00042Cr 2               .ifdef CONFIG_2
00042Cr 2  D0 03 4C rr          jeq     L2701
000430r 2  rr           
000431r 2               .else
000431r 2                       beq     L2701
000431r 2               .endif
000431r 2  C8                   iny
000432r 2  B1 rr                lda     (TXTPTR),y
000434r 2  85 rr                sta     CURLIN
000436r 2  C8                   iny
000437r 2  B1 rr                lda     (TXTPTR),y
000439r 2  85 rr                sta     CURLIN+1
00043Br 2  98                   tya
00043Cr 2  65 rr                adc     TXTPTR
00043Er 2  85 rr                sta     TXTPTR
000440r 2  90 02                bcc     NEWSTT2
000442r 2  E6 rr                inc     TXTPTR+1
000444r 2               NEWSTT2:
000444r 2  20 rr rr             jsr     CHRGET
000447r 2  20 rr rr             jsr     EXECUTE_STATEMENT
00044Ar 2  4C rr rr             jmp     NEWSTT
00044Dr 2               
00044Dr 2               ; ----------------------------------------------------------------------------
00044Dr 2               ; EXECUTE A STATEMENT
00044Dr 2               ;
00044Dr 2               ; (A) IS FIRST CHAR OF STATEMENT
00044Dr 2               ; CARRY IS SET
00044Dr 2               ; ----------------------------------------------------------------------------
00044Dr 2               EXECUTE_STATEMENT:
00044Dr 2               .ifndef CONFIG_11A
00044Dr 2                       beq     RET1
00044Dr 2               .else
00044Dr 2  F0 3C                beq     RET2
00044Fr 2               .endif
00044Fr 2               .ifndef CONFIG_11
00044Fr 2                       sec
00044Fr 2               .endif
00044Fr 2               EXECUTE_STATEMENT1:
00044Fr 2  E9 80                sbc     #$80
000451r 2               .ifndef CONFIG_11
000451r 2                       jcc     LET	; old: 1 cycle more on instr.
000451r 2               .else
000451r 2  90 11                bcc     LET1; new: 1 cycle more on assignment
000453r 2               .endif
000453r 2  C9 1D                cmp     #NUM_TOKENS
000455r 2               .ifdef CONFIG_2
000455r 2  B0 17                bcs     LC721
000457r 2               .else
000457r 2                       bcs     SYNERR1
000457r 2               .endif
000457r 2  0A                   asl     a
000458r 2  A8                   tay
000459r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
00045Cr 2  48                   pha
00045Dr 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000460r 2  48                   pha
000461r 2  4C rr rr             jmp     CHRGET
000464r 2               
000464r 2               .ifdef CONFIG_11
000464r 2               LET1:
000464r 2  4C rr rr             jmp     LET
000467r 2               
000467r 2               COLON:
000467r 2  C9 3A                cmp     #$3A
000469r 2  F0 D9                beq     NEWSTT2
00046Br 2               SYNERR1:
00046Br 2  4C rr rr             jmp     SYNERR
00046Er 2               .endif
00046Er 2               
00046Er 2               .ifdef CONFIG_2; GO TO
00046Er 2               LC721:
00046Er 2  C9 45                cmp     #TOKEN_GO-$80
000470r 2  D0 F9                bne     SYNERR1
000472r 2  20 rr rr             jsr     CHRGET
000475r 2  A9 9E                lda     #TOKEN_TO
000477r 2  20 rr rr             jsr     SYNCHR
00047Ar 2  4C rr rr             jmp     GOTO
00047Dr 2               .endif
00047Dr 2               
00047Dr 2               ; ----------------------------------------------------------------------------
00047Dr 2               ; "RESTORE" STATEMENT
00047Dr 2               ; ----------------------------------------------------------------------------
00047Dr 2               RESTORE:
00047Dr 2  38                   sec
00047Er 2  A5 rr                lda     TXTTAB
000480r 2  E9 01                sbc     #$01
000482r 2  A4 rr                ldy     TXTTAB+1
000484r 2  B0 01                bcs     SETDA
000486r 2  88                   dey
000487r 2               SETDA:
000487r 2  85 rr                sta     DATPTR
000489r 2  84 rr                sty     DATPTR+1
00048Br 2               RET2:
00048Br 2  60                   rts
00048Cr 2               
00048Cr 2               .include "iscntc.s"
00048Cr 3               .segment "CODE"
00048Cr 3               ; ----------------------------------------------------------------------------
00048Cr 3               ; SEE IF CONTROL-C TYPED
00048Cr 3               ; ----------------------------------------------------------------------------
00048Cr 3               .ifdef CONFIG_CBM_ALL
00048Cr 3               .include "cbm_iscntc.s"
00048Cr 3               .endif
00048Cr 3               .ifdef KBD
00048Cr 3               .include "kbd_iscntc.s"
00048Cr 3               .endif
00048Cr 3               .ifdef OSI
00048Cr 3               .include "osi_iscntc.s"
00048Cr 3               .endif
00048Cr 3               .ifdef APPLE
00048Cr 3               .include "apple_iscntc.s"
00048Cr 3               .endif
00048Cr 3               .ifdef KIM
00048Cr 3               .include "kim_iscntc.s"
00048Cr 3               .endif
00048Cr 3               .ifdef MICROTAN
00048Cr 3               .include "microtan_iscntc.s"
00048Cr 3               .endif
00048Cr 3               .ifdef AIM65
00048Cr 3               .include "aim65_iscntc.s"
00048Cr 3               .endif
00048Cr 3               .ifdef SYM1
00048Cr 3               .include "sym1_iscntc.s"
00048Cr 3               .endif
00048Cr 3               ;!!! runs into "STOP"
00048Cr 3               
00048Cr 2               ;!!! runs into "STOP"
00048Cr 2               ; ----------------------------------------------------------------------------
00048Cr 2               ; "STOP" STATEMENT
00048Cr 2               ; ----------------------------------------------------------------------------
00048Cr 2               STOP:
00048Cr 2  B0 01                bcs     END2
00048Er 2               
00048Er 2               ; ----------------------------------------------------------------------------
00048Er 2               ; "END" STATEMENT
00048Er 2               ; ----------------------------------------------------------------------------
00048Er 2               END:
00048Er 2  18                   clc
00048Fr 2               END2:
00048Fr 2  D0 40                bne     RET1
000491r 2  A5 rr                lda     TXTPTR
000493r 2  A4 rr                ldy     TXTPTR+1
000495r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000495r 2               ; BUG on AppleSoft I
000495r 2               ; fix exists on AppleSoft II
000495r 2               ; TXTPTR+1 will always be > 0
000495r 2  A6 rr                ldx     CURLIN+1
000497r 2  E8                   inx
000498r 2               .endif
000498r 2  F0 0C                beq     END4
00049Ar 2  85 rr                sta     OLDTEXT
00049Cr 2  84 rr                sty     OLDTEXT+1
00049Er 2               CONTROL_C_TYPED:
00049Er 2  A5 rr                lda     CURLIN
0004A0r 2  A4 rr                ldy     CURLIN+1
0004A2r 2  85 rr                sta     OLDLIN
0004A4r 2  84 rr                sty     OLDLIN+1
0004A6r 2               END4:
0004A6r 2  68                   pla
0004A7r 2  68                   pla
0004A8r 2               L2701:
0004A8r 2  A9 rr                lda     #<QT_BREAK
0004AAr 2  A0 rr                ldy     #>QT_BREAK
0004ACr 2               .ifndef KBD
0004ACr 2  A2 00                ldx     #$00
0004AEr 2  86 rr                stx     Z14
0004B0r 2               .endif
0004B0r 2  90 03                bcc     L270E
0004B2r 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004B5r 2               L270E:
0004B5r 2  4C rr rr             jmp     RESTART
0004B8r 2               .ifdef KBD
0004B8r 2               LE664:
0004B8r 2                       tay
0004B8r 2                       jmp     SNGFLT
0004B8r 2               .endif
0004B8r 2               
0004B8r 2               ; ----------------------------------------------------------------------------
0004B8r 2               ; "CONT" COMMAND
0004B8r 2               ; ----------------------------------------------------------------------------
0004B8r 2               CONT:
0004B8r 2  D0 17                bne     RET1
0004BAr 2  A2 1E                ldx     #ERR_CANTCONT
0004BCr 2  A4 rr                ldy     OLDTEXT+1
0004BEr 2  D0 03                bne     L271C
0004C0r 2  4C rr rr             jmp     ERROR
0004C3r 2               L271C:
0004C3r 2  A5 rr                lda     OLDTEXT
0004C5r 2  85 rr                sta     TXTPTR
0004C7r 2  84 rr                sty     TXTPTR+1
0004C9r 2  A5 rr                lda     OLDLIN
0004CBr 2  A4 rr                ldy     OLDLIN+1
0004CDr 2  85 rr                sta     CURLIN
0004CFr 2  84 rr                sty     CURLIN+1
0004D1r 2               RET1:
0004D1r 2  60                   rts
0004D2r 2               
0004D2r 2               .ifdef KBD
0004D2r 2               PRT:
0004D2r 2                       jsr     GETBYT
0004D2r 2                       txa
0004D2r 2               ; not ROR bug safe
0004D2r 2                       ror     a
0004D2r 2                       ror     a
0004D2r 2                       ror     a
0004D2r 2                       sta     $8F
0004D2r 2                       rts
0004D2r 2               
0004D2r 2               LE68C:
0004D2r 2                       ldy     #$12
0004D2r 2               LE68E:
0004D2r 2                       lda     LEA30,y
0004D2r 2                       sta     $03A2,y
0004D2r 2                       dey
0004D2r 2                       bpl     LE68E
0004D2r 2                       rts
0004D2r 2               .endif
0004D2r 2               
0004D2r 2               .ifndef AIM65
0004D2r 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004D2r 2               ; CBM1 has the keyword removed,
0004D2r 2               ; but the code is still here
0004D2r 2               NULL:
0004D2r 2  20 rr rr             jsr     GETBYT
0004D5r 2  D0 FA                bne     RET1
0004D7r 2  E8                   inx
0004D8r 2  E0 0A                cpx     #NULL_MAX
0004DAr 2  B0 04                bcs     L2739
0004DCr 2  CA                   dex
0004DDr 2  86 rr                stx     Z15
0004DFr 2               L2738:
0004DFr 2  60                   rts
0004E0r 2               L2739:
0004E0r 2  4C rr rr             jmp     IQERR
0004E3r 2               .endif
0004E3r 2               .ifndef CONFIG_11A
0004E3r 2               CLEAR:
0004E3r 2                       bne     RET1
0004E3r 2                       jmp     CLEARC
0004E3r 2               .endif
0004E3r 2               .endif
0004E3r 2               
0004E3r 1               .include "loadsave.s"
0004E3r 2               .segment "CODE"
0004E3r 2               
0004E3r 2               .ifdef APPLE
0004E3r 2               .include "apple_loadsave.s"
0004E3r 2               .endif
0004E3r 2               .ifdef KIM
0004E3r 2               .include "kim_loadsave.s"
0004E3r 2               .endif
0004E3r 2               .ifdef MICROTAN
0004E3r 2               .include "microtan_loadsave.s"
0004E3r 2               .endif
0004E3r 2               .ifdef AIM65
0004E3r 2               .include "aim65_loadsave.s"
0004E3r 2               .endif
0004E3r 2               .ifdef SYM1
0004E3r 2               .include "sym1_loadsave.s"
0004E3r 2               .endif
0004E3r 2               
0004E3r 1               .include "flow2.s"
0004E3r 2               .segment "CODE"
0004E3r 2               .ifdef DB6502
0004E3r 2               EXIT_BASIC:
0004E3r 2               ; ----------------------------------------------------------------------------
0004E3r 2               ; "EXIT" COMMAND
0004E3r 2               ; ----------------------------------------------------------------------------
0004E3r 2  A9 FF                lda     #$ff
0004E5r 2  85 rr                sta     EXITFLAG
0004E7r 2  60                   rts
0004E8r 2               .endif
0004E8r 2               
0004E8r 2               ; ----------------------------------------------------------------------------
0004E8r 2               ; "RUN" COMMAND
0004E8r 2               ; ----------------------------------------------------------------------------
0004E8r 2               RUN:
0004E8r 2  D0 03                bne     L27CF
0004EAr 2  4C rr rr             jmp     SETPTRS
0004EDr 2               L27CF:
0004EDr 2  20 rr rr             jsr     CLEARC
0004F0r 2  4C rr rr             jmp     L27E9
0004F3r 2               
0004F3r 2               ; ----------------------------------------------------------------------------
0004F3r 2               ; "GOSUB" STATEMENT
0004F3r 2               ;
0004F3r 2               ; LEAVES 7 BYTES ON STACK:
0004F3r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
0004F3r 2               ; 2 -- TXTPTR
0004F3r 2               ; 2 -- LINE #
0004F3r 2               ; 1 -- GOSUB TOKEN
0004F3r 2               ; ----------------------------------------------------------------------------
0004F3r 2               GOSUB:
0004F3r 2  A9 03                lda     #$03
0004F5r 2  20 rr rr             jsr     CHKMEM
0004F8r 2  A5 rr                lda     TXTPTR+1
0004FAr 2  48                   pha
0004FBr 2  A5 rr                lda     TXTPTR
0004FDr 2  48                   pha
0004FEr 2  A5 rr                lda     CURLIN+1
000500r 2  48                   pha
000501r 2  A5 rr                lda     CURLIN
000503r 2  48                   pha
000504r 2  A9 8D                lda     #TOKEN_GOSUB
000506r 2  48                   pha
000507r 2               L27E9:
000507r 2  20 rr rr             jsr     CHRGOT
00050Ar 2  20 rr rr             jsr     GOTO
00050Dr 2  4C rr rr             jmp     NEWSTT
000510r 2               
000510r 2               ; ----------------------------------------------------------------------------
000510r 2               ; "GOTO" STATEMENT
000510r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000510r 2               ; ----------------------------------------------------------------------------
000510r 2               GOTO:
000510r 2  20 rr rr             jsr     LINGET
000513r 2  20 rr rr             jsr     REMN
000516r 2  A5 rr                lda     CURLIN+1
000518r 2  C5 rr                cmp     LINNUM+1
00051Ar 2  B0 0B                bcs     L2809
00051Cr 2  98                   tya
00051Dr 2  38                   sec
00051Er 2  65 rr                adc     TXTPTR
000520r 2  A6 rr                ldx     TXTPTR+1
000522r 2  90 07                bcc     L280D
000524r 2  E8                   inx
000525r 2  B0 04                bcs     L280D
000527r 2               L2809:
000527r 2  A5 rr                lda     TXTTAB
000529r 2  A6 rr                ldx     TXTTAB+1
00052Br 2               L280D:
00052Br 2               .ifdef KBD
00052Br 2                       jsr     LF457
00052Br 2                       bne     UNDERR
00052Br 2               .else
00052Br 2  20 rr rr             jsr     FL1
00052Er 2  90 1E                bcc     UNDERR
000530r 2               .endif
000530r 2  A5 rr                lda     LOWTRX
000532r 2  E9 01                sbc     #$01
000534r 2  85 rr                sta     TXTPTR
000536r 2  A5 rr                lda     LOWTRX+1
000538r 2  E9 00                sbc     #$00
00053Ar 2  85 rr                sta     TXTPTR+1
00053Cr 2               L281E:
00053Cr 2  60                   rts
00053Dr 2               
00053Dr 2               ; ----------------------------------------------------------------------------
00053Dr 2               ; "POP" AND "RETURN" STATEMENTS
00053Dr 2               ; ----------------------------------------------------------------------------
00053Dr 2               POP:
00053Dr 2  D0 FD                bne     L281E
00053Fr 2  A9 FF                lda     #$FF
000541r 2               .ifdef CONFIG_2A
000541r 2  85 rr                sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
000543r 2               .else
000543r 2                       sta     FORPNT
000543r 2               .endif
000543r 2  20 rr rr             jsr     GTFORPNT
000546r 2  9A                   txs
000547r 2  C9 8D                cmp     #TOKEN_GOSUB
000549r 2  F0 0B                beq     RETURN
00054Br 2  A2 04                ldx     #ERR_NOGOSUB
00054Dr 2  2C                   .byte   $2C
00054Er 2               UNDERR:
00054Er 2  A2 0E                ldx     #ERR_UNDEFSTAT
000550r 2  4C rr rr             jmp     ERROR
000553r 2               ; ----------------------------------------------------------------------------
000553r 2               SYNERR2:
000553r 2  4C rr rr             jmp     SYNERR
000556r 2               ; ----------------------------------------------------------------------------
000556r 2               RETURN:
000556r 2  68                   pla
000557r 2  68                   pla
000558r 2  85 rr                sta     CURLIN
00055Ar 2  68                   pla
00055Br 2  85 rr                sta     CURLIN+1
00055Dr 2  68                   pla
00055Er 2  85 rr                sta     TXTPTR
000560r 2  68                   pla
000561r 2  85 rr                sta     TXTPTR+1
000563r 2               
000563r 2               ; ----------------------------------------------------------------------------
000563r 2               ; "DATA" STATEMENT
000563r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
000563r 2               ; ----------------------------------------------------------------------------
000563r 2               DATA:
000563r 2  20 rr rr             jsr     DATAN
000566r 2               
000566r 2               ; ----------------------------------------------------------------------------
000566r 2               ; ADD (Y) TO TXTPTR
000566r 2               ; ----------------------------------------------------------------------------
000566r 2               ADDON:
000566r 2  98                   tya
000567r 2  18                   clc
000568r 2  65 rr                adc     TXTPTR
00056Ar 2  85 rr                sta     TXTPTR
00056Cr 2  90 02                bcc     L2852
00056Er 2  E6 rr                inc     TXTPTR+1
000570r 2               L2852:
000570r 2  60                   rts
000571r 2               
000571r 2               ; ----------------------------------------------------------------------------
000571r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
000571r 2               ; ----------------------------------------------------------------------------
000571r 2               DATAN:
000571r 2  A2 3A                ldx     #$3A
000573r 2  2C                   .byte   $2C
000574r 2               REMN:
000574r 2  A2 00                ldx     #$00
000576r 2  86 rr                stx     CHARAC
000578r 2  A0 00                ldy     #$00
00057Ar 2  84 rr                sty     ENDCHR
00057Cr 2               L285E:
00057Cr 2  A5 rr                lda     ENDCHR
00057Er 2  A6 rr                ldx     CHARAC
000580r 2  85 rr                sta     CHARAC
000582r 2  86 rr                stx     ENDCHR
000584r 2               L2866:
000584r 2  B1 rr                lda     (TXTPTR),y
000586r 2  F0 E8                beq     L2852
000588r 2  C5 rr                cmp     ENDCHR
00058Ar 2  F0 E4                beq     L2852
00058Cr 2  C8                   iny
00058Dr 2  C9 22                cmp     #$22
00058Fr 2               .ifndef CONFIG_11
00058Fr 2                       beq     L285E; old: swap & cont is faster
00058Fr 2                       bne     L2866
00058Fr 2               .else
00058Fr 2  D0 F3                bne     L2866; new: cont is faster
000591r 2  F0 E9                beq     L285E
000593r 2               .endif
000593r 2               
000593r 2               ; ----------------------------------------------------------------------------
000593r 2               ; "IF" STATEMENT
000593r 2               ; ----------------------------------------------------------------------------
000593r 2               IF:
000593r 2  20 rr rr             jsr     FRMEVL
000596r 2  20 rr rr             jsr     CHRGOT
000599r 2  C9 88                cmp     #TOKEN_GOTO
00059Br 2  F0 05                beq     L2884
00059Dr 2  A9 A1                lda     #TOKEN_THEN
00059Fr 2  20 rr rr             jsr     SYNCHR
0005A2r 2               L2884:
0005A2r 2  A5 rr                lda     FAC
0005A4r 2  D0 05                bne     L288D
0005A6r 2               
0005A6r 2               ; ----------------------------------------------------------------------------
0005A6r 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
0005A6r 2               ; ----------------------------------------------------------------------------
0005A6r 2               REM:
0005A6r 2  20 rr rr             jsr     REMN
0005A9r 2  F0 BB                beq     ADDON
0005ABr 2               L288D:
0005ABr 2  20 rr rr             jsr     CHRGOT
0005AEr 2  B0 03                bcs     L2895
0005B0r 2  4C rr rr             jmp     GOTO
0005B3r 2               L2895:
0005B3r 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005B6r 2               
0005B6r 2               ; ----------------------------------------------------------------------------
0005B6r 2               ; "ON" STATEMENT
0005B6r 2               ;
0005B6r 2               ; ON <EXP> GOTO <LIST>
0005B6r 2               ; ON <EXP> GOSUB <LIST>
0005B6r 2               ; ----------------------------------------------------------------------------
0005B6r 2               ON:
0005B6r 2  20 rr rr             jsr     GETBYT
0005B9r 2  48                   pha
0005BAr 2  C9 8D                cmp     #TOKEN_GOSUB
0005BCr 2  F0 04                beq     L28A4
0005BEr 2               L28A0:
0005BEr 2  C9 88                cmp     #TOKEN_GOTO
0005C0r 2  D0 91                bne     SYNERR2
0005C2r 2               L28A4:
0005C2r 2  C6 rr                dec     FAC_LAST
0005C4r 2  D0 04                bne     L28AC
0005C6r 2  68                   pla
0005C7r 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005CAr 2               L28AC:
0005CAr 2  20 rr rr             jsr     CHRGET
0005CDr 2  20 rr rr             jsr     LINGET
0005D0r 2  C9 2C                cmp     #$2C
0005D2r 2  F0 EE                beq     L28A4
0005D4r 2  68                   pla
0005D5r 2               L28B7:
0005D5r 2  60                   rts
0005D6r 2               
0005D6r 1               .include "misc1.s"
0005D6r 2               .segment "CODE"
0005D6r 2               
0005D6r 2               ; ----------------------------------------------------------------------------
0005D6r 2               ; CONVERT LINE NUMBER
0005D6r 2               ; ----------------------------------------------------------------------------
0005D6r 2               LINGET:
0005D6r 2  A2 00                ldx     #$00
0005D8r 2  86 rr                stx     LINNUM
0005DAr 2  86 rr                stx     LINNUM+1
0005DCr 2               L28BE:
0005DCr 2  B0 F7                bcs     L28B7
0005DEr 2  E9 2F                sbc     #$2F
0005E0r 2  85 rr                sta     CHARAC
0005E2r 2  A5 rr                lda     LINNUM+1
0005E4r 2  85 rr                sta     INDEX
0005E6r 2  C9 19                cmp     #$19
0005E8r 2  B0 D4                bcs     L28A0
0005EAr 2               ; <<<<<DANGEROUS CODE>>>>>
0005EAr 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
0005EAr 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
0005EAr 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
0005EAr 2               ; FOR OTHER CALLS TO LINGET.
0005EAr 2               ;
0005EAr 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
0005EAr 2               ; THEN TYPE "GO TO 437761".
0005EAr 2               ;
0005EAr 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
0005EAr 2               ; THE PROBLEM.  ($AB00 - $ABFF)
0005EAr 2               ; <<<<<DANGEROUS CODE>>>>>
0005EAr 2  A5 rr                lda     LINNUM
0005ECr 2  0A                   asl     a
0005EDr 2  26 rr                rol     INDEX
0005EFr 2  0A                   asl     a
0005F0r 2  26 rr                rol     INDEX
0005F2r 2  65 rr                adc     LINNUM
0005F4r 2  85 rr                sta     LINNUM
0005F6r 2  A5 rr                lda     INDEX
0005F8r 2  65 rr                adc     LINNUM+1
0005FAr 2  85 rr                sta     LINNUM+1
0005FCr 2  06 rr                asl     LINNUM
0005FEr 2  26 rr                rol     LINNUM+1
000600r 2  A5 rr                lda     LINNUM
000602r 2  65 rr                adc     CHARAC
000604r 2  85 rr                sta     LINNUM
000606r 2  90 02                bcc     L28EC
000608r 2  E6 rr                inc     LINNUM+1
00060Ar 2               L28EC:
00060Ar 2  20 rr rr             jsr     CHRGET
00060Dr 2  4C rr rr             jmp     L28BE
000610r 2               
000610r 2               ; ----------------------------------------------------------------------------
000610r 2               ; "LET" STATEMENT
000610r 2               ;
000610r 2               ; LET <VAR> = <EXP>
000610r 2               ; <VAR> = <EXP>
000610r 2               ; ----------------------------------------------------------------------------
000610r 2               LET:
000610r 2  20 rr rr             jsr     PTRGET
000613r 2  85 rr                sta     FORPNT
000615r 2  84 rr                sty     FORPNT+1
000617r 2  A9 AC                lda     #TOKEN_EQUAL
000619r 2  20 rr rr             jsr     SYNCHR
00061Cr 2               .ifndef CONFIG_SMALL
00061Cr 2                       lda     VALTYP+1
00061Cr 2                       pha
00061Cr 2               .endif
00061Cr 2  A5 rr                lda     VALTYP
00061Er 2  48                   pha
00061Fr 2  20 rr rr             jsr     FRMEVL
000622r 2  68                   pla
000623r 2  2A                   rol     a
000624r 2  20 rr rr             jsr     CHKVAL
000627r 2  D0 03                bne     LETSTRING
000629r 2               .ifndef CONFIG_SMALL
000629r 2                       pla
000629r 2               LET2:
000629r 2                       bpl     L2923
000629r 2                       jsr     ROUND_FAC
000629r 2                       jsr     AYINT
000629r 2                       ldy     #$00
000629r 2                       lda     FAC+3
000629r 2                       sta     (FORPNT),y
000629r 2                       iny
000629r 2                       lda     FAC+4
000629r 2                       sta     (FORPNT),y
000629r 2                       rts
000629r 2               L2923:
000629r 2               .endif
000629r 2               
000629r 2               ; ----------------------------------------------------------------------------
000629r 2               ; REAL VARIABLE = EXPRESSION
000629r 2               ; ----------------------------------------------------------------------------
000629r 2  4C rr rr             jmp     SETFOR
00062Cr 2               LETSTRING:
00062Cr 2               .ifndef CONFIG_SMALL
00062Cr 2                       pla
00062Cr 2               .endif
00062Cr 2               
00062Cr 2               ; ----------------------------------------------------------------------------
00062Cr 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00062Cr 2               ; ----------------------------------------------------------------------------
00062Cr 2               PUTSTR:
00062Cr 2               .ifdef CONFIG_CBM_ALL
00062Cr 2                       ldy     FORPNT+1
00062Cr 2                 .ifdef CBM1
00062Cr 2                       cpy     #$D0	; TI$
00062Cr 2                 .else
00062Cr 2                       cpy     #$DE
00062Cr 2                 .endif
00062Cr 2                       bne     LC92B
00062Cr 2                       jsr     FREFAC
00062Cr 2                       cmp     #$06
00062Cr 2                 .ifdef CBM2
00062Cr 2                       bne     IQERR1
00062Cr 2                 .else
00062Cr 2                       jne     IQERR
00062Cr 2                 .endif
00062Cr 2                       ldy     #$00
00062Cr 2                       sty     FAC
00062Cr 2                       sty     FACSIGN
00062Cr 2               LC8E8:
00062Cr 2                       sty     STRNG2
00062Cr 2                       jsr     LC91C
00062Cr 2                       jsr     MUL10
00062Cr 2                       inc     STRNG2
00062Cr 2                       ldy     STRNG2
00062Cr 2                       jsr     LC91C
00062Cr 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
00062Cr 2                       tax
00062Cr 2                       beq     LC902
00062Cr 2                       inx
00062Cr 2                       txa
00062Cr 2                       jsr     LD9BF
00062Cr 2               LC902:
00062Cr 2                       ldy     STRNG2
00062Cr 2                       iny
00062Cr 2                       cpy     #$06
00062Cr 2                       bne     LC8E8
00062Cr 2                       jsr     MUL10
00062Cr 2                       jsr     QINT
00062Cr 2                       ldx     #$02
00062Cr 2                       sei
00062Cr 2               LC912:
00062Cr 2                       lda     FAC+2,x
00062Cr 2                       sta     TISTR,x
00062Cr 2                       dex
00062Cr 2                       bpl     LC912
00062Cr 2                       cli
00062Cr 2                       rts
00062Cr 2               LC91C:
00062Cr 2                       lda     (INDEX),y
00062Cr 2                       jsr     CHRGOT2
00062Cr 2                       bcc     LC926
00062Cr 2               IQERR1:
00062Cr 2                       jmp     IQERR
00062Cr 2               LC926:
00062Cr 2                       sbc     #$2F
00062Cr 2                       jmp     ADDACC
00062Cr 2               LC92B:
00062Cr 2               .endif
00062Cr 2  A0 02                ldy     #$02
00062Er 2  B1 rr                lda     (FAC_LAST-1),y
000630r 2  C5 rr                cmp     FRETOP+1
000632r 2  90 17                bcc     L2946
000634r 2  D0 07                bne     L2938
000636r 2  88                   dey
000637r 2  B1 rr                lda     (FAC_LAST-1),y
000639r 2  C5 rr                cmp     FRETOP
00063Br 2  90 0E                bcc     L2946
00063Dr 2               L2938:
00063Dr 2  A4 rr                ldy     FAC_LAST
00063Fr 2  C4 rr                cpy     VARTAB+1
000641r 2  90 08                bcc     L2946
000643r 2  D0 0D                bne     L294D
000645r 2  A5 rr                lda     FAC_LAST-1
000647r 2  C5 rr                cmp     VARTAB
000649r 2  B0 07                bcs     L294D
00064Br 2               L2946:
00064Br 2  A5 rr                lda     FAC_LAST-1
00064Dr 2  A4 rr                ldy     FAC_LAST
00064Fr 2  4C rr rr             jmp     L2963
000652r 2               L294D:
000652r 2  A0 00                ldy     #$00
000654r 2  B1 rr                lda     (FAC_LAST-1),y
000656r 2  20 rr rr             jsr     STRINI
000659r 2  A5 rr                lda     DSCPTR
00065Br 2  A4 rr                ldy     DSCPTR+1
00065Dr 2  85 rr                sta     STRNG1
00065Fr 2  84 rr                sty     STRNG1+1
000661r 2  20 rr rr             jsr     MOVINS
000664r 2  A9 rr                lda     #FAC
000666r 2  A0 00                ldy     #$00
000668r 2               L2963:
000668r 2  85 rr                sta     DSCPTR
00066Ar 2  84 rr                sty     DSCPTR+1
00066Cr 2  20 rr rr             jsr     FRETMS
00066Fr 2  A0 00                ldy     #$00
000671r 2  B1 rr                lda     (DSCPTR),y
000673r 2  91 rr                sta     (FORPNT),y
000675r 2  C8                   iny
000676r 2  B1 rr                lda     (DSCPTR),y
000678r 2  91 rr                sta     (FORPNT),y
00067Ar 2  C8                   iny
00067Br 2  B1 rr                lda     (DSCPTR),y
00067Dr 2  91 rr                sta     (FORPNT),y
00067Fr 2               RET5:
00067Fr 2  60                   rts
000680r 2               .ifdef AIM65
000680r 2               LB89D:
000680r 2                       cmp     #$21
000680r 2                       bne     RET5
000680r 2                       lda     #$80
000680r 2                       sta     PRIFLG
000680r 2                       jmp     CHRGET
000680r 2               .endif
000680r 2               
000680r 2               .ifdef CONFIG_FILE
000680r 2               PRINTH:
000680r 2                       jsr     CMD
000680r 2                       jmp     LCAD6
000680r 2               CMD:
000680r 2                       jsr     GETBYT
000680r 2                       beq     LC98F
000680r 2                       lda     #$2C
000680r 2                       jsr     SYNCHR
000680r 2               LC98F:
000680r 2                       php
000680r 2                       jsr     CHKOUT
000680r 2                       stx     CURDVC
000680r 2                       plp
000680r 2                       jmp     PRINT
000680r 2               .endif
000680r 2               
000680r 2               
000680r 1               .include "print.s"
000680r 2               .segment "CODE"
000680r 2               
000680r 2               .ifdef AIM65
000680r 2               PRINT:
000680r 2                       lda     PRIFLG
000680r 2                       sta     ZBE
000680r 2                       jsr     L297E
000680r 2               LB8B1:
000680r 2                       lda     ZBE
000680r 2                       sta     PRIFLG
000680r 2                       rts
000680r 2               .endif
000680r 2               
000680r 2               PRSTRING:
000680r 2  20 rr rr             jsr     STRPRT
000683r 2               L297E:
000683r 2  20 rr rr             jsr     CHRGOT
000686r 2               
000686r 2               ; ----------------------------------------------------------------------------
000686r 2               ; "PRINT" STATEMENT
000686r 2               ; ----------------------------------------------------------------------------
000686r 2               .ifndef AIM65
000686r 2               PRINT:
000686r 2               .endif
000686r 2  F0 36                beq     CRDO
000688r 2               PRINT2:
000688r 2  F0 3D                beq     L29DD
00068Ar 2               .ifdef AIM65
00068Ar 2                       jsr     LB89D
00068Ar 2                       beq     L29DD
00068Ar 2               .endif
00068Ar 2  C9 9D                cmp     #TOKEN_TAB
00068Cr 2  F0 51                beq     L29F5
00068Er 2  C9 A0                cmp     #TOKEN_SPC
000690r 2               .ifdef CONFIG_2
000690r 2  18                   clc	; also AppleSoft II
000691r 2               .endif
000691r 2  F0 4C                beq     L29F5
000693r 2  C9 2C                cmp     #','
000695r 2               ; Pre-KIM had no CLC. KIM added the CLC
000695r 2               ; here. Post-KIM moved the CLC up...
000695r 2               ; (makes no sense on KIM, liveness = 0)
000695r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
000695r 2                       clc
000695r 2               .endif
000695r 2  F0 31                beq     L29DE
000697r 2  C9 3B                cmp     #$3B
000699r 2  F0 59                beq     L2A0D
00069Br 2  20 rr rr             jsr     FRMEVL
00069Er 2  24 rr                bit     VALTYP
0006A0r 2  30 DE                bmi     PRSTRING
0006A2r 2  20 rr rr             jsr     FOUT
0006A5r 2  20 rr rr             jsr     STRLIT
0006A8r 2               .ifndef CONFIG_NO_CR
0006A8r 2  A0 00                ldy     #$00
0006AAr 2  B1 rr                lda     (FAC_LAST-1),y
0006ACr 2  18                   clc
0006ADr 2  65 rr                adc     POSX
0006AFr 2                 .ifdef KBD
0006AFr 2                       cmp     #$28
0006AFr 2                 .else
0006AFr 2  C5 rr                cmp     Z17
0006B1r 2                 .endif
0006B1r 2  90 03                bcc     L29B1
0006B3r 2  20 rr rr             jsr     CRDO
0006B6r 2               L29B1:
0006B6r 2               .endif
0006B6r 2  20 rr rr             jsr     STRPRT
0006B9r 2               .ifdef KBD
0006B9r 2                       jmp     L297E
0006B9r 2               .else
0006B9r 2  20 rr rr             jsr     OUTSP
0006BCr 2  D0 C5                bne     L297E ; branch always
0006BEr 2               .endif
0006BEr 2               
0006BEr 2               .ifdef KBD
0006BEr 2               ; PATCHES
0006BEr 2               LE86C:
0006BEr 2                       pla
0006BEr 2                       jmp     CONTROL_C_TYPED
0006BEr 2               LE870:
0006BEr 2                       jsr     GETBYT
0006BEr 2                       txa
0006BEr 2               LE874:
0006BEr 2                       beq     LE878
0006BEr 2                       bpl     LE8F2
0006BEr 2               LE878:
0006BEr 2                       jmp     IQERR
0006BEr 2               ; PATCHES
0006BEr 2               .endif
0006BEr 2               
0006BEr 2               
0006BEr 2               
0006BEr 2               .if (!.def(KBD)) && (!.def(DB6502))
0006BEr 2               L29B9:
0006BEr 2                 .ifdef CBM2
0006BEr 2                       lda     #$00
0006BEr 2                       sta     INPUTBUFFER,x
0006BEr 2                       ldx     #<(INPUTBUFFER-1)
0006BEr 2                       ldy     #>(INPUTBUFFER-1)
0006BEr 2                 .else
0006BEr 2                   .ifndef APPLE
0006BEr 2                     .ifdef DB6502
0006BEr 2                       stz     INPUTBUFFER,x
0006BEr 2                       ldx     #<(INPUTBUFFER-1)
0006BEr 2                       ldy     #>(INPUTBUFFER-1)
0006BEr 2                     .else
0006BEr 2                       ldy     #$00
0006BEr 2                       sty     INPUTBUFFER,x
0006BEr 2                       ldx     #LINNUM+1
0006BEr 2                     .endif
0006BEr 2                   .endif
0006BEr 2                   .if .def(MICROTAN) || .def(SYM1)
0006BEr 2                       bne     CRDO2
0006BEr 2               	.endif
0006BEr 2                 .endif
0006BEr 2                 .ifdef CONFIG_FILE
0006BEr 2                       lda     CURDVC
0006BEr 2                       bne     L29DD
0006BEr 2                 .endif
0006BEr 2               .endif
0006BEr 2               
0006BEr 2               
0006BEr 2               CRDO:
0006BEr 2               .ifndef DB6502
0006BEr 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
0006BEr 2                       lda     CURDVC
0006BEr 2                       bne     LC9D8
0006BEr 2                       sta     POSX
0006BEr 2               LC9D8:
0006BEr 2               .endif
0006BEr 2                       lda     #CRLF_1
0006BEr 2               .ifndef CONFIG_CBM_ALL
0006BEr 2                       sta     POSX
0006BEr 2               .endif
0006BEr 2                       jsr     OUTDO
0006BEr 2               CRDO2:
0006BEr 2                       lda     #CRLF_2
0006BEr 2                       jsr     OUTDO
0006BEr 2               
0006BEr 2               PRINTNULLS:
0006BEr 2               .if .def(KBD) || .def(AIM65)
0006BEr 2                       lda     #$00
0006BEr 2                       sta     POSX
0006BEr 2                       eor     #$FF
0006BEr 2               .else
0006BEr 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0006BEr 2                   .ifdef CONFIG_FILE
0006BEr 2                   ; Although there is no statement for it,
0006BEr 2                   ; CBM1 had NULL support and ignores
0006BEr 2                   ; it when not targeting the screen,
0006BEr 2                   ; CBM2 dropped it completely.
0006BEr 2                       lda     CURDVC
0006BEr 2                       bne     L29DD
0006BEr 2                   .endif
0006BEr 2                       txa
0006BEr 2                       pha
0006BEr 2                       ldx     Z15
0006BEr 2                       beq     L29D9
0006BEr 2                     .ifdef SYM1
0006BEr 2                       lda     #$FF
0006BEr 2                     .else
0006BEr 2                       lda     #$00
0006BEr 2                     .endif
0006BEr 2               L29D3:
0006BEr 2                       jsr     OUTDO
0006BEr 2                       dex
0006BEr 2                       bne     L29D3
0006BEr 2               L29D9:
0006BEr 2                       stx     POSX
0006BEr 2                       pla
0006BEr 2                       tax
0006BEr 2                 .else
0006BEr 2                   .ifndef CONFIG_2
0006BEr 2                       lda     #$00
0006BEr 2                       sta     POSX
0006BEr 2                   .endif
0006BEr 2                       eor     #$FF
0006BEr 2                 .endif
0006BEr 2               .endif
0006BEr 2               .else
0006BEr 2  20 rr rr       jsr _tty_send_newline
0006C1r 2               PRINTNULLS:
0006C1r 2  A9 00                  lda     #$00
0006C3r 2  85 rr                  sta     POSX
0006C5r 2  49 FF                  eor     #$FF
0006C7r 2               .endif
0006C7r 2               L29DD:
0006C7r 2  60                   rts
0006C8r 2               L29DE:
0006C8r 2  A5 rr                lda     POSX
0006CAr 2               .ifndef CONFIG_NO_CR
0006CAr 2                 .ifdef KBD
0006CAr 2                       cmp     #$1A
0006CAr 2                 .else
0006CAr 2  C5 rr                cmp     Z18
0006CCr 2                 .endif
0006CCr 2  90 06                bcc     L29EA
0006CEr 2  20 rr rr             jsr     CRDO
0006D1r 2  4C rr rr             jmp     L2A0D
0006D4r 2               L29EA:
0006D4r 2               .endif
0006D4r 2  38                   sec
0006D5r 2               L29EB:
0006D5r 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
0006D5r 2                       sbc     #$0A
0006D5r 2               .else
0006D5r 2                 .ifdef KBD
0006D5r 2                       sbc     #$0D
0006D5r 2                 .else
0006D5r 2  E9 0E                sbc     #$0E
0006D7r 2                 .endif
0006D7r 2               .endif
0006D7r 2  B0 FC                bcs     L29EB
0006D9r 2  49 FF                eor     #$FF
0006DBr 2  69 01                adc     #$01
0006DDr 2  D0 10                bne     L2A08
0006DFr 2               L29F5:
0006DFr 2               .ifdef CONFIG_11A
0006DFr 2  08                   php
0006E0r 2               .else
0006E0r 2                       pha
0006E0r 2               .endif
0006E0r 2  20 rr rr             jsr     GTBYTC
0006E3r 2  C9 29                cmp     #')'
0006E5r 2               .ifdef CONFIG_11A
0006E5r 2                 .ifdef CONFIG_2
0006E5r 2  D0 61                bne     SYNERR4
0006E7r 2                 .else
0006E7r 2                       jne     SYNERR
0006E7r 2                 .endif
0006E7r 2  28                   plp
0006E8r 2  90 06                bcc     L2A09
0006EAr 2               .else
0006EAr 2                 .ifdef CONFIG_11
0006EAr 2                       jne     SYNERR
0006EAr 2                 .else
0006EAr 2                       bne     SYNERR4
0006EAr 2                 .endif
0006EAr 2                       pla
0006EAr 2                       cmp     #TOKEN_TAB
0006EAr 2                 .ifdef CONFIG_11
0006EAr 2                       bne     L2A09
0006EAr 2                 .else
0006EAr 2                       bne     L2A0A
0006EAr 2                 .endif
0006EAr 2               .endif
0006EAr 2  8A                   txa
0006EBr 2  E5 rr                sbc     POSX
0006EDr 2  90 05                bcc     L2A0D
0006EFr 2               .ifndef CONFIG_11
0006EFr 2                       beq     L2A0D
0006EFr 2               .endif
0006EFr 2               L2A08:
0006EFr 2  AA                   tax
0006F0r 2               .ifdef CONFIG_11
0006F0r 2               L2A09:
0006F0r 2  E8                   inx
0006F1r 2               .endif
0006F1r 2               L2A0A:
0006F1r 2               .ifndef CONFIG_11
0006F1r 2                       jsr     OUTSP
0006F1r 2               .endif
0006F1r 2  CA                   dex
0006F2r 2               .ifndef CONFIG_11
0006F2r 2                       bne     L2A0A
0006F2r 2               .else
0006F2r 2  D0 06                bne     L2A13
0006F4r 2               .endif
0006F4r 2               L2A0D:
0006F4r 2  20 rr rr             jsr     CHRGET
0006F7r 2  4C rr rr             jmp     PRINT2
0006FAr 2               .ifdef CONFIG_11
0006FAr 2               L2A13:
0006FAr 2  20 rr rr             jsr     OUTSP
0006FDr 2  D0 F2                bne     L2A0A
0006FFr 2               .endif
0006FFr 2               
0006FFr 2               ; ----------------------------------------------------------------------------
0006FFr 2               ; PRINT STRING AT (Y,A)
0006FFr 2               ; ----------------------------------------------------------------------------
0006FFr 2               STROUT:
0006FFr 2  20 rr rr             jsr     STRLIT
000702r 2               
000702r 2               ; ----------------------------------------------------------------------------
000702r 2               ; PRINT STRING AT (FACMO,FACLO)
000702r 2               ; ----------------------------------------------------------------------------
000702r 2               STRPRT:
000702r 2  20 rr rr             jsr     FREFAC
000705r 2  AA                   tax
000706r 2  A0 00                ldy     #$00
000708r 2  E8                   inx
000709r 2               L2A22:
000709r 2  CA                   dex
00070Ar 2  F0 BB                beq     L29DD
00070Cr 2  B1 rr                lda     (INDEX),y
00070Er 2  20 rr rr             jsr     OUTDO
000711r 2  C8                   iny
000712r 2  C9 0D                cmp     #$0D
000714r 2  D0 F3                bne     L2A22
000716r 2  20 rr rr             jsr     PRINTNULLS
000719r 2  4C rr rr             jmp     L2A22
00071Cr 2               ; ----------------------------------------------------------------------------
00071Cr 2               OUTSP:
00071Cr 2               .ifdef CONFIG_FILE
00071Cr 2                 .ifndef CBM1
00071Cr 2               ; on non-screen devices, print SPACE
00071Cr 2               ; instead of CRSR RIGHT
00071Cr 2                       lda     CURDVC
00071Cr 2                       beq     LCA40
00071Cr 2                       lda     #$20
00071Cr 2                       .byte   $2C
00071Cr 2               LCA40:
00071Cr 2                 .endif
00071Cr 2                       lda     #$1D ; CRSR RIGHT
00071Cr 2               .else
00071Cr 2  A9 20                lda     #$20
00071Er 2               .endif
00071Er 2  2C                   .byte   $2C
00071Fr 2               OUTQUES:
00071Fr 2  A9 3F                lda     #$3F
000721r 2               
000721r 2               ; ----------------------------------------------------------------------------
000721r 2               ; PRINT CHAR FROM (A)
000721r 2               ; ----------------------------------------------------------------------------
000721r 2               OUTDO:
000721r 2               .ifndef KBD
000721r 2  24 rr                bit     Z14
000723r 2  30 14                bmi     L2A56
000725r 2               .endif
000725r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000725r 2               ; Commodore forgot to remove this in CBM1
000725r 2  48                   pha
000726r 2               .endif
000726r 2               .ifdef CBM1
000726r 2                       cmp     #$1D ; CRSR RIGHT
000726r 2                       beq     LCA6A
000726r 2                       cmp     #$9D ; CRSR LEFT
000726r 2                       beq     LCA5A
000726r 2                       cmp     #$14 ; DEL
000726r 2                       bne     LCA64
000726r 2               LCA5A:
000726r 2                       lda     POSX
000726r 2                       beq     L2A4E
000726r 2                       lda     CURDVC
000726r 2                       bne     L2A4E
000726r 2                       dec     POSX
000726r 2               LCA64:
000726r 2                       and     #$7F
000726r 2               .endif
000726r 2               .ifndef CBM2
000726r 2  C9 20                cmp     #$20
000728r 2  90 0B                bcc     L2A4E
00072Ar 2               .endif
00072Ar 2               LCA6A:
00072Ar 2               .ifdef CONFIG_CBM1_PATCHES
00072Ar 2                       lda     CURDVC
00072Ar 2                       jsr     PATCH6
00072Ar 2                       nop
00072Ar 2               .endif
00072Ar 2               .ifdef CONFIG_PRINT_CR
00072Ar 2  A5 rr                lda     POSX
00072Cr 2  C5 rr                cmp     Z17
00072Er 2  D0 03                bne     L2A4C
000730r 2                 .ifdef AIM65
000730r 2                       lda #$00
000730r 2                       sta POSX
000730r 2                 .elseif .def(APPLE)
000730r 2                       nop ; PATCH!
000730r 2                       nop ; don't print CR
000730r 2                       nop
000730r 2                 .else
000730r 2  20 rr rr             jsr     CRDO
000733r 2                 .endif
000733r 2               L2A4C:
000733r 2               .endif
000733r 2               .ifndef CONFIG_CBM_ALL
000733r 2  E6 rr                inc     POSX
000735r 2               .endif
000735r 2               L2A4E:
000735r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000735r 2               ; Commodore forgot to remove this in CBM1
000735r 2  68                   pla
000736r 2               .endif
000736r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000736r 2                       sty     DIMFLG
000736r 2               .endif
000736r 2               .ifdef CONFIG_IO_MSB
000736r 2                       ora     #$80
000736r 2               .endif
000736r 2  20 rr rr             jsr     MONCOUT
000739r 2               .ifdef CONFIG_IO_MSB
000739r 2                       and     #$7F
000739r 2               .endif
000739r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000739r 2                       ldy     DIMFLG
000739r 2               .endif
000739r 2               .ifdef OSI
000739r 2                       nop
000739r 2                       nop
000739r 2                       nop
000739r 2                       nop
000739r 2               .endif
000739r 2               L2A56:
000739r 2  29 FF                and     #$FF
00073Br 2               LE8F2:
00073Br 2  60                   rts
00073Cr 2               
00073Cr 2               ; ----------------------------------------------------------------------------
00073Cr 2               ; ???
00073Cr 2               ; ----------------------------------------------------------------------------
00073Cr 2               .ifdef KBD
00073Cr 2               LE8F3:
00073Cr 2                       pha
00073Cr 2                       lda     $047F
00073Cr 2                       clc
00073Cr 2                       beq     LE900
00073Cr 2                       lda     #$00
00073Cr 2                       sta     $047F
00073Cr 2                       sec
00073Cr 2               LE900:
00073Cr 2                       pla
00073Cr 2                       rts
00073Cr 2               .endif
00073Cr 2               
00073Cr 1               .include "input.s"
00073Cr 2               .segment "CODE"
00073Cr 2               
00073Cr 2               ; ----------------------------------------------------------------------------
00073Cr 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00073Cr 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00073Cr 2               ; BETWEEN INPUT, READ, AND GET
00073Cr 2               ; ----------------------------------------------------------------------------
00073Cr 2               INPUTERR:
00073Cr 2  A5 rr                lda     INPUTFLG
00073Er 2  F0 0B                beq     RESPERR	; INPUT
000740r 2               .ifndef SYM1
000740r 2               .ifndef CONFIG_SMALL
000740r 2               .ifdef CONFIG_10A
000740r 2               ; without this, it treats GET errors
000740r 2               ; like READ errors
000740r 2                       bmi     L2A63	; READ
000740r 2                       ldy     #$FF	; GET
000740r 2                       bne     L2A67
000740r 2               L2A63:
000740r 2               .endif
000740r 2               .endif
000740r 2               .endif
000740r 2               .ifdef CONFIG_CBM1_PATCHES
000740r 2                       jsr     PATCH5
000740r 2               		nop
000740r 2               .else
000740r 2  A5 rr                lda     Z8C
000742r 2  A4 rr                ldy     Z8C+1
000744r 2               .endif
000744r 2               L2A67:
000744r 2  85 rr                sta     CURLIN
000746r 2  84 rr                sty     CURLIN+1
000748r 2               SYNERR4:
000748r 2  4C rr rr             jmp     SYNERR
00074Br 2               RESPERR:
00074Br 2               .ifdef CONFIG_FILE
00074Br 2                       lda     CURDVC
00074Br 2                       beq     LCA8F
00074Br 2                       ldx     #ERR_BADDATA
00074Br 2                       jmp     ERROR
00074Br 2               LCA8F:
00074Br 2               .endif
00074Br 2  A9 rr                lda     #<ERRREENTRY
00074Dr 2  A0 rr                ldy     #>ERRREENTRY
00074Fr 2  20 rr rr             jsr     STROUT
000752r 2  A5 rr                lda     OLDTEXT
000754r 2  A4 rr                ldy     OLDTEXT+1
000756r 2  85 rr                sta     TXTPTR
000758r 2  84 rr                sty     TXTPTR+1
00075Ar 2               RTS20:
00075Ar 2  60                   rts
00075Br 2               
00075Br 2               ; ----------------------------------------------------------------------------
00075Br 2               ; "GET" STATEMENT
00075Br 2               ; ----------------------------------------------------------------------------
00075Br 2               .ifndef CONFIG_SMALL
00075Br 2               .ifndef SYM1
00075Br 2               GET:
00075Br 2                       jsr     ERRDIR
00075Br 2               ; CBM: if GET#, then switch input
00075Br 2               .ifdef CONFIG_FILE
00075Br 2                       cmp     #'#'
00075Br 2                       bne     LCAB6
00075Br 2                       jsr     CHRGET
00075Br 2                       jsr     GETBYT
00075Br 2                       lda     #','
00075Br 2                       jsr     SYNCHR
00075Br 2                       jsr     CHKIN
00075Br 2                       stx     CURDVC
00075Br 2               LCAB6:
00075Br 2               .endif
00075Br 2                       ldx     #<(INPUTBUFFER+1)
00075Br 2                       ldy     #>(INPUTBUFFER+1)
00075Br 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
00075Br 2                       lda     #$00
00075Br 2                       sta     INPUTBUFFER+1
00075Br 2               .else
00075Br 2                       sty     INPUTBUFFER+1
00075Br 2               .endif
00075Br 2                       lda     #$40
00075Br 2                       jsr     PROCESS_INPUT_LIST
00075Br 2               ; CBM: if GET#, then switch input back
00075Br 2               .ifdef CONFIG_FILE
00075Br 2                       ldx     CURDVC
00075Br 2                       bne     LCAD8
00075Br 2               .endif
00075Br 2                       rts
00075Br 2               .endif
00075Br 2               .endif
00075Br 2               
00075Br 2               ; ----------------------------------------------------------------------------
00075Br 2               ; "INPUT#" STATEMENT
00075Br 2               ; ----------------------------------------------------------------------------
00075Br 2               .ifdef CONFIG_FILE
00075Br 2               INPUTH:
00075Br 2                       jsr     GETBYT
00075Br 2                       lda     #$2C
00075Br 2                       jsr     SYNCHR
00075Br 2                       jsr     CHKIN
00075Br 2                       stx     CURDVC
00075Br 2                       jsr     L2A9E
00075Br 2               LCAD6:
00075Br 2                       lda     CURDVC
00075Br 2               LCAD8:
00075Br 2                       jsr     CLRCH
00075Br 2                       ldx     #$00
00075Br 2                       stx     CURDVC
00075Br 2                       rts
00075Br 2               LCAE0:
00075Br 2               .endif
00075Br 2               
00075Br 2               .ifdef SYM1
00075Br 2               LC9B0:
00075Br 2                       jsr     OUTQUES	; '?'
00075Br 2                       jsr     OUTSP
00075Br 2                       jmp     L2A9E
00075Br 2               .endif
00075Br 2               ; ----------------------------------------------------------------------------
00075Br 2               ; "INPUT" STATEMENT
00075Br 2               ; ----------------------------------------------------------------------------
00075Br 2               INPUT:
00075Br 2               .ifndef KBD
00075Br 2  46 rr                lsr     Z14
00075Dr 2               .endif
00075Dr 2               .ifdef AIM65
00075Dr 2                       lda     PRIFLG
00075Dr 2                       sta     ZBE
00075Dr 2                       jsr     LCFFA
00075Dr 2               .endif
00075Dr 2  C9 22                cmp     #$22
00075Fr 2               .ifdef SYM1
00075Fr 2                       bne     LC9B0
00075Fr 2               .else
00075Fr 2  D0 0B                bne     L2A9E
000761r 2               .endif
000761r 2  20 rr rr             jsr     STRTXT
000764r 2  A9 3B                lda     #$3B
000766r 2  20 rr rr             jsr     SYNCHR
000769r 2  20 rr rr             jsr     STRPRT
00076Cr 2               L2A9E:
00076Cr 2  20 rr rr             jsr     ERRDIR
00076Fr 2  A9 2C                lda     #$2C
000771r 2  8D FF 08             sta     INPUTBUFFER-1
000774r 2               LCAF8:
000774r 2               .ifdef APPLE
000774r 2                       jsr     INLINX
000774r 2               .elseif .def(SYM1)
000774r 2                       jsr     INLIN
000774r 2               .else
000774r 2  20 rr rr             jsr     NXIN
000777r 2               .endif
000777r 2               .ifdef KBD
000777r 2                       bmi     L2ABE
000777r 2               .else
000777r 2                 .ifdef CONFIG_FILE
000777r 2                       lda     CURDVC
000777r 2                       beq     LCB0C
000777r 2                       lda     Z96
000777r 2                       and     #$02
000777r 2                       beq     LCB0C
000777r 2                       jsr     LCAD6
000777r 2                       jmp     DATA
000777r 2               LCB0C:
000777r 2                 .endif
000777r 2  AD 00 09             lda     INPUTBUFFER
00077Ar 2  D0 12                bne     L2ABE
00077Cr 2                 .ifdef CONFIG_FILE
00077Cr 2                       lda     CURDVC
00077Cr 2                       bne     LCAF8
00077Cr 2                 .endif
00077Cr 2                 .ifdef CONFIG_CBM1_PATCHES
00077Cr 2                       jmp     PATCH1
00077Cr 2                 .else
00077Cr 2  18                   clc
00077Dr 2  4C rr rr             jmp     CONTROL_C_TYPED
000780r 2                 .endif
000780r 2               .endif
000780r 2               
000780r 2               NXIN:
000780r 2               .ifdef KBD
000780r 2                       jsr     INLIN
000780r 2                       bmi     RTS20
000780r 2                       pla
000780r 2                       jmp     LE86C
000780r 2               .else
000780r 2                 .ifdef CONFIG_FILE
000780r 2                       lda     CURDVC
000780r 2                       bne     LCB21
000780r 2                 .endif
000780r 2  20 rr rr             jsr     OUTQUES	; '?'
000783r 2  20 rr rr             jsr     OUTSP
000786r 2               LCB21:
000786r 2  4C rr rr             jmp     INLIN
000789r 2               .endif
000789r 2               
000789r 2               ; ----------------------------------------------------------------------------
000789r 2               ; "GETC" STATEMENT
000789r 2               ; ----------------------------------------------------------------------------
000789r 2               .ifdef KBD
000789r 2               GETC:
000789r 2                       jsr     CONINT
000789r 2                       jsr     LF43D
000789r 2                       jmp     LE664
000789r 2               .endif
000789r 2               
000789r 2               ; ----------------------------------------------------------------------------
000789r 2               ; "READ" STATEMENT
000789r 2               ; ----------------------------------------------------------------------------
000789r 2               READ:
000789r 2  A6 rr                ldx     DATPTR
00078Br 2  A4 rr                ldy     DATPTR+1
00078Dr 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
00078Dr 2               ; AppleSoft II, too
00078Dr 2                       lda     #$98	; READ
00078Dr 2                       .byte   $2C
00078Dr 2               L2ABE:
00078Dr 2                       lda     #$00	; INPUT
00078Dr 2               .else
00078Dr 2  A9                   .byte   $A9	; LDA #$98
00078Er 2               L2ABE:
00078Er 2  98                   tya
00078Fr 2               .endif
00078Fr 2               
00078Fr 2               ; ----------------------------------------------------------------------------
00078Fr 2               ; PROCESS INPUT LIST
00078Fr 2               ;
00078Fr 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
00078Fr 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
00078Fr 2               ; 				$40 FOR GET
00078Fr 2               ;				$98 FOR READ
00078Fr 2               ; ----------------------------------------------------------------------------
00078Fr 2               PROCESS_INPUT_LIST:
00078Fr 2  85 rr                sta     INPUTFLG
000791r 2  86 rr                stx     INPTR
000793r 2  84 rr                sty     INPTR+1
000795r 2               PROCESS_INPUT_ITEM:
000795r 2  20 rr rr             jsr     PTRGET
000798r 2  85 rr                sta     FORPNT
00079Ar 2  84 rr                sty     FORPNT+1
00079Cr 2  A5 rr                lda     TXTPTR
00079Er 2  A4 rr                ldy     TXTPTR+1
0007A0r 2  85 rr                sta     TXPSV
0007A2r 2  84 rr                sty     TXPSV+1
0007A4r 2  A6 rr                ldx     INPTR
0007A6r 2  A4 rr                ldy     INPTR+1
0007A8r 2  86 rr                stx     TXTPTR
0007AAr 2  84 rr                sty     TXTPTR+1
0007ACr 2  20 rr rr             jsr     CHRGOT
0007AFr 2  D0 0E                bne     INSTART
0007B1r 2  24 rr                bit     INPUTFLG
0007B3r 2               .ifndef CONFIG_SMALL ; GET
0007B3r 2                .ifndef SYM1
0007B3r 2                       bvc     L2AF0
0007B3r 2                 .ifdef MICROTAN
0007B3r 2                       jsr     MONRDKEY2
0007B3r 2                 .elseif .def(AIM65)
0007B3r 2                       jsr     MONRDKEY2
0007B3r 2                 .else
0007B3r 2                       jsr     MONRDKEY
0007B3r 2                 .endif
0007B3r 2                 .ifdef CONFIG_IO_MSB
0007B3r 2                       and     #$7F
0007B3r 2                 .endif
0007B3r 2                       sta     INPUTBUFFER
0007B3r 2               ; BUG: The beq/bne L2AF8 below is supposed
0007B3r 2               ; to be always taken. For this to happen,
0007B3r 2               ; the last load must be a 0 for beq
0007B3r 2               ; and != 0 for bne. The original Microsoft
0007B3r 2               ; code had ldx/ldy/bne here, which was only
0007B3r 2               ; correct for a non-ZP INPUTBUFFER. Commodore
0007B3r 2               ; fixed it in CBMBASIC V1 by swapping the
0007B3r 2               ; ldx and the ldy. It was broken on KIM,
0007B3r 2               ; but okay on APPLE and CBM2, because
0007B3r 2               ; these used a non-ZP INPUTBUFFER.
0007B3r 2               ; Microsoft fixed this somewhere after KIM
0007B3r 2               ; and before MICROTAN, by using beq instead
0007B3r 2               ; of bne in the ZP case.
0007B3r 2                 .ifdef CBM1
0007B3r 2                       ldy     #>(INPUTBUFFER-1)
0007B3r 2                       ldx     #<(INPUTBUFFER-1)
0007B3r 2                 .else
0007B3r 2                       ldx     #<(INPUTBUFFER-1)
0007B3r 2                       ldy     #>(INPUTBUFFER-1)
0007B3r 2                 .endif
0007B3r 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
0007B3r 2                       beq     L2AF8	; always
0007B3r 2                 .else
0007B3r 2                       bne     L2AF8	; always
0007B3r 2                 .endif
0007B3r 2               L2AF0:
0007B3r 2                .endif
0007B3r 2               .endif
0007B3r 2  30 62                bmi     FINDATA
0007B5r 2               .ifdef CONFIG_FILE
0007B5r 2                       lda     CURDVC
0007B5r 2                       bne     LCB64
0007B5r 2               .endif
0007B5r 2               .ifdef KBD
0007B5r 2                       jsr     OUTQUESSP
0007B5r 2               .else
0007B5r 2  20 rr rr             jsr     OUTQUES
0007B8r 2               .endif
0007B8r 2               LCB64:
0007B8r 2  20 rr rr             jsr     NXIN
0007BBr 2               L2AF8:
0007BBr 2  86 rr                stx     TXTPTR
0007BDr 2  84 rr                sty     TXTPTR+1
0007BFr 2               
0007BFr 2               ; ----------------------------------------------------------------------------
0007BFr 2               INSTART:
0007BFr 2  20 rr rr             jsr     CHRGET
0007C2r 2  24 rr                bit     VALTYP
0007C4r 2  10 24                bpl     L2B34
0007C6r 2               .ifndef CONFIG_SMALL ; GET
0007C6r 2                .ifndef SYM1
0007C6r 2                       bit     INPUTFLG
0007C6r 2                       bvc     L2B10
0007C6r 2                 .ifdef CONFIG_CBM1_PATCHES
0007C6r 2                       lda     #$00
0007C6r 2                       jsr     PATCH4
0007C6r 2                       nop
0007C6r 2                 .else
0007C6r 2                       inx
0007C6r 2                       stx     TXTPTR
0007C6r 2                       lda     #$00
0007C6r 2                       sta     CHARAC
0007C6r 2                       beq     L2B1C
0007C6r 2                 .endif
0007C6r 2               L2B10:
0007C6r 2                .endif
0007C6r 2               .endif
0007C6r 2  85 rr                sta     CHARAC
0007C8r 2  C9 22                cmp     #$22
0007CAr 2  F0 07                beq     L2B1D
0007CCr 2  A9 3A                lda     #$3A
0007CEr 2  85 rr                sta     CHARAC
0007D0r 2  A9 2C                lda     #$2C
0007D2r 2               L2B1C:
0007D2r 2  18                   clc
0007D3r 2               L2B1D:
0007D3r 2  85 rr                sta     ENDCHR
0007D5r 2  A5 rr                lda     TXTPTR
0007D7r 2  A4 rr                ldy     TXTPTR+1
0007D9r 2  69 00                adc     #$00
0007DBr 2  90 01                bcc     L2B28
0007DDr 2  C8                   iny
0007DEr 2               L2B28:
0007DEr 2  20 rr rr             jsr     STRLT2
0007E1r 2  20 rr rr             jsr     POINT
0007E4r 2               .ifdef CONFIG_SMALL
0007E4r 2  20 rr rr             jsr     LETSTRING
0007E7r 2               .else
0007E7r 2                       jsr     PUTSTR
0007E7r 2               .endif
0007E7r 2  4C rr rr             jmp     INPUT_MORE
0007EAr 2               ; ----------------------------------------------------------------------------
0007EAr 2               L2B34:
0007EAr 2  20 rr rr             jsr     FIN
0007EDr 2               .ifdef CONFIG_SMALL
0007EDr 2  20 rr rr             jsr     SETFOR
0007F0r 2               .else
0007F0r 2                       lda     VALTYP+1
0007F0r 2                       jsr     LET2
0007F0r 2               .endif
0007F0r 2               ; ----------------------------------------------------------------------------
0007F0r 2               INPUT_MORE:
0007F0r 2  20 rr rr             jsr     CHRGOT
0007F3r 2  F0 07                beq     L2B48
0007F5r 2  C9 2C                cmp     #$2C
0007F7r 2  F0 03                beq     L2B48
0007F9r 2  4C rr rr             jmp     INPUTERR
0007FCr 2               L2B48:
0007FCr 2  A5 rr                lda     TXTPTR
0007FEr 2  A4 rr                ldy     TXTPTR+1
000800r 2  85 rr                sta     INPTR
000802r 2  84 rr                sty     INPTR+1
000804r 2  A5 rr                lda     TXPSV
000806r 2  A4 rr                ldy     TXPSV+1
000808r 2  85 rr                sta     TXTPTR
00080Ar 2  84 rr                sty     TXTPTR+1
00080Cr 2  20 rr rr             jsr     CHRGOT
00080Fr 2  F0 2C                beq     INPDONE
000811r 2  20 rr rr             jsr     CHKCOM
000814r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
000817r 2               ; ----------------------------------------------------------------------------
000817r 2               FINDATA:
000817r 2  20 rr rr             jsr     DATAN
00081Ar 2  C8                   iny
00081Br 2  AA                   tax
00081Cr 2  D0 12                bne     L2B7C
00081Er 2  A2 06                ldx     #ERR_NODATA
000820r 2  C8                   iny
000821r 2  B1 rr                lda     (TXTPTR),y
000823r 2  F0 69                beq     GERR
000825r 2  C8                   iny
000826r 2  B1 rr                lda     (TXTPTR),y
000828r 2  85 rr                sta     Z8C
00082Ar 2  C8                   iny
00082Br 2  B1 rr                lda     (TXTPTR),y
00082Dr 2  C8                   iny
00082Er 2  85 rr                sta     Z8C+1
000830r 2               L2B7C:
000830r 2  B1 rr                lda     (TXTPTR),y
000832r 2  AA                   tax
000833r 2  20 rr rr             jsr     ADDON
000836r 2  E0 83                cpx     #$83
000838r 2  D0 DD                bne     FINDATA
00083Ar 2  4C rr rr             jmp     INSTART
00083Dr 2               ; ---NO MORE INPUT REQUESTED------
00083Dr 2               INPDONE:
00083Dr 2  A5 rr                lda     INPTR
00083Fr 2  A4 rr                ldy     INPTR+1
000841r 2  A6 rr                ldx     INPUTFLG
000843r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
000843r 2                       beq     L2B94 ; INPUT
000843r 2               .else
000843r 2  10 03                bpl     L2B94; INPUT or GET
000845r 2               .endif
000845r 2  4C rr rr             jmp     SETDA
000848r 2               L2B94:
000848r 2  A0 00                ldy     #$00
00084Ar 2               .ifdef AIM65
00084Ar 2                       jsr     LB8B1
00084Ar 2               .endif
00084Ar 2  B1 rr                lda     (INPTR),y
00084Cr 2  F0 07                beq     L2BA1
00084Er 2               .ifdef CONFIG_FILE
00084Er 2                       lda     CURDVC
00084Er 2                       bne     L2BA1
00084Er 2               .endif
00084Er 2  A9 rr                lda     #<ERREXTRA
000850r 2  A0 rr                ldy     #>ERREXTRA
000852r 2  4C rr rr             jmp     STROUT
000855r 2               L2BA1:
000855r 2  60                   rts
000856r 2               
000856r 2               ; ----------------------------------------------------------------------------
000856r 2               ERREXTRA:
000856r 2               .ifdef KBD
000856r 2                       .byte   "?Extra"
000856r 2               .else
000856r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
00085Ar 2  52 41 20 49  
00085Er 2  47 4E 4F 52  
000864r 2               .endif
000864r 2  0D 0A 00             .byte   $0D,$0A,$00
000867r 2               ERRREENTRY:
000867r 2               .ifdef KBD
000867r 2                       .byte   "What?"
000867r 2               .else
000867r 2  3F 52 45 44          .byte   "?REDO FROM START"
00086Br 2  4F 20 46 52  
00086Fr 2  4F 4D 20 53  
000877r 2               .endif
000877r 2  0D 0A 00             .byte   $0D,$0A,$00
00087Ar 2               .ifdef KBD
00087Ar 2               LEA30:
00087Ar 2                       .byte   "B"
00087Ar 2                       .byte   $FD
00087Ar 2                       .byte   "GsBASIC"
00087Ar 2                       .byte   $00,$1B,$0D,$13
00087Ar 2                       .byte   " BASIC"
00087Ar 2               .endif
00087Ar 2               
00087Ar 1               .include "eval.s"
00087Ar 2               .segment "CODE"
00087Ar 2               
00087Ar 2               ; ----------------------------------------------------------------------------
00087Ar 2               ; "NEXT" STATEMENT
00087Ar 2               ; ----------------------------------------------------------------------------
00087Ar 2               NEXT:
00087Ar 2  D0 04                bne     NEXT1
00087Cr 2  A0 00                ldy     #$00
00087Er 2  F0 03                beq     NEXT2
000880r 2               NEXT1:
000880r 2  20 rr rr             jsr     PTRGET
000883r 2               NEXT2:
000883r 2  85 rr                sta     FORPNT
000885r 2  84 rr                sty     FORPNT+1
000887r 2  20 rr rr             jsr     GTFORPNT
00088Ar 2  F0 04                beq     NEXT3
00088Cr 2  A2 00                ldx     #$00
00088Er 2               GERR:
00088Er 2  F0 66                beq     JERROR
000890r 2               NEXT3:
000890r 2  9A                   txs
000891r 2               .ifndef CONFIG_2
000891r 2                       inx
000891r 2                       inx
000891r 2                       inx
000891r 2                       inx
000891r 2               .endif
000891r 2  8A                   txa
000892r 2               .ifdef CONFIG_2
000892r 2  18                   clc
000893r 2  69 04                adc     #$04
000895r 2  48                   pha
000896r 2  69 05                adc     #BYTES_FP+1
000898r 2  85 rr                sta     DEST
00089Ar 2  68                   pla
00089Br 2               .else
00089Br 2                       inx
00089Br 2                       inx
00089Br 2                       inx
00089Br 2                       inx
00089Br 2                       inx
00089Br 2               .ifndef CONFIG_SMALL
00089Br 2                       inx
00089Br 2               .endif
00089Br 2                       stx     DEST
00089Br 2               .endif
00089Br 2  A0 01                ldy     #>STACK
00089Dr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0008A0r 2  BA                   tsx
0008A1r 2  BD 08 01             lda     STACK+BYTES_FP+4,x
0008A4r 2  85 rr                sta     FACSIGN
0008A6r 2  A5 rr                lda     FORPNT
0008A8r 2  A4 rr                ldy     FORPNT+1
0008AAr 2  20 rr rr             jsr     FADD
0008ADr 2  20 rr rr             jsr     SETFOR
0008B0r 2  A0 01                ldy     #>STACK
0008B2r 2  20 rr rr             jsr     FCOMP2
0008B5r 2  BA                   tsx
0008B6r 2  38                   sec
0008B7r 2  FD 08 01             sbc     STACK+BYTES_FP+4,x
0008BAr 2  F0 17                beq     L2C22
0008BCr 2  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
0008BFr 2  85 rr                sta     CURLIN
0008C1r 2  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
0008C4r 2  85 rr                sta     CURLIN+1
0008C6r 2  BD 10 01             lda     STACK+2*BYTES_FP+8,x
0008C9r 2  85 rr                sta     TXTPTR
0008CBr 2  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
0008CEr 2  85 rr                sta     TXTPTR+1
0008D0r 2               L2C1F:
0008D0r 2  4C rr rr             jmp     NEWSTT
0008D3r 2               L2C22:
0008D3r 2  8A                   txa
0008D4r 2  69 0F                adc     #2*BYTES_FP+7
0008D6r 2  AA                   tax
0008D7r 2  9A                   txs
0008D8r 2  20 rr rr             jsr     CHRGOT
0008DBr 2  C9 2C                cmp     #$2C
0008DDr 2  D0 F1                bne     L2C1F
0008DFr 2  20 rr rr             jsr     CHRGET
0008E2r 2  20 rr rr             jsr     NEXT1
0008E5r 2               
0008E5r 2               ; ----------------------------------------------------------------------------
0008E5r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
0008E5r 2               ; ----------------------------------------------------------------------------
0008E5r 2               FRMNUM:
0008E5r 2  20 rr rr             jsr     FRMEVL
0008E8r 2               
0008E8r 2               ; ----------------------------------------------------------------------------
0008E8r 2               ; MAKE SURE (FAC) IS NUMERIC
0008E8r 2               ; ----------------------------------------------------------------------------
0008E8r 2               CHKNUM:
0008E8r 2  18                   clc
0008E9r 2  24                   .byte   $24
0008EAr 2               
0008EAr 2               ; ----------------------------------------------------------------------------
0008EAr 2               ; MAKE SURE (FAC) IS STRING
0008EAr 2               ; ----------------------------------------------------------------------------
0008EAr 2               CHKSTR:
0008EAr 2  38                   sec
0008EBr 2               
0008EBr 2               ; ----------------------------------------------------------------------------
0008EBr 2               ; MAKE SURE (FAC) IS CORRECT TYPE
0008EBr 2               ; IF C=0, TYPE MUST BE NUMERIC
0008EBr 2               ; IF C=1, TYPE MUST BE STRING
0008EBr 2               ; ----------------------------------------------------------------------------
0008EBr 2               CHKVAL:
0008EBr 2  24 rr                bit     VALTYP
0008EDr 2  30 03                bmi     L2C41
0008EFr 2  B0 03                bcs     L2C43
0008F1r 2               L2C40:
0008F1r 2  60                   rts
0008F2r 2               L2C41:
0008F2r 2  B0 FD                bcs     L2C40
0008F4r 2               L2C43:
0008F4r 2  A2 18                ldx     #ERR_BADTYPE
0008F6r 2               JERROR:
0008F6r 2  4C rr rr             jmp     ERROR
0008F9r 2               
0008F9r 2               ; ----------------------------------------------------------------------------
0008F9r 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
0008F9r 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
0008F9r 2               ; EXPRESSIONS.
0008F9r 2               ; ----------------------------------------------------------------------------
0008F9r 2               FRMEVL:
0008F9r 2  A6 rr                ldx     TXTPTR
0008FBr 2  D0 02                bne     L2C4E
0008FDr 2  C6 rr                dec     TXTPTR+1
0008FFr 2               L2C4E:
0008FFr 2  C6 rr                dec     TXTPTR
000901r 2  A2 00                ldx     #$00
000903r 2  24                   .byte   $24
000904r 2               FRMEVL1:
000904r 2  48                   pha
000905r 2  8A                   txa
000906r 2  48                   pha
000907r 2  A9 01                lda     #$01
000909r 2  20 rr rr             jsr     CHKMEM
00090Cr 2  20 rr rr             jsr     FRM_ELEMENT
00090Fr 2  A9 00                lda     #$00
000911r 2  85 rr                sta     CPRTYP
000913r 2               FRMEVL2:
000913r 2  20 rr rr             jsr     CHRGOT
000916r 2               L2C65:
000916r 2  38                   sec
000917r 2  E9 AB                sbc     #TOKEN_GREATER
000919r 2  90 17                bcc     L2C81
00091Br 2  C9 03                cmp     #$03
00091Dr 2  B0 13                bcs     L2C81
00091Fr 2  C9 01                cmp     #$01
000921r 2  2A                   rol     a
000922r 2  49 01                eor     #$01
000924r 2  45 rr                eor     CPRTYP
000926r 2  C5 rr                cmp     CPRTYP
000928r 2  90 61                bcc     SNTXERR
00092Ar 2  85 rr                sta     CPRTYP
00092Cr 2  20 rr rr             jsr     CHRGET
00092Fr 2  4C rr rr             jmp     L2C65
000932r 2               L2C81:
000932r 2  A6 rr                ldx     CPRTYP
000934r 2  D0 2C                bne     FRM_RELATIONAL
000936r 2  B0 7C                bcs     L2D02
000938r 2  69 07                adc     #$07
00093Ar 2  90 78                bcc     L2D02
00093Cr 2  65 rr                adc     VALTYP
00093Er 2  D0 03                bne     L2C92
000940r 2  4C rr rr             jmp     CAT
000943r 2               L2C92:
000943r 2  69 FF                adc     #$FF
000945r 2  85 rr                sta     INDEX
000947r 2  0A                   asl     a
000948r 2  65 rr                adc     INDEX
00094Ar 2  A8                   tay
00094Br 2               FRM_PRECEDENCE_TEST:
00094Br 2  68                   pla
00094Cr 2  D9 rr rr             cmp     MATHTBL,y
00094Fr 2  B0 68                bcs     FRM_PERFORM1
000951r 2  20 rr rr             jsr     CHKNUM
000954r 2               L2CA3:
000954r 2  48                   pha
000955r 2               L2CA4:
000955r 2  20 rr rr             jsr     FRM_RECURSE
000958r 2  68                   pla
000959r 2  A4 rr                ldy     LASTOP
00095Br 2  10 17                bpl     PREFNC
00095Dr 2  AA                   tax
00095Er 2  F0 57                beq     GOEX
000960r 2  D0 60                bne     FRM_PERFORM2
000962r 2               
000962r 2               ; ----------------------------------------------------------------------------
000962r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000962r 2               ; ----------------------------------------------------------------------------
000962r 2               FRM_RELATIONAL:
000962r 2  46 rr                lsr     VALTYP
000964r 2  8A                   txa
000965r 2  2A                   rol     a
000966r 2  A6 rr                ldx     TXTPTR
000968r 2  D0 02                bne     L2CBB
00096Ar 2  C6 rr                dec     TXTPTR+1
00096Cr 2               L2CBB:
00096Cr 2  C6 rr                dec     TXTPTR
00096Er 2  A0 1B                ldy     #$1B
000970r 2  85 rr                sta     CPRTYP
000972r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
000974r 2               PREFNC:
000974r 2  D9 rr rr             cmp     MATHTBL,y
000977r 2  B0 49                bcs     FRM_PERFORM2
000979r 2  90 D9                bcc     L2CA3
00097Br 2               
00097Br 2               ; ----------------------------------------------------------------------------
00097Br 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
00097Br 2               ; ANOTHER ONE
00097Br 2               ; ----------------------------------------------------------------------------
00097Br 2               FRM_RECURSE:
00097Br 2  B9 rr rr             lda     MATHTBL+2,y
00097Er 2  48                   pha
00097Fr 2  B9 rr rr             lda     MATHTBL+1,y
000982r 2  48                   pha
000983r 2  20 rr rr             jsr     FRM_STACK1
000986r 2  A5 rr                lda     CPRTYP
000988r 2  4C rr rr             jmp     FRMEVL1
00098Br 2               SNTXERR:
00098Br 2  4C rr rr             jmp     SYNERR
00098Er 2               
00098Er 2               ; ----------------------------------------------------------------------------
00098Er 2               ; STACK (FAC)
00098Er 2               ; THREE ENTRY POINTS:
00098Er 2               ; 	1, FROM FRMEVL
00098Er 2               ;	2, FROM "STEP"
00098Er 2               ;	3, FROM "FOR"
00098Er 2               ; ----------------------------------------------------------------------------
00098Er 2               FRM_STACK1:
00098Er 2  A5 rr                lda     FACSIGN
000990r 2  BE rr rr             ldx     MATHTBL,y
000993r 2               
000993r 2               ; ----------------------------------------------------------------------------
000993r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000993r 2               ; ----------------------------------------------------------------------------
000993r 2               FRM_STACK2:
000993r 2  A8                   tay
000994r 2  68                   pla
000995r 2  85 rr                sta     INDEX
000997r 2               .ifndef CONFIG_2B
000997r 2                       inc     INDEX ; bug: assumes not on page boundary
000997r 2               ; bug exists on AppleSoft II
000997r 2               .endif
000997r 2  68                   pla
000998r 2  85 rr                sta     INDEX+1
00099Ar 2               .ifdef CONFIG_2B
00099Ar 2  E6 rr                inc     INDEX
00099Cr 2  D0 02                bne     LEB69
00099Er 2  E6 rr                inc     INDEX+1
0009A0r 2               LEB69:
0009A0r 2               .endif
0009A0r 2  98                   tya
0009A1r 2  48                   pha
0009A2r 2               
0009A2r 2               ; ----------------------------------------------------------------------------
0009A2r 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
0009A2r 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
0009A2r 2               ; ----------------------------------------------------------------------------
0009A2r 2               FRM_STACK3:
0009A2r 2  20 rr rr             jsr     ROUND_FAC
0009A5r 2               .ifndef CONFIG_SMALL
0009A5r 2                       lda     FAC+4
0009A5r 2                       pha
0009A5r 2               .endif
0009A5r 2  A5 rr                lda     FAC+3
0009A7r 2  48                   pha
0009A8r 2  A5 rr                lda     FAC+2
0009AAr 2  48                   pha
0009ABr 2  A5 rr                lda     FAC+1
0009ADr 2  48                   pha
0009AEr 2  A5 rr                lda     FAC
0009B0r 2  48                   pha
0009B1r 2  6C rr rr             jmp     (INDEX)
0009B4r 2               L2D02:
0009B4r 2  A0 FF                ldy     #$FF
0009B6r 2  68                   pla
0009B7r 2               GOEX:
0009B7r 2  F0 20                beq     EXIT
0009B9r 2               
0009B9r 2               ; ----------------------------------------------------------------------------
0009B9r 2               ; PERFORM STACKED OPERATION
0009B9r 2               ;
0009B9r 2               ; (A) = PRECEDENCE BYTE
0009B9r 2               ; STACK:  1 -- CPRMASK
0009B9r 2               ;	5 -- (ARG)
0009B9r 2               ;	2 -- ADDR OF PERFORMER
0009B9r 2               ; ----------------------------------------------------------------------------
0009B9r 2               FRM_PERFORM1:
0009B9r 2  C9 64                cmp     #$64
0009BBr 2  F0 03                beq     L2D0E
0009BDr 2  20 rr rr             jsr     CHKNUM
0009C0r 2               L2D0E:
0009C0r 2  84 rr                sty     LASTOP
0009C2r 2               FRM_PERFORM2:
0009C2r 2  68                   pla
0009C3r 2  4A                   lsr     a
0009C4r 2  85 rr                sta     CPRMASK
0009C6r 2  68                   pla
0009C7r 2  85 rr                sta     ARG
0009C9r 2  68                   pla
0009CAr 2  85 rr                sta     ARG+1
0009CCr 2  68                   pla
0009CDr 2  85 rr                sta     ARG+2
0009CFr 2  68                   pla
0009D0r 2  85 rr                sta     ARG+3
0009D2r 2  68                   pla
0009D3r 2               .ifndef CONFIG_SMALL
0009D3r 2                       sta     ARG+4
0009D3r 2                       pla
0009D3r 2               .endif
0009D3r 2  85 rr                sta     ARGSIGN
0009D5r 2  45 rr                eor     FACSIGN
0009D7r 2  85 rr                sta     SGNCPR
0009D9r 2               EXIT:
0009D9r 2  A5 rr                lda     FAC
0009DBr 2  60                   rts
0009DCr 2               
0009DCr 2               ; ----------------------------------------------------------------------------
0009DCr 2               ; GET ELEMENT IN EXPRESSION
0009DCr 2               ;
0009DCr 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
0009DCr 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
0009DCr 2               ; ----------------------------------------------------------------------------
0009DCr 2               FRM_ELEMENT:
0009DCr 2  A9 00                lda     #$00
0009DEr 2  85 rr                sta     VALTYP
0009E0r 2               L2D31:
0009E0r 2  20 rr rr             jsr     CHRGET
0009E3r 2  B0 03                bcs     L2D39
0009E5r 2               L2D36:
0009E5r 2  4C rr rr             jmp     FIN
0009E8r 2               L2D39:
0009E8r 2  20 rr rr             jsr     ISLETC
0009EBr 2  B0 67                bcs     FRM_VARIABLE
0009EDr 2               .ifdef CONFIG_CBM_ALL
0009EDr 2                       cmp     #$FF
0009EDr 2                       bne     LCDC1
0009EDr 2                       lda     #<CON_PI
0009EDr 2                       ldy     #>CON_PI
0009EDr 2                       jsr     LOAD_FAC_FROM_YA
0009EDr 2                       jmp     CHRGET
0009EDr 2               CON_PI:
0009EDr 2                       .byte   $82,$49,$0f,$DA,$A1
0009EDr 2               LCDC1:
0009EDr 2               .endif
0009EDr 2  C9 2E                cmp     #$2E
0009EFr 2  F0 F4                beq     L2D36
0009F1r 2  C9 A5                cmp     #TOKEN_MINUS
0009F3r 2  F0 58                beq     MIN
0009F5r 2  C9 A4                cmp     #TOKEN_PLUS
0009F7r 2  F0 E7                beq     L2D31
0009F9r 2  C9 22                cmp     #$22
0009FBr 2  D0 0F                bne     NOT_
0009FDr 2               
0009FDr 2               ; ----------------------------------------------------------------------------
0009FDr 2               ; STRING CONSTANT ELEMENT
0009FDr 2               ;
0009FDr 2               ; SET Y,A = (TXTPTR)+CARRY
0009FDr 2               ; ----------------------------------------------------------------------------
0009FDr 2               STRTXT:
0009FDr 2  A5 rr                lda     TXTPTR
0009FFr 2  A4 rr                ldy     TXTPTR+1
000A01r 2  69 00                adc     #$00
000A03r 2  90 01                bcc     L2D57
000A05r 2  C8                   iny
000A06r 2               L2D57:
000A06r 2  20 rr rr             jsr     STRLIT
000A09r 2  4C rr rr             jmp     POINT
000A0Cr 2               
000A0Cr 2               ; ----------------------------------------------------------------------------
000A0Cr 2               ; "NOT" FUNCTION
000A0Cr 2               ; IF FAC=0, RETURN FAC=1
000A0Cr 2               ; IF FAC<>0, RETURN FAC=0
000A0Cr 2               ; ----------------------------------------------------------------------------
000A0Cr 2               NOT_:
000A0Cr 2  C9 A2                cmp     #TOKEN_NOT
000A0Er 2  D0 13                bne     L2D74
000A10r 2  A0 18                ldy     #$18
000A12r 2  D0 3B                bne     EQUL
000A14r 2               
000A14r 2               ; ----------------------------------------------------------------------------
000A14r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000A14r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000A14r 2               ; ----------------------------------------------------------------------------
000A14r 2               EQUOP:
000A14r 2  20 rr rr             jsr     AYINT
000A17r 2  A5 rr                lda     FAC_LAST
000A19r 2  49 FF                eor     #$FF
000A1Br 2  A8                   tay
000A1Cr 2  A5 rr                lda     FAC_LAST-1
000A1Er 2  49 FF                eor     #$FF
000A20r 2  4C rr rr             jmp     GIVAYF
000A23r 2               L2D74:
000A23r 2               .ifdef SYM1
000A23r 2                       cmp     #TOKEN_USR
000A23r 2                       bne     LCC8A
000A23r 2                       jmp     LCDBD
000A23r 2               LCC8A:
000A23r 2                       cmp     #$26
000A23r 2                       bne     LCC91
000A23r 2                       jmp     LCDFE
000A23r 2               LCC91:
000A23r 2               .endif
000A23r 2  C9 9F                cmp     #TOKEN_FN
000A25r 2  D0 03                bne     L2D7B
000A27r 2  4C rr rr             jmp     L31F3
000A2Ar 2               L2D7B:
000A2Ar 2  C9 AE                cmp     #TOKEN_SGN
000A2Cr 2  90 03                bcc     PARCHK
000A2Er 2  4C rr rr             jmp     UNARY
000A31r 2               
000A31r 2               ; ----------------------------------------------------------------------------
000A31r 2               ; EVALUATE "(EXPRESSION)"
000A31r 2               ; ----------------------------------------------------------------------------
000A31r 2               PARCHK:
000A31r 2  20 rr rr             jsr     CHKOPN
000A34r 2  20 rr rr             jsr     FRMEVL
000A37r 2               CHKCLS:
000A37r 2  A9 29                lda     #$29
000A39r 2  2C                   .byte   $2C
000A3Ar 2               CHKOPN:
000A3Ar 2  A9 28                lda     #$28
000A3Cr 2  2C                   .byte   $2C
000A3Dr 2               CHKCOM:
000A3Dr 2  A9 2C                lda     #$2C
000A3Fr 2               
000A3Fr 2               ; ----------------------------------------------------------------------------
000A3Fr 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000A3Fr 2               ; ----------------------------------------------------------------------------
000A3Fr 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000A3Fr 2  A0 00                ldy     #$00
000A41r 2  D1 rr                cmp     (TXTPTR),y
000A43r 2  D0 03                bne     SYNERR
000A45r 2  4C rr rr             jmp     CHRGET
000A48r 2               ; ----------------------------------------------------------------------------
000A48r 2               SYNERR:
000A48r 2  A2 02                ldx     #ERR_SYNTAX
000A4Ar 2  4C rr rr             jmp     ERROR
000A4Dr 2               ; ----------------------------------------------------------------------------
000A4Dr 2               MIN:
000A4Dr 2  A0 15                ldy     #$15
000A4Fr 2               EQUL:
000A4Fr 2  68                   pla
000A50r 2  68                   pla
000A51r 2  4C rr rr             jmp     L2CA4
000A54r 2               ; ----------------------------------------------------------------------------
000A54r 2               FRM_VARIABLE:
000A54r 2  20 rr rr             jsr     PTRGET
000A57r 2               FRM_VARIABLE_CALL	= *-1
000A57r 2  85 rr                sta     FAC_LAST-1
000A59r 2  84 rr                sty     FAC_LAST
000A5Br 2               .ifdef CONFIG_CBM_ALL
000A5Br 2                       lda     VARNAM
000A5Br 2                       ldy     VARNAM+1
000A5Br 2               .endif
000A5Br 2  A6 rr                ldx     VALTYP
000A5Dr 2  F0 05                beq     L2DB1
000A5Fr 2               .ifdef CONFIG_CBM_ALL
000A5Fr 2                 .ifdef CONFIG_CBM1_PATCHES
000A5Fr 2                       jmp     PATCH2
000A5Fr 2                       clc
000A5Fr 2               LCE3B:
000A5Fr 2                 .else
000A5Fr 2                       ldx     #$00
000A5Fr 2                       stx     STRNG1+1
000A5Fr 2                       bit     FAC+4
000A5Fr 2                       bpl     LCE53
000A5Fr 2                       cmp     #$54	; T
000A5Fr 2                       bne     LCE53
000A5Fr 2                 .endif
000A5Fr 2                       cpy     #$C9	; I$
000A5Fr 2                       bne     LCE53
000A5Fr 2                       jsr     LCE76
000A5Fr 2                       sty     EXPON
000A5Fr 2                       dey
000A5Fr 2                       sty     STRNG2
000A5Fr 2                       ldy     #$06
000A5Fr 2                       sty     INDX
000A5Fr 2                       ldy     #$24
000A5Fr 2                       jsr     LDD3A
000A5Fr 2                       jmp     LD353
000A5Fr 2               LCE53:
000A5Fr 2               .endif
000A5Fr 2               .ifdef CONFIG_2
000A5Fr 2                 .ifndef CBM2
000A5Fr 2               ; bugfix?
000A5Fr 2               ; fixed on AppleSoft II, not on any CBM
000A5Fr 2  A2 00                ldx     #$00
000A61r 2  86 rr                stx     STRNG1+1
000A63r 2                 .endif
000A63r 2               .endif
000A63r 2  60                   rts
000A64r 2               L2DB1:
000A64r 2               .ifndef CONFIG_SMALL
000A64r 2                       ldx     VALTYP+1
000A64r 2                       bpl     L2DC2
000A64r 2                       ldy     #$00
000A64r 2                       lda     (FAC+3),y
000A64r 2                       tax
000A64r 2                       iny
000A64r 2                       lda     (FAC+3),y
000A64r 2                       tay
000A64r 2                       txa
000A64r 2                       jmp     GIVAYF
000A64r 2               L2DC2:
000A64r 2               .endif
000A64r 2               .ifdef CONFIG_CBM1_PATCHES
000A64r 2                       jmp     PATCH3
000A64r 2                       .byte   $19
000A64r 2               .endif
000A64r 2               .ifdef CBM2
000A64r 2                       bit     FAC+4
000A64r 2                       bpl     LCE90
000A64r 2                       cmp     #$54
000A64r 2                       bne     LCE82
000A64r 2               .endif
000A64r 2               .ifndef CONFIG_CBM_ALL
000A64r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000A67r 2               .endif
000A67r 2               .ifdef CONFIG_CBM_ALL
000A67r 2               LCE69:
000A67r 2                       cpy     #$49
000A67r 2               .ifdef CBM1
000A67r 2                       bne     LCE82
000A67r 2               .else
000A67r 2                       bne     LCE90
000A67r 2               .endif
000A67r 2                       jsr     LCE76
000A67r 2                       tya
000A67r 2                       ldx     #$A0
000A67r 2                       jmp     LDB21
000A67r 2               LCE76:
000A67r 2               .ifdef CBM1
000A67r 2                       lda     #$FE
000A67r 2                       ldy     #$01
000A67r 2               .else
000A67r 2                       lda     #$8B
000A67r 2                       ldy     #$00
000A67r 2               .endif
000A67r 2                       sei
000A67r 2                       jsr     LOAD_FAC_FROM_YA
000A67r 2                       cli
000A67r 2                       sty     FAC+1
000A67r 2                       rts
000A67r 2               LCE82:
000A67r 2                       cmp     #$53
000A67r 2                       bne     LCE90
000A67r 2                       cpy     #$54
000A67r 2                       bne     LCE90
000A67r 2                       lda     Z96
000A67r 2                       jmp     FLOAT
000A67r 2               LCE90:
000A67r 2                       lda     FAC+3
000A67r 2                       ldy     FAC+4
000A67r 2                       jmp     LOAD_FAC_FROM_YA
000A67r 2               .endif
000A67r 2               
000A67r 2               ; ----------------------------------------------------------------------------
000A67r 2               UNARY:
000A67r 2  0A                   asl     a
000A68r 2  48                   pha
000A69r 2  AA                   tax
000A6Ar 2  20 rr rr             jsr     CHRGET
000A6Dr 2  E0 83                cpx     #<(TOKEN_LEFTSTR*2-1)
000A6Fr 2  90 20                bcc     L2DEF
000A71r 2  20 rr rr             jsr     CHKOPN
000A74r 2  20 rr rr             jsr     FRMEVL
000A77r 2  20 rr rr             jsr     CHKCOM
000A7Ar 2  20 rr rr             jsr     CHKSTR
000A7Dr 2  68                   pla
000A7Er 2  AA                   tax
000A7Fr 2  A5 rr                lda     FAC_LAST
000A81r 2  48                   pha
000A82r 2  A5 rr                lda     FAC_LAST-1
000A84r 2  48                   pha
000A85r 2  8A                   txa
000A86r 2  48                   pha
000A87r 2  20 rr rr             jsr     GETBYT
000A8Ar 2  68                   pla
000A8Br 2  A8                   tay
000A8Cr 2  8A                   txa
000A8Dr 2  48                   pha
000A8Er 2  4C rr rr             jmp     L2DF4
000A91r 2               L2DEF:
000A91r 2  20 rr rr             jsr     PARCHK
000A94r 2  68                   pla
000A95r 2  A8                   tay
000A96r 2               L2DF4:
000A96r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000A99r 2  85 rr                sta     JMPADRS+1
000A9Br 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000A9Er 2  85 rr                sta     JMPADRS+2
000AA0r 2               .ifdef KBD
000AA0r 2                       jsr     LF47D
000AA0r 2               .else
000AA0r 2  20 rr rr             jsr     JMPADRS
000AA3r 2               .endif
000AA3r 2  4C rr rr             jmp     CHKNUM
000AA6r 2               
000AA6r 2               ; ----------------------------------------------------------------------------
000AA6r 2               OR:
000AA6r 2  A0 FF                ldy     #$FF
000AA8r 2  2C                   .byte   $2C
000AA9r 2               ; ----------------------------------------------------------------------------
000AA9r 2               TAND:
000AA9r 2  A0 00                ldy     #$00
000AABr 2  84 rr                sty     EOLPNTR
000AADr 2  20 rr rr             jsr     AYINT
000AB0r 2  A5 rr                lda     FAC_LAST-1
000AB2r 2  45 rr                eor     EOLPNTR
000AB4r 2  85 rr                sta     CHARAC
000AB6r 2  A5 rr                lda     FAC_LAST
000AB8r 2  45 rr                eor     EOLPNTR
000ABAr 2  85 rr                sta     ENDCHR
000ABCr 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000ABFr 2  20 rr rr             jsr     AYINT
000AC2r 2  A5 rr                lda     FAC_LAST
000AC4r 2  45 rr                eor     EOLPNTR
000AC6r 2  25 rr                and     ENDCHR
000AC8r 2  45 rr                eor     EOLPNTR
000ACAr 2  A8                   tay
000ACBr 2  A5 rr                lda     FAC_LAST-1
000ACDr 2  45 rr                eor     EOLPNTR
000ACFr 2  25 rr                and     CHARAC
000AD1r 2  45 rr                eor     EOLPNTR
000AD3r 2  4C rr rr             jmp     GIVAYF
000AD6r 2               
000AD6r 2               ; ----------------------------------------------------------------------------
000AD6r 2               ; PERFORM RELATIONAL OPERATIONS
000AD6r 2               ; ----------------------------------------------------------------------------
000AD6r 2               RELOPS:
000AD6r 2  20 rr rr             jsr     CHKVAL
000AD9r 2  B0 13                bcs     STRCMP
000ADBr 2  A5 rr                lda     ARGSIGN
000ADDr 2  09 7F                ora     #$7F
000ADFr 2  25 rr                and     ARG+1
000AE1r 2  85 rr                sta     ARG+1
000AE3r 2  A9 rr                lda     #<ARG
000AE5r 2  A0 00                ldy     #$00
000AE7r 2  20 rr rr             jsr     FCOMP
000AEAr 2  AA                   tax
000AEBr 2  4C rr rr             jmp     NUMCMP
000AEEr 2               
000AEEr 2               ; ----------------------------------------------------------------------------
000AEEr 2               ; STRING COMPARISON
000AEEr 2               ; ----------------------------------------------------------------------------
000AEEr 2               STRCMP:
000AEEr 2  A9 00                lda     #$00
000AF0r 2  85 rr                sta     VALTYP
000AF2r 2  C6 rr                dec     CPRTYP
000AF4r 2  20 rr rr             jsr     FREFAC
000AF7r 2  85 rr                sta     FAC
000AF9r 2  86 rr                stx     FAC+1
000AFBr 2  84 rr                sty     FAC+2
000AFDr 2  A5 rr                lda     ARG_LAST-1
000AFFr 2  A4 rr                ldy     ARG_LAST
000B01r 2  20 rr rr             jsr     FRETMP
000B04r 2  86 rr                stx     ARG_LAST-1
000B06r 2  84 rr                sty     ARG_LAST
000B08r 2  AA                   tax
000B09r 2  38                   sec
000B0Ar 2  E5 rr                sbc     FAC
000B0Cr 2  F0 08                beq     L2E74
000B0Er 2  A9 01                lda     #$01
000B10r 2  90 04                bcc     L2E74
000B12r 2  A6 rr                ldx     FAC
000B14r 2  A9 FF                lda     #$FF
000B16r 2               L2E74:
000B16r 2  85 rr                sta     FACSIGN
000B18r 2  A0 FF                ldy     #$FF
000B1Ar 2  E8                   inx
000B1Br 2               STRCMP1:
000B1Br 2  C8                   iny
000B1Cr 2  CA                   dex
000B1Dr 2  D0 07                bne     L2E84
000B1Fr 2  A6 rr                ldx     FACSIGN
000B21r 2               NUMCMP:
000B21r 2  30 0F                bmi     CMPDONE
000B23r 2  18                   clc
000B24r 2  90 0C                bcc     CMPDONE
000B26r 2               L2E84:
000B26r 2  B1 rr                lda     (ARG_LAST-1),y
000B28r 2  D1 rr                cmp     (FAC+1),y
000B2Ar 2  F0 EF                beq     STRCMP1
000B2Cr 2  A2 FF                ldx     #$FF
000B2Er 2  B0 02                bcs     CMPDONE
000B30r 2  A2 01                ldx     #$01
000B32r 2               CMPDONE:
000B32r 2  E8                   inx
000B33r 2  8A                   txa
000B34r 2  2A                   rol     a
000B35r 2  25 rr                and     CPRMASK
000B37r 2  F0 02                beq     L2E99
000B39r 2  A9 FF                lda     #$FF
000B3Br 2               L2E99:
000B3Br 2  4C rr rr             jmp     FLOAT
000B3Er 2               
000B3Er 2               .ifdef SYM1
000B3Er 2               LCDBD:
000B3Er 2                       jsr     CHRGET
000B3Er 2                       jsr     CHKOPN
000B3Er 2                       jsr     FRMEVL
000B3Er 2                       jsr     CHRGOT
000B3Er 2                       cmp     #$29
000B3Er 2                       beq     LCDF1
000B3Er 2                       jsr     AYINT
000B3Er 2                       lda     FAC+4
000B3Er 2                       ldy     FAC+3
000B3Er 2                       sta     USR+1
000B3Er 2                       sty     USR+2
000B3Er 2               LCDD8:
000B3Er 2                       jsr     CHKCOM
000B3Er 2                       jsr     FRMEVL
000B3Er 2                       jsr     CHRGOT
000B3Er 2                       cmp     #$29
000B3Er 2                       beq     LCDF1
000B3Er 2                       jsr     AYINT
000B3Er 2                       lda     FAC+3
000B3Er 2                       pha
000B3Er 2                       lda     FAC+4
000B3Er 2                       pha
000B3Er 2                       jmp     LCDD8
000B3Er 2               
000B3Er 2               LCDF1:
000B3Er 2                       jsr     CHRGET
000B3Er 2                       jsr     AYINT
000B3Er 2                       lda     FAC+3
000B3Er 2                       ldy     FAC+4
000B3Er 2                       jmp     USR
000B3Er 2               
000B3Er 2               LCDFE:
000B3Er 2                       lda     ZD4
000B3Er 2                       pha
000B3Er 2                       lda     ZD3
000B3Er 2                       pha
000B3Er 2                       jsr     CHRGET
000B3Er 2                       cmp     #$22
000B3Er 2                       bne     LCE49
000B3Er 2                       jsr     CHRGET
000B3Er 2                       jsr     LCE2B
000B3Er 2                       tax
000B3Er 2                       jsr     CHRGOT
000B3Er 2                       jsr     LCE2B
000B3Er 2                       pha
000B3Er 2                       jsr     CHRGOT
000B3Er 2                       cmp     #$22
000B3Er 2                       bne     LCE48
000B3Er 2                       jsr     CHRGET
000B3Er 2                       pla
000B3Er 2                       tay
000B3Er 2                       pla
000B3Er 2                       pla
000B3Er 2                       txa
000B3Er 2                       jmp     GIVAYF
000B3Er 2               
000B3Er 2               LCE2B:
000B3Er 2                       jsr     ASCNIB
000B3Er 2                       bcs     LCE47
000B3Er 2                       pha
000B3Er 2                       jsr     CHRGET
000B3Er 2                       jsr     ASCNIB
000B3Er 2                       sta     FAC+4
000B3Er 2                       bcs     LCE46
000B3Er 2                       jsr     CHRGET
000B3Er 2                       pla
000B3Er 2                       asl     a
000B3Er 2                       asl     a
000B3Er 2                       asl     a
000B3Er 2                       asl     a
000B3Er 2                       ora     FAC+4
000B3Er 2                       rts
000B3Er 2               
000B3Er 2               LCE46:
000B3Er 2                       pla
000B3Er 2               LCE47:
000B3Er 2                       pla
000B3Er 2               LCE48:
000B3Er 2                       pla
000B3Er 2               LCE49:
000B3Er 2                       pla
000B3Er 2                       sta     ZD3
000B3Er 2                       pla
000B3Er 2                       sta     ZD4
000B3Er 2                       jmp     ZERO_FAC
000B3Er 2               .endif
000B3Er 2               
000B3Er 1               .include "var.s"
000B3Er 2               .segment "CODE"
000B3Er 2               
000B3Er 2               ; ----------------------------------------------------------------------------
000B3Er 2               ; "DIM" STATEMENT
000B3Er 2               ; ----------------------------------------------------------------------------
000B3Er 2               NXDIM:
000B3Er 2  20 rr rr             jsr     CHKCOM
000B41r 2               DIM:
000B41r 2  AA                   tax
000B42r 2  20 rr rr             jsr     PTRGET2
000B45r 2  20 rr rr             jsr     CHRGOT
000B48r 2  D0 F4                bne     NXDIM
000B4Ar 2  60                   rts
000B4Br 2               
000B4Br 2               ; ----------------------------------------------------------------------------
000B4Br 2               ; PTRGET -- GENERAL VARIABLE SCAN
000B4Br 2               ;
000B4Br 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000B4Br 2               ; VARTAB AND ARYTAB FOR THE NAME.
000B4Br 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000B4Br 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000B4Br 2               ;
000B4Br 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000B4Br 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000B4Br 2               ;		ELSE = 0
000B4Br 2               ;
000B4Br 2               ;	SUBFLG -- = $00
000B4Br 2               ;		= $40 IF CALLED FROM "GETARYPT"
000B4Br 2               ; ----------------------------------------------------------------------------
000B4Br 2               PTRGET:
000B4Br 2  A2 00                ldx     #$00
000B4Dr 2  20 rr rr             jsr     CHRGOT
000B50r 2               PTRGET2:
000B50r 2  86 rr                stx     DIMFLG
000B52r 2               PTRGET3:
000B52r 2  85 rr                sta     VARNAM
000B54r 2  20 rr rr             jsr     CHRGOT
000B57r 2  20 rr rr             jsr     ISLETC
000B5Ar 2  B0 03                bcs     NAMOK
000B5Cr 2               SYNERR3:
000B5Cr 2  4C rr rr             jmp     SYNERR
000B5Fr 2               NAMOK:
000B5Fr 2  A2 00                ldx     #$00
000B61r 2  86 rr                stx     VALTYP
000B63r 2               .ifndef CONFIG_SMALL
000B63r 2                       stx     VALTYP+1
000B63r 2               .endif
000B63r 2  20 rr rr             jsr     CHRGET
000B66r 2  90 05                bcc     L2ECD
000B68r 2  20 rr rr             jsr     ISLETC
000B6Br 2  90 0B                bcc     L2ED8
000B6Dr 2               L2ECD:
000B6Dr 2  AA                   tax
000B6Er 2               L2ECE:
000B6Er 2  20 rr rr             jsr     CHRGET
000B71r 2  90 FB                bcc     L2ECE
000B73r 2  20 rr rr             jsr     ISLETC
000B76r 2  B0 F6                bcs     L2ECE
000B78r 2               L2ED8:
000B78r 2  C9 24                cmp     #$24
000B7Ar 2               .ifdef CONFIG_SMALL
000B7Ar 2  D0 0B                bne     L2EF9
000B7Cr 2               .else
000B7Cr 2                       bne     L2EE2
000B7Cr 2               .endif
000B7Cr 2  A9 FF                lda     #$FF
000B7Er 2  85 rr                sta     VALTYP
000B80r 2               .ifndef CONFIG_SMALL
000B80r 2                       bne     L2EF2
000B80r 2               L2EE2:
000B80r 2                       cmp     #$25
000B80r 2                       bne     L2EF9
000B80r 2                       lda     SUBFLG
000B80r 2                       bne     SYNERR3
000B80r 2                       lda     #$80
000B80r 2                       sta     VALTYP+1
000B80r 2                       ora     VARNAM
000B80r 2                       sta     VARNAM
000B80r 2               L2EF2:
000B80r 2               .endif
000B80r 2  8A                   txa
000B81r 2  09 80                ora     #$80
000B83r 2  AA                   tax
000B84r 2  20 rr rr             jsr     CHRGET
000B87r 2               L2EF9:
000B87r 2  86 rr                stx     VARNAM+1
000B89r 2  38                   sec
000B8Ar 2  05 rr                ora     SUBFLG
000B8Cr 2  E9 28                sbc     #$28
000B8Er 2  D0 03                bne     L2F05
000B90r 2  4C rr rr             jmp     ARRAY
000B93r 2               L2F05:
000B93r 2  A9 00                lda     #$00
000B95r 2  85 rr                sta     SUBFLG
000B97r 2  A5 rr                lda     VARTAB
000B99r 2  A6 rr                ldx     VARTAB+1
000B9Br 2  A0 00                ldy     #$00
000B9Dr 2               L2F0F:
000B9Dr 2  86 rr                stx     LOWTR+1
000B9Fr 2               L2F11:
000B9Fr 2  85 rr                sta     LOWTR
000BA1r 2  E4 rr                cpx     ARYTAB+1
000BA3r 2  D0 04                bne     L2F1B
000BA5r 2  C5 rr                cmp     ARYTAB
000BA7r 2  F0 22                beq     NAMENOTFOUND
000BA9r 2               L2F1B:
000BA9r 2  A5 rr                lda     VARNAM
000BABr 2  D1 rr                cmp     (LOWTR),y
000BADr 2  D0 08                bne     L2F29
000BAFr 2  A5 rr                lda     VARNAM+1
000BB1r 2  C8                   iny
000BB2r 2  D1 rr                cmp     (LOWTR),y
000BB4r 2  F0 5F                beq     SET_VARPNT_AND_YA
000BB6r 2  88                   dey
000BB7r 2               L2F29:
000BB7r 2  18                   clc
000BB8r 2  A5 rr                lda     LOWTR
000BBAr 2  69 06                adc     #BYTES_PER_VARIABLE
000BBCr 2  90 E1                bcc     L2F11
000BBEr 2  E8                   inx
000BBFr 2  D0 DC                bne     L2F0F
000BC1r 2               
000BC1r 2               ; ----------------------------------------------------------------------------
000BC1r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000BC1r 2               ;
000BC1r 2               ; RETURN CARRY = 1 IF A-Z
000BC1r 2               ;	= 0 IF NOT
000BC1r 2               ; ----------------------------------------------------------------------------
000BC1r 2               ISLETC:
000BC1r 2  C9 41                cmp     #$41
000BC3r 2  90 05                bcc     L2F3C
000BC5r 2  E9 5B                sbc     #$5B
000BC7r 2  38                   sec
000BC8r 2  E9 A5                sbc     #$A5
000BCAr 2               L2F3C:
000BCAr 2  60                   rts
000BCBr 2               
000BCBr 2               ; ----------------------------------------------------------------------------
000BCBr 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000BCBr 2               ; ----------------------------------------------------------------------------
000BCBr 2               NAMENOTFOUND:
000BCBr 2  68                   pla
000BCCr 2  48                   pha
000BCDr 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000BCFr 2  D0 05                bne     MAKENEWVARIABLE
000BD1r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000BD1r 2                       tsx
000BD1r 2                       lda     STACK+2,x
000BD1r 2                       cmp     #>FRM_VARIABLE_CALL
000BD1r 2                       bne     MAKENEWVARIABLE
000BD1r 2               .endif
000BD1r 2               LD015:
000BD1r 2  A9 rr                lda     #<C_ZERO
000BD3r 2  A0 rr                ldy     #>C_ZERO
000BD5r 2  60                   rts
000BD6r 2               
000BD6r 2               ; ----------------------------------------------------------------------------
000BD6r 2               .ifndef CONFIG_2
000BD6r 2               C_ZERO:
000BD6r 2                       .byte   $00,$00
000BD6r 2               .endif
000BD6r 2               
000BD6r 2               ; ----------------------------------------------------------------------------
000BD6r 2               ; MAKE A NEW SIMPLE VARIABLE
000BD6r 2               ;
000BD6r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000BD6r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000BD6r 2               ; ----------------------------------------------------------------------------
000BD6r 2               MAKENEWVARIABLE:
000BD6r 2               .ifdef CONFIG_CBM_ALL
000BD6r 2                       lda     VARNAM
000BD6r 2                       ldy     VARNAM+1
000BD6r 2                       cmp     #$54
000BD6r 2                       bne     LD02F
000BD6r 2                       cpy     #$C9
000BD6r 2                       beq     LD015
000BD6r 2                       cpy     #$49
000BD6r 2                       bne     LD02F
000BD6r 2               LD02C:
000BD6r 2                       jmp     SYNERR
000BD6r 2               LD02F:
000BD6r 2                       cmp     #$53
000BD6r 2                       bne     LD037
000BD6r 2                       cpy     #$54
000BD6r 2                       beq     LD02C
000BD6r 2               LD037:
000BD6r 2               .endif
000BD6r 2  A5 rr                lda     ARYTAB
000BD8r 2  A4 rr                ldy     ARYTAB+1
000BDAr 2  85 rr                sta     LOWTR
000BDCr 2  84 rr                sty     LOWTR+1
000BDEr 2  A5 rr                lda     STREND
000BE0r 2  A4 rr                ldy     STREND+1
000BE2r 2  85 rr                sta     HIGHTR
000BE4r 2  84 rr                sty     HIGHTR+1
000BE6r 2  18                   clc
000BE7r 2  69 06                adc     #BYTES_PER_VARIABLE
000BE9r 2  90 01                bcc     L2F68
000BEBr 2  C8                   iny
000BECr 2               L2F68:
000BECr 2  85 rr                sta     HIGHDS
000BEEr 2  84 rr                sty     HIGHDS+1
000BF0r 2  20 rr rr             jsr     BLTU
000BF3r 2  A5 rr                lda     HIGHDS
000BF5r 2  A4 rr                ldy     HIGHDS+1
000BF7r 2  C8                   iny
000BF8r 2  85 rr                sta     ARYTAB
000BFAr 2  84 rr                sty     ARYTAB+1
000BFCr 2  A0 00                ldy     #$00
000BFEr 2  A5 rr                lda     VARNAM
000C00r 2  91 rr                sta     (LOWTR),y
000C02r 2  C8                   iny
000C03r 2  A5 rr                lda     VARNAM+1
000C05r 2  91 rr                sta     (LOWTR),y
000C07r 2  A9 00                lda     #$00
000C09r 2  C8                   iny
000C0Ar 2  91 rr                sta     (LOWTR),y
000C0Cr 2  C8                   iny
000C0Dr 2  91 rr                sta     (LOWTR),y
000C0Fr 2  C8                   iny
000C10r 2  91 rr                sta     (LOWTR),y
000C12r 2  C8                   iny
000C13r 2  91 rr                sta     (LOWTR),y
000C15r 2               .ifndef CONFIG_SMALL
000C15r 2                       iny
000C15r 2                       sta     (LOWTR),y
000C15r 2               .endif
000C15r 2               
000C15r 2               ; ----------------------------------------------------------------------------
000C15r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000C15r 2               ; ----------------------------------------------------------------------------
000C15r 2               SET_VARPNT_AND_YA:
000C15r 2  A5 rr                lda     LOWTR
000C17r 2  18                   clc
000C18r 2  69 02                adc     #$02
000C1Ar 2  A4 rr                ldy     LOWTR+1
000C1Cr 2  90 01                bcc     L2F9E
000C1Er 2  C8                   iny
000C1Fr 2               L2F9E:
000C1Fr 2  85 rr                sta     VARPNT
000C21r 2  84 rr                sty     VARPNT+1
000C23r 2  60                   rts
000C24r 2               
000C24r 1               .include "array.s"
000C24r 2               .segment "CODE"
000C24r 2               
000C24r 2               ; ----------------------------------------------------------------------------
000C24r 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000C24r 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000C24r 2               ; ----------------------------------------------------------------------------
000C24r 2               GETARY:
000C24r 2  A5 rr                lda     EOLPNTR
000C26r 2  0A                   asl     a
000C27r 2  69 05                adc     #$05
000C29r 2  65 rr                adc     LOWTR
000C2Br 2  A4 rr                ldy     LOWTR+1
000C2Dr 2  90 01                bcc     L2FAF
000C2Fr 2  C8                   iny
000C30r 2               L2FAF:
000C30r 2  85 rr                sta     HIGHDS
000C32r 2  84 rr                sty     HIGHDS+1
000C34r 2  60                   rts
000C35r 2               
000C35r 2               ; ----------------------------------------------------------------------------
000C35r 2               NEG32768:
000C35r 2  90 80 00 00          .byte   $90,$80,$00,$00
000C39r 2               
000C39r 2               .ifdef CONFIG_2C
000C39r 2  00           		.byte	$00; bugfix: short number
000C3Ar 2               .endif
000C3Ar 2               
000C3Ar 2               ; ----------------------------------------------------------------------------
000C3Ar 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000C3Ar 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000C3Ar 2               ; IN FAC+3,4
000C3Ar 2               ; ----------------------------------------------------------------------------
000C3Ar 2               MAKINT:
000C3Ar 2  20 rr rr             jsr     CHRGET
000C3Dr 2               .ifdef CONFIG_2
000C3Dr 2  20 rr rr             jsr     FRMEVL
000C40r 2               .else
000C40r 2                       jsr     FRMNUM
000C40r 2               .endif
000C40r 2               
000C40r 2               ; ----------------------------------------------------------------------------
000C40r 2               ; CONVERT FAC TO INTEGER
000C40r 2               ; MUST BE POSITIVE AND LESS THAN 32768
000C40r 2               ; ----------------------------------------------------------------------------
000C40r 2               MKINT:
000C40r 2               .ifdef CONFIG_2
000C40r 2  20 rr rr             jsr     CHKNUM
000C43r 2               .endif
000C43r 2  A5 rr                lda     FACSIGN
000C45r 2  30 0D                bmi     MI1
000C47r 2               
000C47r 2               ; ----------------------------------------------------------------------------
000C47r 2               ; CONVERT FAC TO INTEGER
000C47r 2               ; MUST BE -32767 <= FAC <= 32767
000C47r 2               ; ----------------------------------------------------------------------------
000C47r 2               AYINT:
000C47r 2  A5 rr                lda     FAC
000C49r 2  C9 90                cmp     #$90
000C4Br 2  90 09                bcc     MI2
000C4Dr 2  A9 rr                lda     #<NEG32768
000C4Fr 2  A0 rr                ldy     #>NEG32768
000C51r 2  20 rr rr             jsr     FCOMP
000C54r 2               MI1:
000C54r 2  D0 74                bne     IQERR
000C56r 2               MI2:
000C56r 2  4C rr rr             jmp     QINT
000C59r 2               
000C59r 2               ; ----------------------------------------------------------------------------
000C59r 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000C59r 2               ; ----------------------------------------------------------------------------
000C59r 2               ARRAY:
000C59r 2  A5 rr                lda     DIMFLG
000C5Br 2               .ifndef CONFIG_SMALL
000C5Br 2                       ora     VALTYP+1
000C5Br 2               .endif
000C5Br 2  48                   pha
000C5Cr 2  A5 rr                lda     VALTYP
000C5Er 2  48                   pha
000C5Fr 2  A0 00                ldy     #$00
000C61r 2               L2FDE:
000C61r 2  98                   tya
000C62r 2  48                   pha
000C63r 2  A5 rr                lda     VARNAM+1
000C65r 2  48                   pha
000C66r 2  A5 rr                lda     VARNAM
000C68r 2  48                   pha
000C69r 2  20 rr rr             jsr     MAKINT
000C6Cr 2  68                   pla
000C6Dr 2  85 rr                sta     VARNAM
000C6Fr 2  68                   pla
000C70r 2  85 rr                sta     VARNAM+1
000C72r 2  68                   pla
000C73r 2  A8                   tay
000C74r 2  BA                   tsx
000C75r 2  BD 02 01             lda     STACK+2,x
000C78r 2  48                   pha
000C79r 2  BD 01 01             lda     STACK+1,x
000C7Cr 2  48                   pha
000C7Dr 2  A5 rr                lda     FAC_LAST-1
000C7Fr 2  9D 02 01             sta     STACK+2,x
000C82r 2  A5 rr                lda     FAC_LAST
000C84r 2  9D 01 01             sta     STACK+1,x
000C87r 2  C8                   iny
000C88r 2  20 rr rr             jsr     CHRGOT
000C8Br 2  C9 2C                cmp     #$2C
000C8Dr 2  F0 D2                beq     L2FDE
000C8Fr 2  84 rr                sty     EOLPNTR
000C91r 2  20 rr rr             jsr     CHKCLS
000C94r 2  68                   pla
000C95r 2  85 rr                sta     VALTYP
000C97r 2  68                   pla
000C98r 2               .ifndef CONFIG_SMALL
000C98r 2                       sta     VALTYP+1
000C98r 2                       and     #$7F
000C98r 2               .endif
000C98r 2  85 rr                sta     DIMFLG
000C9Ar 2               ; ----------------------------------------------------------------------------
000C9Ar 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000C9Ar 2               ; ----------------------------------------------------------------------------
000C9Ar 2  A6 rr                ldx     ARYTAB
000C9Cr 2  A5 rr                lda     ARYTAB+1
000C9Er 2               L301F:
000C9Er 2  86 rr                stx     LOWTR
000CA0r 2  85 rr                sta     LOWTR+1
000CA2r 2  C5 rr                cmp     STREND+1
000CA4r 2  D0 04                bne     L302B
000CA6r 2  E4 rr                cpx     STREND
000CA8r 2  F0 39                beq     MAKE_NEW_ARRAY
000CAAr 2               L302B:
000CAAr 2  A0 00                ldy     #$00
000CACr 2  B1 rr                lda     (LOWTR),y
000CAEr 2  C8                   iny
000CAFr 2  C5 rr                cmp     VARNAM
000CB1r 2  D0 06                bne     L303A
000CB3r 2  A5 rr                lda     VARNAM+1
000CB5r 2  D1 rr                cmp     (LOWTR),y
000CB7r 2  F0 16                beq     USE_OLD_ARRAY
000CB9r 2               L303A:
000CB9r 2  C8                   iny
000CBAr 2  B1 rr                lda     (LOWTR),y
000CBCr 2  18                   clc
000CBDr 2  65 rr                adc     LOWTR
000CBFr 2  AA                   tax
000CC0r 2  C8                   iny
000CC1r 2  B1 rr                lda     (LOWTR),y
000CC3r 2  65 rr                adc     LOWTR+1
000CC5r 2  90 D7                bcc     L301F
000CC7r 2               
000CC7r 2               ; ----------------------------------------------------------------------------
000CC7r 2               ; ERROR:  BAD SUBSCRIPTS
000CC7r 2               ; ----------------------------------------------------------------------------
000CC7r 2               SUBERR:
000CC7r 2  A2 10                ldx     #ERR_BADSUBS
000CC9r 2  2C                   .byte   $2C
000CCAr 2               
000CCAr 2               ; ----------------------------------------------------------------------------
000CCAr 2               ; ERROR:  ILLEGAL QUANTITY
000CCAr 2               ; ----------------------------------------------------------------------------
000CCAr 2               IQERR:
000CCAr 2  A2 08                ldx     #ERR_ILLQTY
000CCCr 2               JER:
000CCCr 2  4C rr rr             jmp     ERROR
000CCFr 2               
000CCFr 2               ; ----------------------------------------------------------------------------
000CCFr 2               ; FOUND THE ARRAY
000CCFr 2               ; ----------------------------------------------------------------------------
000CCFr 2               USE_OLD_ARRAY:
000CCFr 2  A2 12                ldx     #ERR_REDIMD
000CD1r 2  A5 rr                lda     DIMFLG
000CD3r 2  D0 F7                bne     JER
000CD5r 2  20 rr rr             jsr     GETARY
000CD8r 2  A5 rr                lda     EOLPNTR
000CDAr 2  A0 04                ldy     #$04
000CDCr 2  D1 rr                cmp     (LOWTR),y
000CDEr 2  D0 E7                bne     SUBERR
000CE0r 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000CE3r 2               
000CE3r 2               ; ----------------------------------------------------------------------------
000CE3r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000CE3r 2               ; ----------------------------------------------------------------------------
000CE3r 2               MAKE_NEW_ARRAY:
000CE3r 2  20 rr rr             jsr     GETARY
000CE6r 2  20 rr rr             jsr     REASON
000CE9r 2  A9 00                lda     #$00
000CEBr 2  A8                   tay
000CECr 2  85 rr                sta     STRNG2+1
000CEEr 2  A2 04                ldx     #BYTES_PER_ELEMENT
000CF0r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000CF0r 2                       stx     STRNG2
000CF0r 2               .endif
000CF0r 2  A5 rr                lda     VARNAM
000CF2r 2  91 rr                sta     (LOWTR),y
000CF4r 2               .ifndef CONFIG_SMALL
000CF4r 2                       bpl     L3078
000CF4r 2                       dex
000CF4r 2               L3078:
000CF4r 2               .endif
000CF4r 2  C8                   iny
000CF5r 2  A5 rr                lda     VARNAM+1
000CF7r 2  91 rr                sta     (LOWTR),y
000CF9r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000CF9r 2  10 01                bpl     L3081
000CFBr 2  CA                   dex
000CFCr 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000CFCr 2                       dex
000CFCr 2                 .endif
000CFCr 2               L3081:
000CFCr 2  86 rr                stx     STRNG2
000CFEr 2               .endif
000CFEr 2  A5 rr                lda     EOLPNTR
000D00r 2  C8                   iny
000D01r 2  C8                   iny
000D02r 2  C8                   iny
000D03r 2  91 rr                sta     (LOWTR),y
000D05r 2               L308A:
000D05r 2  A2 0B                ldx     #$0B
000D07r 2  A9 00                lda     #$00
000D09r 2  24 rr                bit     DIMFLG
000D0Br 2  50 08                bvc     L309A
000D0Dr 2  68                   pla
000D0Er 2  18                   clc
000D0Fr 2  69 01                adc     #$01
000D11r 2  AA                   tax
000D12r 2  68                   pla
000D13r 2  69 00                adc     #$00
000D15r 2               L309A:
000D15r 2  C8                   iny
000D16r 2  91 rr                sta     (LOWTR),y
000D18r 2  C8                   iny
000D19r 2  8A                   txa
000D1Ar 2  91 rr                sta     (LOWTR),y
000D1Cr 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000D1Fr 2  86 rr                stx     STRNG2
000D21r 2  85 rr                sta     STRNG2+1
000D23r 2  A4 rr                ldy     INDEX
000D25r 2  C6 rr                dec     EOLPNTR
000D27r 2  D0 DC                bne     L308A
000D29r 2  65 rr                adc     HIGHDS+1
000D2Br 2  B0 5D                bcs     GME
000D2Dr 2  85 rr                sta     HIGHDS+1
000D2Fr 2  A8                   tay
000D30r 2  8A                   txa
000D31r 2  65 rr                adc     HIGHDS
000D33r 2  90 03                bcc     L30BD
000D35r 2  C8                   iny
000D36r 2  F0 52                beq     GME
000D38r 2               L30BD:
000D38r 2  20 rr rr             jsr     REASON
000D3Br 2  85 rr                sta     STREND
000D3Dr 2  84 rr                sty     STREND+1
000D3Fr 2  A9 00                lda     #$00
000D41r 2  E6 rr                inc     STRNG2+1
000D43r 2  A4 rr                ldy     STRNG2
000D45r 2  F0 05                beq     L30D1
000D47r 2               L30CC:
000D47r 2  88                   dey
000D48r 2  91 rr                sta     (HIGHDS),y
000D4Ar 2  D0 FB                bne     L30CC
000D4Cr 2               L30D1:
000D4Cr 2  C6 rr                dec     HIGHDS+1
000D4Er 2  C6 rr                dec     STRNG2+1
000D50r 2  D0 F5                bne     L30CC
000D52r 2  E6 rr                inc     HIGHDS+1
000D54r 2  38                   sec
000D55r 2  A5 rr                lda     STREND
000D57r 2  E5 rr                sbc     LOWTR
000D59r 2  A0 02                ldy     #$02
000D5Br 2  91 rr                sta     (LOWTR),y
000D5Dr 2  A5 rr                lda     STREND+1
000D5Fr 2  C8                   iny
000D60r 2  E5 rr                sbc     LOWTR+1
000D62r 2  91 rr                sta     (LOWTR),y
000D64r 2  A5 rr                lda     DIMFLG
000D66r 2  D0 5C                bne     RTS9
000D68r 2  C8                   iny
000D69r 2               
000D69r 2               ; ----------------------------------------------------------------------------
000D69r 2               ; FIND SPECIFIED ARRAY ELEMENT
000D69r 2               ;
000D69r 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000D69r 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000D69r 2               ; ----------------------------------------------------------------------------
000D69r 2               FIND_ARRAY_ELEMENT:
000D69r 2  B1 rr                lda     (LOWTR),y
000D6Br 2  85 rr                sta     EOLPNTR
000D6Dr 2  A9 00                lda     #$00
000D6Fr 2  85 rr                sta     STRNG2
000D71r 2               L30F6:
000D71r 2  85 rr                sta     STRNG2+1
000D73r 2  C8                   iny
000D74r 2  68                   pla
000D75r 2  AA                   tax
000D76r 2  85 rr                sta     FAC_LAST-1
000D78r 2  68                   pla
000D79r 2  85 rr                sta     FAC_LAST
000D7Br 2  D1 rr                cmp     (LOWTR),y
000D7Dr 2  90 0E                bcc     FAE2
000D7Fr 2  D0 06                bne     GSE
000D81r 2  C8                   iny
000D82r 2  8A                   txa
000D83r 2  D1 rr                cmp     (LOWTR),y
000D85r 2  90 07                bcc     FAE3
000D87r 2               ; ----------------------------------------------------------------------------
000D87r 2               GSE:
000D87r 2  4C rr rr             jmp     SUBERR
000D8Ar 2               GME:
000D8Ar 2  4C rr rr             jmp     MEMERR
000D8Dr 2               ; ----------------------------------------------------------------------------
000D8Dr 2               FAE2:
000D8Dr 2  C8                   iny
000D8Er 2               FAE3:
000D8Er 2  A5 rr                lda     STRNG2+1
000D90r 2  05 rr                ora     STRNG2
000D92r 2  18                   clc
000D93r 2  F0 0A                beq     L3124
000D95r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000D98r 2  8A                   txa
000D99r 2  65 rr                adc     FAC_LAST-1
000D9Br 2  AA                   tax
000D9Cr 2  98                   tya
000D9Dr 2  A4 rr                ldy     INDEX
000D9Fr 2               L3124:
000D9Fr 2  65 rr                adc     FAC_LAST
000DA1r 2  86 rr                stx     STRNG2
000DA3r 2  C6 rr                dec     EOLPNTR
000DA5r 2  D0 CA                bne     L30F6
000DA7r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000DA7r 2                       asl     STRNG2
000DA7r 2                       rol     a
000DA7r 2                       bcs     GSE
000DA7r 2                       asl     STRNG2
000DA7r 2                       rol     a
000DA7r 2                       bcs     GSE
000DA7r 2                       tay
000DA7r 2                       lda     STRNG2
000DA7r 2               .else
000DA7r 2                 .ifdef CONFIG_11A
000DA7r 2  85 rr                sta     STRNG2+1
000DA9r 2                 .endif
000DA9r 2  A2 04                ldx     #BYTES_FP
000DABr 2                 .ifdef CONFIG_SMALL
000DABr 2  A5 rr                lda     VARNAM+1
000DADr 2                 .else
000DADr 2                       lda     VARNAM
000DADr 2                 .endif
000DADr 2  10 01                bpl     L3135
000DAFr 2  CA                   dex
000DB0r 2               L3135:
000DB0r 2                 .ifdef CONFIG_SMALL
000DB0r 2  86 rr                stx     RESULT+1
000DB2r 2                 .else
000DB2r 2                       lda     VARNAM+1
000DB2r 2                       bpl     L313B
000DB2r 2                       dex
000DB2r 2                       dex
000DB2r 2               L313B:
000DB2r 2                       stx     RESULT+2
000DB2r 2                 .endif
000DB2r 2  A9 00                lda     #$00
000DB4r 2  20 rr rr             jsr     MULTIPLY_SUBS1
000DB7r 2  8A                   txa
000DB8r 2               .endif
000DB8r 2  65 rr                adc     HIGHDS
000DBAr 2  85 rr                sta     VARPNT
000DBCr 2  98                   tya
000DBDr 2  65 rr                adc     HIGHDS+1
000DBFr 2  85 rr                sta     VARPNT+1
000DC1r 2  A8                   tay
000DC2r 2  A5 rr                lda     VARPNT
000DC4r 2               RTS9:
000DC4r 2  60                   rts
000DC5r 2               
000DC5r 2               ; ----------------------------------------------------------------------------
000DC5r 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000DC5r 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000DC5r 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000DC5r 2               ; ----------------------------------------------------------------------------
000DC5r 2               MULTIPLY_SUBSCRIPT:
000DC5r 2  84 rr                sty     INDEX
000DC7r 2  B1 rr                lda     (LOWTR),y
000DC9r 2  85 rr                sta     RESULT_LAST-2
000DCBr 2  88                   dey
000DCCr 2  B1 rr                lda     (LOWTR),y
000DCEr 2               MULTIPLY_SUBS1:
000DCEr 2  85 rr                sta     RESULT_LAST-1
000DD0r 2  A9 10                lda     #$10
000DD2r 2  85 rr                sta     INDX
000DD4r 2  A2 00                ldx     #$00
000DD6r 2  A0 00                ldy     #$00
000DD8r 2               L3163:
000DD8r 2  8A                   txa
000DD9r 2  0A                   asl     a
000DDAr 2  AA                   tax
000DDBr 2  98                   tya
000DDCr 2  2A                   rol     a
000DDDr 2  A8                   tay
000DDEr 2  B0 AA                bcs     GME
000DE0r 2  06 rr                asl     STRNG2
000DE2r 2  26 rr                rol     STRNG2+1
000DE4r 2  90 0B                bcc     L317C
000DE6r 2  18                   clc
000DE7r 2  8A                   txa
000DE8r 2  65 rr                adc     RESULT_LAST-2
000DEAr 2  AA                   tax
000DEBr 2  98                   tya
000DECr 2  65 rr                adc     RESULT_LAST-1
000DEEr 2  A8                   tay
000DEFr 2  B0 99                bcs     GME
000DF1r 2               L317C:
000DF1r 2  C6 rr                dec     INDX
000DF3r 2  D0 E3                bne     L3163
000DF5r 2  60                   rts
000DF6r 2               
000DF6r 2               
000DF6r 1               .include "misc2.s"
000DF6r 2               .segment "CODE"
000DF6r 2               
000DF6r 2               ; ----------------------------------------------------------------------------
000DF6r 2               ; "FRE" FUNCTION
000DF6r 2               ;
000DF6r 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000DF6r 2               ; ----------------------------------------------------------------------------
000DF6r 2               FRE:
000DF6r 2  A5 rr                lda     VALTYP
000DF8r 2  F0 03                beq     L3188
000DFAr 2  20 rr rr             jsr     FREFAC
000DFDr 2               L3188:
000DFDr 2  20 rr rr             jsr     GARBAG
000E00r 2  38                   sec
000E01r 2  A5 rr                lda     FRETOP
000E03r 2  E5 rr                sbc     STREND
000E05r 2  A8                   tay
000E06r 2  A5 rr                lda     FRETOP+1
000E08r 2  E5 rr                sbc     STREND+1
000E0Ar 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000E0Ar 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000E0Ar 2               
000E0Ar 2               ; ----------------------------------------------------------------------------
000E0Ar 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000E0Ar 2               ; ----------------------------------------------------------------------------
000E0Ar 2               GIVAYF:
000E0Ar 2  A2 00                ldx     #$00
000E0Cr 2  86 rr                stx     VALTYP
000E0Er 2  85 rr                sta     FAC+1
000E10r 2  84 rr                sty     FAC+2
000E12r 2  A2 90                ldx     #$90
000E14r 2  4C rr rr             jmp     FLOAT1
000E17r 2               POS:
000E17r 2  A4 rr                ldy     POSX
000E19r 2               
000E19r 2               ; ----------------------------------------------------------------------------
000E19r 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000E19r 2               ; ----------------------------------------------------------------------------
000E19r 2               SNGFLT:
000E19r 2  A9 00                lda     #$00
000E1Br 2  F0 ED                beq     GIVAYF
000E1Dr 2               
000E1Dr 2               ; ----------------------------------------------------------------------------
000E1Dr 2               ; CHECK FOR DIRECT OR RUNNING MODE
000E1Dr 2               ; GIVING ERROR IF DIRECT MODE
000E1Dr 2               ; ----------------------------------------------------------------------------
000E1Dr 2               ERRDIR:
000E1Dr 2  A6 rr                ldx     CURLIN+1
000E1Fr 2  E8                   inx
000E20r 2  D0 A2                bne     RTS9
000E22r 2  A2 16                ldx     #ERR_ILLDIR
000E24r 2               .ifdef CONFIG_2
000E24r 2  2C                   .byte   $2C
000E25r 2               LD288:
000E25r 2  A2 20                ldx     #ERR_UNDEFFN
000E27r 2               .endif
000E27r 2               L31AF:
000E27r 2  4C rr rr             jmp     ERROR
000E2Ar 2               DEF:
000E2Ar 2  20 rr rr             jsr     FNC
000E2Dr 2  20 rr rr             jsr     ERRDIR
000E30r 2  20 rr rr             jsr     CHKOPN
000E33r 2  A9 80                lda     #$80
000E35r 2  85 rr                sta     SUBFLG
000E37r 2  20 rr rr             jsr     PTRGET
000E3Ar 2  20 rr rr             jsr     CHKNUM
000E3Dr 2  20 rr rr             jsr     CHKCLS
000E40r 2  A9 AC                lda     #TOKEN_EQUAL
000E42r 2  20 rr rr             jsr     SYNCHR
000E45r 2               .ifndef CONFIG_SMALL
000E45r 2                       pha
000E45r 2               .endif
000E45r 2  A5 rr                lda     VARPNT+1
000E47r 2  48                   pha
000E48r 2  A5 rr                lda     VARPNT
000E4Ar 2  48                   pha
000E4Br 2  A5 rr                lda     TXTPTR+1
000E4Dr 2  48                   pha
000E4Er 2  A5 rr                lda     TXTPTR
000E50r 2  48                   pha
000E51r 2  20 rr rr             jsr     DATA
000E54r 2  4C rr rr             jmp     L3250
000E57r 2               FNC:
000E57r 2  A9 9F                lda     #TOKEN_FN
000E59r 2  20 rr rr             jsr     SYNCHR
000E5Cr 2  09 80                ora     #$80
000E5Er 2  85 rr                sta     SUBFLG
000E60r 2  20 rr rr             jsr     PTRGET3
000E63r 2  85 rr                sta     FNCNAM
000E65r 2  84 rr                sty     FNCNAM+1
000E67r 2  4C rr rr             jmp     CHKNUM
000E6Ar 2               L31F3:
000E6Ar 2  20 rr rr             jsr     FNC
000E6Dr 2  A5 rr                lda     FNCNAM+1
000E6Fr 2  48                   pha
000E70r 2  A5 rr                lda     FNCNAM
000E72r 2  48                   pha
000E73r 2  20 rr rr             jsr     PARCHK
000E76r 2  20 rr rr             jsr     CHKNUM
000E79r 2  68                   pla
000E7Ar 2  85 rr                sta     FNCNAM
000E7Cr 2  68                   pla
000E7Dr 2  85 rr                sta     FNCNAM+1
000E7Fr 2  A0 02                ldy     #$02
000E81r 2               .ifndef CONFIG_2
000E81r 2                       ldx     #ERR_UNDEFFN
000E81r 2               .endif
000E81r 2  B1 rr                lda     (FNCNAM),y
000E83r 2               .ifndef CONFIG_2
000E83r 2                       beq     L31AF
000E83r 2               .endif
000E83r 2  85 rr                sta     VARPNT
000E85r 2  AA                   tax
000E86r 2  C8                   iny
000E87r 2  B1 rr                lda     (FNCNAM),y
000E89r 2               .ifdef CONFIG_2
000E89r 2  F0 9A                beq     LD288
000E8Br 2               .endif
000E8Br 2  85 rr                sta     VARPNT+1
000E8Dr 2               .ifndef CONFIG_SMALL
000E8Dr 2                       iny
000E8Dr 2               .endif
000E8Dr 2               L3219:
000E8Dr 2  B1 rr                lda     (VARPNT),y
000E8Fr 2  48                   pha
000E90r 2  88                   dey
000E91r 2  10 FA                bpl     L3219
000E93r 2  A4 rr                ldy     VARPNT+1
000E95r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000E98r 2  A5 rr                lda     TXTPTR+1
000E9Ar 2  48                   pha
000E9Br 2  A5 rr                lda     TXTPTR
000E9Dr 2  48                   pha
000E9Er 2  B1 rr                lda     (FNCNAM),y
000EA0r 2  85 rr                sta     TXTPTR
000EA2r 2  C8                   iny
000EA3r 2  B1 rr                lda     (FNCNAM),y
000EA5r 2  85 rr                sta     TXTPTR+1
000EA7r 2  A5 rr                lda     VARPNT+1
000EA9r 2  48                   pha
000EAAr 2  A5 rr                lda     VARPNT
000EACr 2  48                   pha
000EADr 2  20 rr rr             jsr     FRMNUM
000EB0r 2  68                   pla
000EB1r 2  85 rr                sta     FNCNAM
000EB3r 2  68                   pla
000EB4r 2  85 rr                sta     FNCNAM+1
000EB6r 2  20 rr rr             jsr     CHRGOT
000EB9r 2  F0 03                beq     L324A
000EBBr 2  4C rr rr             jmp     SYNERR
000EBEr 2               L324A:
000EBEr 2  68                   pla
000EBFr 2  85 rr                sta     TXTPTR
000EC1r 2  68                   pla
000EC2r 2  85 rr                sta     TXTPTR+1
000EC4r 2               L3250:
000EC4r 2  A0 00                ldy     #$00
000EC6r 2  68                   pla
000EC7r 2  91 rr                sta     (FNCNAM),y
000EC9r 2  68                   pla
000ECAr 2  C8                   iny
000ECBr 2  91 rr                sta     (FNCNAM),y
000ECDr 2  68                   pla
000ECEr 2  C8                   iny
000ECFr 2  91 rr                sta     (FNCNAM),y
000ED1r 2  68                   pla
000ED2r 2  C8                   iny
000ED3r 2  91 rr                sta     (FNCNAM),y
000ED5r 2               .ifndef CONFIG_SMALL
000ED5r 2                       pla
000ED5r 2                       iny
000ED5r 2                       sta     (FNCNAM),y
000ED5r 2               .endif
000ED5r 2  60                   rts
000ED6r 2               
000ED6r 1               .include "string.s"
000ED6r 2               .segment "CODE"
000ED6r 2               ; ----------------------------------------------------------------------------
000ED6r 2               ; "STR$" FUNCTION
000ED6r 2               ; ----------------------------------------------------------------------------
000ED6r 2               STR:
000ED6r 2  20 rr rr             jsr     CHKNUM
000ED9r 2  A0 00                ldy     #$00
000EDBr 2  20 rr rr             jsr     FOUT1
000EDEr 2  68                   pla
000EDFr 2  68                   pla
000EE0r 2               LD353:
000EE0r 2  A9 rr                lda     #<(STACK2-1)
000EE2r 2  A0 rr                ldy     #>(STACK2-1)
000EE4r 2               .ifndef DB6502
000EE4r 2               .if STACK2 > $0100
000EE4r 2                       bne     STRLIT
000EE4r 2               .else
000EE4r 2                       beq     STRLIT
000EE4r 2               .endif
000EE4r 2               .else
000EE4r 2  80 12                bra     STRLIT
000EE6r 2               .endif
000EE6r 2               
000EE6r 2               ; ----------------------------------------------------------------------------
000EE6r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000EE6r 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
000EE6r 2               ; ----------------------------------------------------------------------------
000EE6r 2               STRINI:
000EE6r 2  A6 rr                ldx     FAC_LAST-1
000EE8r 2  A4 rr                ldy     FAC_LAST
000EEAr 2  86 rr                stx     DSCPTR
000EECr 2  84 rr                sty     DSCPTR+1
000EEEr 2               
000EEEr 2               ; ----------------------------------------------------------------------------
000EEEr 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000EEEr 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
000EEEr 2               ; ----------------------------------------------------------------------------
000EEEr 2               STRSPA:
000EEEr 2  20 rr rr             jsr     GETSPA
000EF1r 2  86 rr                stx     FAC+1
000EF3r 2  84 rr                sty     FAC+2
000EF5r 2  85 rr                sta     FAC
000EF7r 2  60                   rts
000EF8r 2               
000EF8r 2               ; ----------------------------------------------------------------------------
000EF8r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000EF8r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
000EF8r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000EF8r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000EF8r 2               ; ----------------------------------------------------------------------------
000EF8r 2               STRLIT:
000EF8r 2  A2 22                ldx     #$22
000EFAr 2  86 rr                stx     CHARAC
000EFCr 2  86 rr                stx     ENDCHR
000EFEr 2               
000EFEr 2               ; ----------------------------------------------------------------------------
000EFEr 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000EFEr 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
000EFEr 2               ;
000EFEr 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000EFEr 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000EFEr 2               ; ----------------------------------------------------------------------------
000EFEr 2               STRLT2:
000EFEr 2  85 rr                sta     STRNG1
000F00r 2  84 rr                sty     STRNG1+1
000F02r 2  85 rr                sta     FAC+1
000F04r 2  84 rr                sty     FAC+2
000F06r 2  A0 FF                ldy     #$FF
000F08r 2               L3298:
000F08r 2  C8                   iny
000F09r 2  B1 rr                lda     (STRNG1),y
000F0Br 2  F0 0C                beq     L32A9
000F0Dr 2  C5 rr                cmp     CHARAC
000F0Fr 2  F0 04                beq     L32A5
000F11r 2  C5 rr                cmp     ENDCHR
000F13r 2  D0 F3                bne     L3298
000F15r 2               L32A5:
000F15r 2  C9 22                cmp     #$22
000F17r 2  F0 01                beq     L32AA
000F19r 2               L32A9:
000F19r 2  18                   clc
000F1Ar 2               L32AA:
000F1Ar 2  84 rr                sty     FAC
000F1Cr 2  98                   tya
000F1Dr 2  65 rr                adc     STRNG1
000F1Fr 2  85 rr                sta     STRNG2
000F21r 2  A6 rr                ldx     STRNG1+1
000F23r 2  90 01                bcc     L32B6
000F25r 2  E8                   inx
000F26r 2               L32B6:
000F26r 2  86 rr                stx     STRNG2+1
000F28r 2  A5 rr                lda     STRNG1+1
000F2Ar 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000F2Ar 2  F0 04                beq     LD399
000F2Cr 2  C9 09                cmp     #>INPUTBUFFER
000F2Er 2               .elseif .def(AIM65)
000F2Er 2                       beq     LD399
000F2Er 2                       cmp     #$01
000F2Er 2               .endif
000F2Er 2  D0 0B                bne     PUTNEW
000F30r 2               LD399:
000F30r 2  98                   tya
000F31r 2  20 rr rr             jsr     STRINI
000F34r 2  A6 rr                ldx     STRNG1
000F36r 2  A4 rr                ldy     STRNG1+1
000F38r 2  20 rr rr             jsr     MOVSTR
000F3Br 2               
000F3Br 2               ; ----------------------------------------------------------------------------
000F3Br 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
000F3Br 2               ;
000F3Br 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
000F3Br 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
000F3Br 2               ; ----------------------------------------------------------------------------
000F3Br 2               PUTNEW:
000F3Br 2  A6 rr                ldx     TEMPPT
000F3Dr 2  E0 rr                cpx     #TEMPST+9
000F3Fr 2  D0 05                bne     PUTEMP
000F41r 2  A2 1C                ldx     #ERR_FRMCPX
000F43r 2               JERR:
000F43r 2  4C rr rr             jmp     ERROR
000F46r 2               PUTEMP:
000F46r 2  A5 rr                lda     FAC
000F48r 2  95 00                sta     0,x
000F4Ar 2  A5 rr                lda     FAC+1
000F4Cr 2  95 01                sta     1,x
000F4Er 2  A5 rr                lda     FAC+2
000F50r 2  95 02                sta     2,x
000F52r 2  A0 00                ldy     #$00
000F54r 2  86 rr                stx     FAC_LAST-1
000F56r 2  84 rr                sty     FAC_LAST
000F58r 2               .ifdef CONFIG_2
000F58r 2  84 rr                sty     FACEXTENSION
000F5Ar 2               .endif
000F5Ar 2  88                   dey
000F5Br 2  84 rr                sty     VALTYP
000F5Dr 2  86 rr                stx     LASTPT
000F5Fr 2  E8                   inx
000F60r 2  E8                   inx
000F61r 2  E8                   inx
000F62r 2  86 rr                stx     TEMPPT
000F64r 2  60                   rts
000F65r 2               
000F65r 2               ; ----------------------------------------------------------------------------
000F65r 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
000F65r 2               ; (A)=# BYTES SPACE TO MAKE
000F65r 2               ;
000F65r 2               ; RETURN WITH (A) SAME,
000F65r 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
000F65r 2               ; ----------------------------------------------------------------------------
000F65r 2               GETSPA:
000F65r 2  46 rr                lsr     DATAFLG
000F67r 2               L32F1:
000F67r 2  48                   pha
000F68r 2  49 FF                eor     #$FF
000F6Ar 2  38                   sec
000F6Br 2  65 rr                adc     FRETOP
000F6Dr 2  A4 rr                ldy     FRETOP+1
000F6Fr 2  B0 01                bcs     L32FC
000F71r 2  88                   dey
000F72r 2               L32FC:
000F72r 2  C4 rr                cpy     STREND+1
000F74r 2  90 11                bcc     L3311
000F76r 2  D0 04                bne     L3306
000F78r 2  C5 rr                cmp     STREND
000F7Ar 2  90 0B                bcc     L3311
000F7Cr 2               L3306:
000F7Cr 2  85 rr                sta     FRETOP
000F7Er 2  84 rr                sty     FRETOP+1
000F80r 2  85 rr                sta     FRESPC
000F82r 2  84 rr                sty     FRESPC+1
000F84r 2  AA                   tax
000F85r 2  68                   pla
000F86r 2  60                   rts
000F87r 2               L3311:
000F87r 2  A2 0C                ldx     #ERR_MEMFULL
000F89r 2  A5 rr                lda     DATAFLG
000F8Br 2  30 B6                bmi     JERR
000F8Dr 2  20 rr rr             jsr     GARBAG
000F90r 2  A9 80                lda     #$80
000F92r 2  85 rr                sta     DATAFLG
000F94r 2  68                   pla
000F95r 2  D0 D0                bne     L32F1
000F97r 2               
000F97r 2               ; ----------------------------------------------------------------------------
000F97r 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
000F97r 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
000F97r 2               ; BELOW STRING AREA DOWN TO STREND.
000F97r 2               ; ----------------------------------------------------------------------------
000F97r 2               GARBAG:
000F97r 2               
000F97r 2               .ifdef CONST_MEMSIZ
000F97r 2                       ldx     #<CONST_MEMSIZ
000F97r 2                       lda     #>CONST_MEMSIZ
000F97r 2               .else
000F97r 2  A6 rr                ldx     MEMSIZ
000F99r 2  A5 rr                lda     MEMSIZ+1
000F9Br 2               .endif
000F9Br 2               FINDHIGHESTSTRING:
000F9Br 2  86 rr                stx     FRETOP
000F9Dr 2  85 rr                sta     FRETOP+1
000F9Fr 2  A0 00                ldy     #$00
000FA1r 2  84 rr                sty     FNCNAM+1
000FA3r 2               .ifdef CONFIG_2
000FA3r 2  84 rr                sty     FNCNAM	; GC bugfix!
000FA5r 2               .endif
000FA5r 2  A5 rr                lda     STREND
000FA7r 2  A6 rr                ldx     STREND+1
000FA9r 2  85 rr                sta     LOWTR
000FABr 2  86 rr                stx     LOWTR+1
000FADr 2  A9 rr                lda     #TEMPST
000FAFr 2  A2 00                ldx     #$00
000FB1r 2  85 rr                sta     INDEX
000FB3r 2  86 rr                stx     INDEX+1
000FB5r 2               L333D:
000FB5r 2  C5 rr                cmp     TEMPPT
000FB7r 2  F0 05                beq     L3346
000FB9r 2  20 rr rr             jsr     CHECK_VARIABLE
000FBCr 2  F0 F7                beq     L333D
000FBEr 2               L3346:
000FBEr 2  A9 06                lda     #BYTES_PER_VARIABLE
000FC0r 2  85 rr                sta     DSCLEN
000FC2r 2  A5 rr                lda     VARTAB
000FC4r 2  A6 rr                ldx     VARTAB+1
000FC6r 2  85 rr                sta     INDEX
000FC8r 2  86 rr                stx     INDEX+1
000FCAr 2               L3352:
000FCAr 2  E4 rr                cpx     ARYTAB+1
000FCCr 2  D0 04                bne     L335A
000FCEr 2  C5 rr                cmp     ARYTAB
000FD0r 2  F0 05                beq     L335F
000FD2r 2               L335A:
000FD2r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
000FD5r 2  F0 F3                beq     L3352
000FD7r 2               L335F:
000FD7r 2  85 rr                sta     HIGHDS
000FD9r 2  86 rr                stx     HIGHDS+1
000FDBr 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
000FDDr 2  85 rr                sta     DSCLEN
000FDFr 2               L3367:
000FDFr 2  A5 rr                lda     HIGHDS
000FE1r 2  A6 rr                ldx     HIGHDS+1
000FE3r 2               L336B:
000FE3r 2  E4 rr                cpx     STREND+1
000FE5r 2  D0 07                bne     L3376
000FE7r 2  C5 rr                cmp     STREND
000FE9r 2  D0 03                bne     L3376
000FEBr 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
000FEEr 2               L3376:
000FEEr 2  85 rr                sta     INDEX
000FF0r 2  86 rr                stx     INDEX+1
000FF2r 2               .ifdef CONFIG_SMALL
000FF2r 2  A0 01                ldy     #$01
000FF4r 2               .else
000FF4r 2                       ldy     #$00
000FF4r 2                       lda     (INDEX),y
000FF4r 2                       tax
000FF4r 2                       iny
000FF4r 2               .endif
000FF4r 2  B1 rr                lda     (INDEX),y
000FF6r 2  08                   php
000FF7r 2  C8                   iny
000FF8r 2  B1 rr                lda     (INDEX),y
000FFAr 2  65 rr                adc     HIGHDS
000FFCr 2  85 rr                sta     HIGHDS
000FFEr 2  C8                   iny
000FFFr 2  B1 rr                lda     (INDEX),y
001001r 2  65 rr                adc     HIGHDS+1
001003r 2  85 rr                sta     HIGHDS+1
001005r 2  28                   plp
001006r 2  10 D7                bpl     L3367
001008r 2               .ifndef CONFIG_SMALL
001008r 2                       txa
001008r 2                       bmi     L3367
001008r 2               .endif
001008r 2  C8                   iny
001009r 2  B1 rr                lda     (INDEX),y
00100Br 2               .ifdef CONFIG_CBM1_PATCHES
00100Br 2                       jsr     LE7F3 ; XXX patch, call into screen editor
00100Br 2               .else
00100Br 2                 .ifdef CONFIG_11
00100Br 2  A0 00                ldy     #$00	; GC bugfix
00100Dr 2                 .endif
00100Dr 2  0A                   asl     a
00100Er 2  69 05                adc     #$05
001010r 2               .endif
001010r 2  65 rr                adc     INDEX
001012r 2  85 rr                sta     INDEX
001014r 2  90 02                bcc     L33A7
001016r 2  E6 rr                inc     INDEX+1
001018r 2               L33A7:
001018r 2  A6 rr                ldx     INDEX+1
00101Ar 2               L33A9:
00101Ar 2  E4 rr                cpx     HIGHDS+1
00101Cr 2  D0 04                bne     L33B1
00101Er 2  C5 rr                cmp     HIGHDS
001020r 2  F0 C1                beq     L336B
001022r 2               L33B1:
001022r 2  20 rr rr             jsr     CHECK_VARIABLE
001025r 2  F0 F3                beq     L33A9
001027r 2               
001027r 2               ; ----------------------------------------------------------------------------
001027r 2               ; PROCESS A SIMPLE VARIABLE
001027r 2               ; ----------------------------------------------------------------------------
001027r 2               CHECK_SIMPLE_VARIABLE:
001027r 2               .ifndef CONFIG_SMALL
001027r 2                       lda     (INDEX),y
001027r 2                       bmi     CHECK_BUMP
001027r 2               .endif
001027r 2  C8                   iny
001028r 2  B1 rr                lda     (INDEX),y
00102Ar 2  10 30                bpl     CHECK_BUMP
00102Cr 2  C8                   iny
00102Dr 2               
00102Dr 2               ; ----------------------------------------------------------------------------
00102Dr 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00102Dr 2               ; ----------------------------------------------------------------------------
00102Dr 2               CHECK_VARIABLE:
00102Dr 2  B1 rr                lda     (INDEX),y
00102Fr 2  F0 2B                beq     CHECK_BUMP
001031r 2  C8                   iny
001032r 2  B1 rr                lda     (INDEX),y
001034r 2  AA                   tax
001035r 2  C8                   iny
001036r 2  B1 rr                lda     (INDEX),y
001038r 2  C5 rr                cmp     FRETOP+1
00103Ar 2  90 06                bcc     L33D5
00103Cr 2  D0 1E                bne     CHECK_BUMP
00103Er 2  E4 rr                cpx     FRETOP
001040r 2  B0 1A                bcs     CHECK_BUMP
001042r 2               L33D5:
001042r 2  C5 rr                cmp     LOWTR+1
001044r 2  90 16                bcc     CHECK_BUMP
001046r 2  D0 04                bne     L33DF
001048r 2  E4 rr                cpx     LOWTR
00104Ar 2  90 10                bcc     CHECK_BUMP
00104Cr 2               L33DF:
00104Cr 2  86 rr                stx     LOWTR
00104Er 2  85 rr                sta     LOWTR+1
001050r 2  A5 rr                lda     INDEX
001052r 2  A6 rr                ldx     INDEX+1
001054r 2  85 rr                sta     FNCNAM
001056r 2  86 rr                stx     FNCNAM+1
001058r 2  A5 rr                lda     DSCLEN
00105Ar 2  85 rr                sta     Z52
00105Cr 2               
00105Cr 2               ; ----------------------------------------------------------------------------
00105Cr 2               ; ADD (DSCLEN) TO PNTR IN INDEX
00105Cr 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00105Cr 2               ; ----------------------------------------------------------------------------
00105Cr 2               CHECK_BUMP:
00105Cr 2  A5 rr                lda     DSCLEN
00105Er 2  18                   clc
00105Fr 2  65 rr                adc     INDEX
001061r 2  85 rr                sta     INDEX
001063r 2  90 02                bcc     L33FA
001065r 2  E6 rr                inc     INDEX+1
001067r 2               L33FA:
001067r 2  A6 rr                ldx     INDEX+1
001069r 2  A0 00                ldy     #$00
00106Br 2  60                   rts
00106Cr 2               
00106Cr 2               ; ----------------------------------------------------------------------------
00106Cr 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00106Cr 2               ; TO TOP AND GO BACK FOR ANOTHER
00106Cr 2               ; ----------------------------------------------------------------------------
00106Cr 2               MOVE_HIGHEST_STRING_TO_TOP:
00106Cr 2               .ifdef CONFIG_2
00106Cr 2  A5 rr                lda     FNCNAM+1	; GC bugfix
00106Er 2  05 rr                ora     FNCNAM
001070r 2               .else
001070r 2                       ldx     FNCNAM+1
001070r 2               .endif
001070r 2  F0 F5                beq     L33FA
001072r 2  A5 rr                lda     Z52
001074r 2               .ifndef CONFIG_10A
001074r 2                       sbc     #$03
001074r 2               .else
001074r 2  29 04                and     #$04
001076r 2               .endif
001076r 2  4A                   lsr     a
001077r 2  A8                   tay
001078r 2  85 rr                sta     Z52
00107Ar 2  B1 rr                lda     (FNCNAM),y
00107Cr 2  65 rr                adc     LOWTR
00107Er 2  85 rr                sta     HIGHTR
001080r 2  A5 rr                lda     LOWTR+1
001082r 2  69 00                adc     #$00
001084r 2  85 rr                sta     HIGHTR+1
001086r 2  A5 rr                lda     FRETOP
001088r 2  A6 rr                ldx     FRETOP+1
00108Ar 2  85 rr                sta     HIGHDS
00108Cr 2  86 rr                stx     HIGHDS+1
00108Er 2  20 rr rr             jsr     BLTU2
001091r 2  A4 rr                ldy     Z52
001093r 2  C8                   iny
001094r 2  A5 rr                lda     HIGHDS
001096r 2  91 rr                sta     (FNCNAM),y
001098r 2  AA                   tax
001099r 2  E6 rr                inc     HIGHDS+1
00109Br 2  A5 rr                lda     HIGHDS+1
00109Dr 2  C8                   iny
00109Er 2  91 rr                sta     (FNCNAM),y
0010A0r 2  4C rr rr             jmp     FINDHIGHESTSTRING
0010A3r 2               
0010A3r 2               ; ----------------------------------------------------------------------------
0010A3r 2               ; CONCATENATE TWO STRINGS
0010A3r 2               ; ----------------------------------------------------------------------------
0010A3r 2               CAT:
0010A3r 2  A5 rr                lda     FAC_LAST
0010A5r 2  48                   pha
0010A6r 2  A5 rr                lda     FAC_LAST-1
0010A8r 2  48                   pha
0010A9r 2  20 rr rr             jsr     FRM_ELEMENT
0010ACr 2  20 rr rr             jsr     CHKSTR
0010AFr 2  68                   pla
0010B0r 2  85 rr                sta     STRNG1
0010B2r 2  68                   pla
0010B3r 2  85 rr                sta     STRNG1+1
0010B5r 2  A0 00                ldy     #$00
0010B7r 2  B1 rr                lda     (STRNG1),y
0010B9r 2  18                   clc
0010BAr 2  71 rr                adc     (FAC_LAST-1),y
0010BCr 2  90 05                bcc     L3454
0010BEr 2  A2 1A                ldx     #ERR_STRLONG
0010C0r 2  4C rr rr             jmp     ERROR
0010C3r 2               L3454:
0010C3r 2  20 rr rr             jsr     STRINI
0010C6r 2  20 rr rr             jsr     MOVINS
0010C9r 2  A5 rr                lda     DSCPTR
0010CBr 2  A4 rr                ldy     DSCPTR+1
0010CDr 2  20 rr rr             jsr     FRETMP
0010D0r 2  20 rr rr             jsr     MOVSTR1
0010D3r 2  A5 rr                lda     STRNG1
0010D5r 2  A4 rr                ldy     STRNG1+1
0010D7r 2  20 rr rr             jsr     FRETMP
0010DAr 2  20 rr rr             jsr     PUTNEW
0010DDr 2  4C rr rr             jmp     FRMEVL2
0010E0r 2               
0010E0r 2               ; ----------------------------------------------------------------------------
0010E0r 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
0010E0r 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
0010E0r 2               ; ----------------------------------------------------------------------------
0010E0r 2               MOVINS:
0010E0r 2  A0 00                ldy     #$00
0010E2r 2  B1 rr                lda     (STRNG1),y
0010E4r 2  48                   pha
0010E5r 2  C8                   iny
0010E6r 2  B1 rr                lda     (STRNG1),y
0010E8r 2  AA                   tax
0010E9r 2  C8                   iny
0010EAr 2  B1 rr                lda     (STRNG1),y
0010ECr 2  A8                   tay
0010EDr 2  68                   pla
0010EEr 2               
0010EEr 2               ; ----------------------------------------------------------------------------
0010EEr 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
0010EEr 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
0010EEr 2               ; ----------------------------------------------------------------------------
0010EEr 2               MOVSTR:
0010EEr 2  86 rr                stx     INDEX
0010F0r 2  84 rr                sty     INDEX+1
0010F2r 2               MOVSTR1:
0010F2r 2  A8                   tay
0010F3r 2  F0 0A                beq     L3490
0010F5r 2  48                   pha
0010F6r 2               L3487:
0010F6r 2  88                   dey
0010F7r 2  B1 rr                lda     (INDEX),y
0010F9r 2  91 rr                sta     (FRESPC),y
0010FBr 2  98                   tya
0010FCr 2  D0 F8                bne     L3487
0010FEr 2  68                   pla
0010FFr 2               L3490:
0010FFr 2  18                   clc
001100r 2  65 rr                adc     FRESPC
001102r 2  85 rr                sta     FRESPC
001104r 2  90 02                bcc     L3499
001106r 2  E6 rr                inc     FRESPC+1
001108r 2               L3499:
001108r 2  60                   rts
001109r 2               
001109r 2               ; ----------------------------------------------------------------------------
001109r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
001109r 2               ; ----------------------------------------------------------------------------
001109r 2               FRESTR:
001109r 2  20 rr rr             jsr     CHKSTR
00110Cr 2               
00110Cr 2               ; ----------------------------------------------------------------------------
00110Cr 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00110Cr 2               ; A TEMPORARY STRING, RELEASE IT.
00110Cr 2               ; ----------------------------------------------------------------------------
00110Cr 2               FREFAC:
00110Cr 2  A5 rr                lda     FAC_LAST-1
00110Er 2  A4 rr                ldy     FAC_LAST
001110r 2               
001110r 2               ; ----------------------------------------------------------------------------
001110r 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
001110r 2               ; A TEMPORARY STRING, RELEASE IT.
001110r 2               ; ----------------------------------------------------------------------------
001110r 2               FRETMP:
001110r 2  85 rr                sta     INDEX
001112r 2  84 rr                sty     INDEX+1
001114r 2  20 rr rr             jsr     FRETMS
001117r 2  08                   php
001118r 2  A0 00                ldy     #$00
00111Ar 2  B1 rr                lda     (INDEX),y
00111Cr 2  48                   pha
00111Dr 2  C8                   iny
00111Er 2  B1 rr                lda     (INDEX),y
001120r 2  AA                   tax
001121r 2  C8                   iny
001122r 2  B1 rr                lda     (INDEX),y
001124r 2  A8                   tay
001125r 2  68                   pla
001126r 2  28                   plp
001127r 2  D0 13                bne     L34CD
001129r 2  C4 rr                cpy     FRETOP+1
00112Br 2  D0 0F                bne     L34CD
00112Dr 2  E4 rr                cpx     FRETOP
00112Fr 2  D0 0B                bne     L34CD
001131r 2  48                   pha
001132r 2  18                   clc
001133r 2  65 rr                adc     FRETOP
001135r 2  85 rr                sta     FRETOP
001137r 2  90 02                bcc     L34CC
001139r 2  E6 rr                inc     FRETOP+1
00113Br 2               L34CC:
00113Br 2  68                   pla
00113Cr 2               L34CD:
00113Cr 2  86 rr                stx     INDEX
00113Er 2  84 rr                sty     INDEX+1
001140r 2  60                   rts
001141r 2               
001141r 2               ; ----------------------------------------------------------------------------
001141r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001141r 2               ; ----------------------------------------------------------------------------
001141r 2               FRETMS:
001141r 2               .ifdef KBD
001141r 2                       cpy     #$00
001141r 2               .else
001141r 2  C4 rr                cpy     LASTPT+1
001143r 2               .endif
001143r 2  D0 0C                bne     L34E2
001145r 2  C5 rr                cmp     LASTPT
001147r 2  D0 08                bne     L34E2
001149r 2  85 rr                sta     TEMPPT
00114Br 2  E9 03                sbc     #$03
00114Dr 2  85 rr                sta     LASTPT
00114Fr 2  A0 00                ldy     #$00
001151r 2               L34E2:
001151r 2  60                   rts
001152r 2               
001152r 2               ; ----------------------------------------------------------------------------
001152r 2               ; "CHR$" FUNCTION
001152r 2               ; ----------------------------------------------------------------------------
001152r 2               CHRSTR:
001152r 2  20 rr rr             jsr     CONINT
001155r 2  8A                   txa
001156r 2  48                   pha
001157r 2  A9 01                lda     #$01
001159r 2  20 rr rr             jsr     STRSPA
00115Cr 2  68                   pla
00115Dr 2  A0 00                ldy     #$00
00115Fr 2  91 rr                sta     (FAC+1),y
001161r 2  68                   pla
001162r 2  68                   pla
001163r 2  4C rr rr             jmp     PUTNEW
001166r 2               
001166r 2               ; ----------------------------------------------------------------------------
001166r 2               ; "LEFT$" FUNCTION
001166r 2               ; ----------------------------------------------------------------------------
001166r 2               LEFTSTR:
001166r 2  20 rr rr             jsr     SUBSTRING_SETUP
001169r 2  D1 rr                cmp     (DSCPTR),y
00116Br 2  98                   tya
00116Cr 2               SUBSTRING1:
00116Cr 2  90 04                bcc     L3503
00116Er 2  B1 rr                lda     (DSCPTR),y
001170r 2  AA                   tax
001171r 2  98                   tya
001172r 2               L3503:
001172r 2  48                   pha
001173r 2               SUBSTRING2:
001173r 2  8A                   txa
001174r 2               SUBSTRING3:
001174r 2  48                   pha
001175r 2  20 rr rr             jsr     STRSPA
001178r 2  A5 rr                lda     DSCPTR
00117Ar 2  A4 rr                ldy     DSCPTR+1
00117Cr 2  20 rr rr             jsr     FRETMP
00117Fr 2  68                   pla
001180r 2  A8                   tay
001181r 2  68                   pla
001182r 2  18                   clc
001183r 2  65 rr                adc     INDEX
001185r 2  85 rr                sta     INDEX
001187r 2  90 02                bcc     L351C
001189r 2  E6 rr                inc     INDEX+1
00118Br 2               L351C:
00118Br 2  98                   tya
00118Cr 2  20 rr rr             jsr     MOVSTR1
00118Fr 2  4C rr rr             jmp     PUTNEW
001192r 2               
001192r 2               ; ----------------------------------------------------------------------------
001192r 2               ; "RIGHT$" FUNCTION
001192r 2               ; ----------------------------------------------------------------------------
001192r 2               RIGHTSTR:
001192r 2  20 rr rr             jsr     SUBSTRING_SETUP
001195r 2  18                   clc
001196r 2  F1 rr                sbc     (DSCPTR),y
001198r 2  49 FF                eor     #$FF
00119Ar 2  4C rr rr             jmp     SUBSTRING1
00119Dr 2               
00119Dr 2               ; ----------------------------------------------------------------------------
00119Dr 2               ; "MID$" FUNCTION
00119Dr 2               ; ----------------------------------------------------------------------------
00119Dr 2               MIDSTR:
00119Dr 2  A9 FF                lda     #$FF
00119Fr 2  85 rr                sta     FAC_LAST
0011A1r 2  20 rr rr             jsr     CHRGOT
0011A4r 2  C9 29                cmp     #$29
0011A6r 2  F0 06                beq     L353F
0011A8r 2  20 rr rr             jsr     CHKCOM
0011ABr 2  20 rr rr             jsr     GETBYT
0011AEr 2               L353F:
0011AEr 2  20 rr rr             jsr     SUBSTRING_SETUP
0011B1r 2               .ifdef CONFIG_2
0011B1r 2  F0 4B                beq     GOIQ
0011B3r 2               .endif
0011B3r 2  CA                   dex
0011B4r 2  8A                   txa
0011B5r 2  48                   pha
0011B6r 2  18                   clc
0011B7r 2  A2 00                ldx     #$00
0011B9r 2  F1 rr                sbc     (DSCPTR),y
0011BBr 2  B0 B6                bcs     SUBSTRING2
0011BDr 2  49 FF                eor     #$FF
0011BFr 2  C5 rr                cmp     FAC_LAST
0011C1r 2  90 B1                bcc     SUBSTRING3
0011C3r 2  A5 rr                lda     FAC_LAST
0011C5r 2  B0 AD                bcs     SUBSTRING3
0011C7r 2               
0011C7r 2               ; ----------------------------------------------------------------------------
0011C7r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
0011C7r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
0011C7r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
0011C7r 2               ; ----------------------------------------------------------------------------
0011C7r 2               SUBSTRING_SETUP:
0011C7r 2  20 rr rr             jsr     CHKCLS
0011CAr 2  68                   pla
0011CBr 2               .ifndef CONFIG_11
0011CBr 2                       sta     JMPADRS+1
0011CBr 2                       pla
0011CBr 2                       sta     JMPADRS+2
0011CBr 2               .else
0011CBr 2  A8                   tay
0011CCr 2  68                   pla
0011CDr 2  85 rr                sta     Z52
0011CFr 2               .endif
0011CFr 2  68                   pla
0011D0r 2  68                   pla
0011D1r 2  68                   pla
0011D2r 2  AA                   tax
0011D3r 2  68                   pla
0011D4r 2  85 rr                sta     DSCPTR
0011D6r 2  68                   pla
0011D7r 2  85 rr                sta     DSCPTR+1
0011D9r 2               .ifdef CONFIG_11
0011D9r 2  A5 rr                lda     Z52
0011DBr 2  48                   pha
0011DCr 2  98                   tya
0011DDr 2  48                   pha
0011DEr 2               .endif
0011DEr 2  A0 00                ldy     #$00
0011E0r 2  8A                   txa
0011E1r 2               .ifndef CONFIG_2
0011E1r 2                       beq     GOIQ
0011E1r 2               .endif
0011E1r 2               .ifndef CONFIG_11
0011E1r 2                       inc     JMPADRS+1
0011E1r 2                       jmp     (JMPADRS+1)
0011E1r 2               .else
0011E1r 2  60                   rts
0011E2r 2               .endif
0011E2r 2               
0011E2r 2               ; ----------------------------------------------------------------------------
0011E2r 2               ; "LEN" FUNCTION
0011E2r 2               ; ----------------------------------------------------------------------------
0011E2r 2               LEN:
0011E2r 2  20 rr rr             jsr     GETSTR
0011E5r 2               SNGFLT1:
0011E5r 2  4C rr rr             jmp     SNGFLT
0011E8r 2               
0011E8r 2               ; ----------------------------------------------------------------------------
0011E8r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
0011E8r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
0011E8r 2               ; ----------------------------------------------------------------------------
0011E8r 2               GETSTR:
0011E8r 2  20 rr rr             jsr     FRESTR
0011EBr 2  A2 00                ldx     #$00
0011EDr 2  86 rr                stx     VALTYP
0011EFr 2  A8                   tay
0011F0r 2  60                   rts
0011F1r 2               
0011F1r 2               ; ----------------------------------------------------------------------------
0011F1r 2               ; "ASC" FUNCTION
0011F1r 2               ; ----------------------------------------------------------------------------
0011F1r 2               ASC:
0011F1r 2  20 rr rr             jsr     GETSTR
0011F4r 2  F0 08                beq     GOIQ
0011F6r 2  A0 00                ldy     #$00
0011F8r 2  B1 rr                lda     (INDEX),y
0011FAr 2  A8                   tay
0011FBr 2               .ifndef CONFIG_11A
0011FBr 2                       jmp     SNGFLT1
0011FBr 2               .else
0011FBr 2  4C rr rr             jmp     SNGFLT
0011FEr 2               .endif
0011FEr 2               ; ----------------------------------------------------------------------------
0011FEr 2               GOIQ:
0011FEr 2  4C rr rr             jmp     IQERR
001201r 2               
001201r 2               ; ----------------------------------------------------------------------------
001201r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
001201r 2               ; TO SINGLE BYTE IN X-REG
001201r 2               ; ----------------------------------------------------------------------------
001201r 2               GTBYTC:
001201r 2  20 rr rr             jsr     CHRGET
001204r 2               
001204r 2               ; ----------------------------------------------------------------------------
001204r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
001204r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
001204r 2               ; ----------------------------------------------------------------------------
001204r 2               GETBYT:
001204r 2  20 rr rr             jsr     FRMNUM
001207r 2               
001207r 2               ; ----------------------------------------------------------------------------
001207r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
001207r 2               ; ----------------------------------------------------------------------------
001207r 2               CONINT:
001207r 2  20 rr rr             jsr     MKINT
00120Ar 2  A6 rr                ldx     FAC_LAST-1
00120Cr 2  D0 F0                bne     GOIQ
00120Er 2  A6 rr                ldx     FAC_LAST
001210r 2  4C rr rr             jmp     CHRGOT
001213r 2               
001213r 2               ; ----------------------------------------------------------------------------
001213r 2               ; "VAL" FUNCTION
001213r 2               ; ----------------------------------------------------------------------------
001213r 2               VAL:
001213r 2  20 rr rr             jsr     GETSTR
001216r 2  D0 03                bne     L35AC
001218r 2  4C rr rr             jmp     ZERO_FAC
00121Br 2               L35AC:
00121Br 2  A6 rr                ldx     TXTPTR
00121Dr 2  A4 rr                ldy     TXTPTR+1
00121Fr 2  86 rr                stx     STRNG2
001221r 2  84 rr                sty     STRNG2+1
001223r 2  A6 rr                ldx     INDEX
001225r 2  86 rr                stx     TXTPTR
001227r 2  18                   clc
001228r 2  65 rr                adc     INDEX
00122Ar 2  85 rr                sta     DEST
00122Cr 2  A6 rr                ldx     INDEX+1
00122Er 2  86 rr                stx     TXTPTR+1
001230r 2  90 01                bcc     L35C4
001232r 2  E8                   inx
001233r 2               L35C4:
001233r 2  86 rr                stx     DEST+1
001235r 2  A0 00                ldy     #$00
001237r 2  B1 rr                lda     (DEST),y
001239r 2  48                   pha
00123Ar 2  A9 00                lda     #$00
00123Cr 2  91 rr                sta     (DEST),y
00123Er 2  20 rr rr             jsr     CHRGOT
001241r 2  20 rr rr             jsr     FIN
001244r 2  68                   pla
001245r 2  A0 00                ldy     #$00
001247r 2  91 rr                sta     (DEST),y
001249r 2               
001249r 2               ; ----------------------------------------------------------------------------
001249r 2               ; COPY STRNG2 INTO TXTPTR
001249r 2               ; ----------------------------------------------------------------------------
001249r 2               POINT:
001249r 2  A6 rr                ldx     STRNG2
00124Br 2  A4 rr                ldy     STRNG2+1
00124Dr 2  86 rr                stx     TXTPTR
00124Fr 2  84 rr                sty     TXTPTR+1
001251r 2  60                   rts
001252r 2               
001252r 2               
001252r 1               .include "misc3.s"
001252r 2               ; KBD specific patches
001252r 2               
001252r 2               .segment "CODE"
001252r 2               
001252r 2               .ifdef KBD
001252r 2               VARTAB_MINUS_2_TO_AY:
001252r 2                       lda     VARTAB
001252r 2                       sec
001252r 2                       sbc     #$02
001252r 2                       ldy     VARTAB+1
001252r 2                       bcs     LF42C
001252r 2                       dey
001252r 2               LF42C:
001252r 2                       rts
001252r 2               
001252r 2               ; ----------------------------------------------------------------------------
001252r 2               GET_UPPER:
001252r 2                       lda     INPUTBUFFERX,x
001252r 2               LF430:
001252r 2                       cmp     #'a'
001252r 2                       bcc     LF43A
001252r 2                       cmp     #'z'+1
001252r 2                       bcs     LF43A
001252r 2               LF438:
001252r 2                       sbc     #$1F
001252r 2               LF43A:
001252r 2                       rts
001252r 2               
001252r 2               ; ----------------------------------------------------------------------------
001252r 2               GETLN:
001252r 2                       ldx     #$5D
001252r 2               LF43D:
001252r 2                       txa
001252r 2                       and     #$7F
001252r 2                       cmp     $0340
001252r 2                       beq     LF44D
001252r 2                       sta     $0340
001252r 2                       lda     #$03
001252r 2                       jsr     LDE48
001252r 2               LF44D:
001252r 2                       jsr     LDE7F
001252r 2                       bne     RTS4
001252r 2                       cpx     #$80
001252r 2                       bcc     LF44D
001252r 2               RTS4:
001252r 2                       rts
001252r 2               
001252r 2               ; ----------------------------------------------------------------------------
001252r 2               LF457:
001252r 2                       lda     TXTTAB
001252r 2                       ldx     TXTTAB+1
001252r 2               LF45B:
001252r 2                       sta     JMPADRS+1
001252r 2                       stx     JMPADRS+2
001252r 2                       ldy     #$01
001252r 2                       lda     (JMPADRS+1),y
001252r 2                       beq     LF438
001252r 2                       iny
001252r 2                       iny
001252r 2                       lda     (JMPADRS+1),y
001252r 2                       dey
001252r 2                       cmp     LINNUM+1
001252r 2                       bne     LF472
001252r 2                       lda     (JMPADRS+1),y
001252r 2                       cmp     LINNUM
001252r 2               LF472:
001252r 2                       bcs     LF43A
001252r 2                       dey
001252r 2                       lda     (JMPADRS+1),y
001252r 2                       tax
001252r 2                       dey
001252r 2                       lda     (JMPADRS+1),y
001252r 2                       bcc     LF45B
001252r 2               LF47D:
001252r 2                       jmp     (JMPADRS+1)
001252r 2               .endif
001252r 2               
001252r 1               .include "poke.s"
001252r 2               .segment "CODE"
001252r 2               
001252r 2               .ifndef CONFIG_NO_POKE
001252r 2               ; ----------------------------------------------------------------------------
001252r 2               ; EVALUATE "EXP1,EXP2"
001252r 2               ;
001252r 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
001252r 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
001252r 2               ; ----------------------------------------------------------------------------
001252r 2               GTNUM:
001252r 2  20 rr rr             jsr     FRMNUM
001255r 2  20 rr rr             jsr     GETADR
001258r 2               
001258r 2               ; ----------------------------------------------------------------------------
001258r 2               ; EVALUATE ",EXPRESSION"
001258r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001258r 2               ; ----------------------------------------------------------------------------
001258r 2               COMBYTE:
001258r 2  20 rr rr             jsr     CHKCOM
00125Br 2  4C rr rr             jmp     GETBYT
00125Er 2               
00125Er 2               ; ----------------------------------------------------------------------------
00125Er 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00125Er 2               ; ----------------------------------------------------------------------------
00125Er 2               GETADR:
00125Er 2  A5 rr                lda     FACSIGN
001260r 2                 .ifdef APPLE
001260r 2                       nop ; PATCH
001260r 2                       nop
001260r 2                 .else
001260r 2  30 9C                bmi     GOIQ
001262r 2                 .endif
001262r 2  A5 rr                lda     FAC
001264r 2  C9 91                cmp     #$91
001266r 2  B0 96                bcs     GOIQ
001268r 2  20 rr rr             jsr     QINT
00126Br 2  A5 rr                lda     FAC_LAST-1
00126Dr 2  A4 rr                ldy     FAC_LAST
00126Fr 2  84 rr                sty     LINNUM
001271r 2  85 rr                sta     LINNUM+1
001273r 2  60                   rts
001274r 2               
001274r 2               ; ----------------------------------------------------------------------------
001274r 2               ; "PEEK" FUNCTION
001274r 2               ; ----------------------------------------------------------------------------
001274r 2               PEEK:
001274r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001274r 2                       lda     LINNUM+1
001274r 2                       pha
001274r 2                       lda     LINNUM
001274r 2                       pha
001274r 2               .endif
001274r 2  20 rr rr             jsr     GETADR
001277r 2  A0 00                ldy     #$00
001279r 2               .ifdef CBM1
001279r 2               ; disallow PEEK between $C000 and $DFFF
001279r 2                       cmp     #$C0
001279r 2                       bcc     LD6F3
001279r 2                       cmp     #$E1
001279r 2                       bcc     LD6F6
001279r 2               LD6F3:
001279r 2               .endif
001279r 2               .ifdef CBM2
001279r 2               		nop ; patch that disables the compares above
001279r 2               		nop
001279r 2               		nop
001279r 2               		nop
001279r 2               		nop
001279r 2               		nop
001279r 2               		nop
001279r 2               		nop
001279r 2               .endif
001279r 2  B1 rr                lda     (LINNUM),y
00127Br 2  A8                   tay
00127Cr 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
00127Cr 2                       pla
00127Cr 2                       sta     LINNUM
00127Cr 2                       pla
00127Cr 2                       sta     LINNUM+1
00127Cr 2               .endif
00127Cr 2               LD6F6:
00127Cr 2  4C rr rr             jmp     SNGFLT
00127Fr 2               
00127Fr 2               ; ----------------------------------------------------------------------------
00127Fr 2               ; "POKE" STATEMENT
00127Fr 2               ; ----------------------------------------------------------------------------
00127Fr 2               POKE:
00127Fr 2  20 rr rr             jsr     GTNUM
001282r 2  8A                   txa
001283r 2  A0 00                ldy     #$00
001285r 2  91 rr                sta     (LINNUM),y
001287r 2  60                   rts
001288r 2               
001288r 2               ; ----------------------------------------------------------------------------
001288r 2               ; "WAIT" STATEMENT
001288r 2               ; ----------------------------------------------------------------------------
001288r 2               WAIT:
001288r 2  20 rr rr             jsr     GTNUM
00128Br 2  86 rr                stx     FORPNT
00128Dr 2  A2 00                ldx     #$00
00128Fr 2  20 rr rr             jsr     CHRGOT
001292r 2               .ifdef CONFIG_EASTER_EGG
001292r 2                       beq     EASTER_EGG
001292r 2               .else
001292r 2  F0 03                beq     L3628
001294r 2               .endif
001294r 2  20 rr rr             jsr     COMBYTE
001297r 2               L3628:
001297r 2  86 rr                stx     FORPNT+1
001299r 2  A0 00                ldy     #$00
00129Br 2               L362C:
00129Br 2  B1 rr                lda     (LINNUM),y
00129Dr 2  45 rr                eor     FORPNT+1
00129Fr 2  25 rr                and     FORPNT
0012A1r 2  F0 F8                beq     L362C
0012A3r 2               RTS3:
0012A3r 2  60                   rts
0012A4r 2               .endif
0012A4r 2               
0012A4r 1               .include "float.s"
0012A4r 2               .segment "CODE"
0012A4r 2               
0012A4r 2               TEMP1X = TEMP1+(5-BYTES_FP)
0012A4r 2               
0012A4r 2               ; ----------------------------------------------------------------------------
0012A4r 2               ; ADD 0.5 TO FAC
0012A4r 2               ; ----------------------------------------------------------------------------
0012A4r 2               FADDH:
0012A4r 2  A9 rr                lda     #<CON_HALF
0012A6r 2  A0 rr                ldy     #>CON_HALF
0012A8r 2  4C rr rr             jmp     FADD
0012ABr 2               
0012ABr 2               ; ----------------------------------------------------------------------------
0012ABr 2               ; FAC = (Y,A) - FAC
0012ABr 2               ; ----------------------------------------------------------------------------
0012ABr 2               FSUB:
0012ABr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0012AEr 2               
0012AEr 2               ; ----------------------------------------------------------------------------
0012AEr 2               ; FAC = ARG - FAC
0012AEr 2               ; ----------------------------------------------------------------------------
0012AEr 2               FSUBT:
0012AEr 2  A5 rr                lda     FACSIGN
0012B0r 2  49 FF                eor     #$FF
0012B2r 2  85 rr                sta     FACSIGN
0012B4r 2  45 rr                eor     ARGSIGN
0012B6r 2  85 rr                sta     SGNCPR
0012B8r 2  A5 rr                lda     FAC
0012BAr 2  4C rr rr             jmp     FADDT
0012BDr 2               
0012BDr 2               ; ----------------------------------------------------------------------------
0012BDr 2               ; Commodore BASIC V2 Easter Egg
0012BDr 2               ; ----------------------------------------------------------------------------
0012BDr 2               .ifdef CONFIG_EASTER_EGG
0012BDr 2               EASTER_EGG:
0012BDr 2                       lda     LINNUM
0012BDr 2                       cmp     #<6502
0012BDr 2                       bne     L3628
0012BDr 2                       lda     LINNUM+1
0012BDr 2                       sbc     #>6502
0012BDr 2                       bne     L3628
0012BDr 2                       sta     LINNUM
0012BDr 2                       tay
0012BDr 2                       lda     #$80
0012BDr 2                       sta     LINNUM+1
0012BDr 2               LD758:
0012BDr 2                       ldx     #$0A
0012BDr 2               LD75A:
0012BDr 2                       lda     MICROSOFT-1,x
0012BDr 2                       and     #$3F
0012BDr 2                       sta     (LINNUM),y
0012BDr 2                       iny
0012BDr 2                       bne     LD766
0012BDr 2                       inc     LINNUM+1
0012BDr 2               LD766:
0012BDr 2                       dex
0012BDr 2                       bne     LD75A
0012BDr 2                       dec     FORPNT
0012BDr 2                       bne     LD758
0012BDr 2                       rts
0012BDr 2               .endif
0012BDr 2               
0012BDr 2               ; ----------------------------------------------------------------------------
0012BDr 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
0012BDr 2               ; ----------------------------------------------------------------------------
0012BDr 2               FADD1:
0012BDr 2  20 rr rr             jsr     SHIFT_RIGHT
0012C0r 2  90 3C                bcc     FADD3
0012C2r 2               
0012C2r 2               ; ----------------------------------------------------------------------------
0012C2r 2               ; FAC = (Y,A) + FAC
0012C2r 2               ; ----------------------------------------------------------------------------
0012C2r 2               FADD:
0012C2r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0012C5r 2               
0012C5r 2               ; ----------------------------------------------------------------------------
0012C5r 2               ; FAC = ARG + FAC
0012C5r 2               ; ----------------------------------------------------------------------------
0012C5r 2               FADDT:
0012C5r 2  D0 03                bne     L365B
0012C7r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
0012CAr 2               L365B:
0012CAr 2  A6 rr                ldx     FACEXTENSION
0012CCr 2  86 rr                stx     ARGEXTENSION
0012CEr 2  A2 rr                ldx     #ARG
0012D0r 2  A5 rr                lda     ARG
0012D2r 2               FADD2:
0012D2r 2  A8                   tay
0012D3r 2               .ifdef KBD
0012D3r 2                       beq     RTS4
0012D3r 2               .else
0012D3r 2  F0 CE                beq     RTS3
0012D5r 2               .endif
0012D5r 2  38                   sec
0012D6r 2  E5 rr                sbc     FAC
0012D8r 2  F0 24                beq     FADD3
0012DAr 2  90 12                bcc     L367F
0012DCr 2  84 rr                sty     FAC
0012DEr 2  A4 rr                ldy     ARGSIGN
0012E0r 2  84 rr                sty     FACSIGN
0012E2r 2  49 FF                eor     #$FF
0012E4r 2  69 00                adc     #$00
0012E6r 2  A0 00                ldy     #$00
0012E8r 2  84 rr                sty     ARGEXTENSION
0012EAr 2  A2 rr                ldx     #FAC
0012ECr 2  D0 04                bne     L3683
0012EEr 2               L367F:
0012EEr 2  A0 00                ldy     #$00
0012F0r 2  84 rr                sty     FACEXTENSION
0012F2r 2               L3683:
0012F2r 2  C9 F9                cmp     #$F9
0012F4r 2  30 C7                bmi     FADD1
0012F6r 2  A8                   tay
0012F7r 2  A5 rr                lda     FACEXTENSION
0012F9r 2  56 01                lsr     1,x
0012FBr 2  20 rr rr             jsr     SHIFT_RIGHT4
0012FEr 2               FADD3:
0012FEr 2  24 rr                bit     SGNCPR
001300r 2  10 4C                bpl     FADD4
001302r 2  A0 rr                ldy     #FAC
001304r 2  E0 rr                cpx     #ARG
001306r 2  F0 02                beq     L369B
001308r 2  A0 rr                ldy     #ARG
00130Ar 2               L369B:
00130Ar 2  38                   sec
00130Br 2  49 FF                eor     #$FF
00130Dr 2  65 rr                adc     ARGEXTENSION
00130Fr 2  85 rr                sta     FACEXTENSION
001311r 2               .ifndef CONFIG_SMALL
001311r 2                       lda     4,y
001311r 2                       sbc     4,x
001311r 2                       sta     FAC+4
001311r 2               .endif
001311r 2  B9 03 00             lda     3,y
001314r 2  F5 03                sbc     3,x
001316r 2  85 rr                sta     FAC+3
001318r 2  B9 02 00             lda     2,y
00131Br 2  F5 02                sbc     2,x
00131Dr 2  85 rr                sta     FAC+2
00131Fr 2  B9 01 00             lda     1,y
001322r 2  F5 01                sbc     1,x
001324r 2  85 rr                sta     FAC+1
001326r 2               
001326r 2               ; ----------------------------------------------------------------------------
001326r 2               ; NORMALIZE VALUE IN FAC
001326r 2               ; ----------------------------------------------------------------------------
001326r 2               NORMALIZE_FAC1:
001326r 2  B0 03                bcs     NORMALIZE_FAC2
001328r 2  20 rr rr             jsr     COMPLEMENT_FAC
00132Br 2               NORMALIZE_FAC2:
00132Br 2  A0 00                ldy     #$00
00132Dr 2  98                   tya
00132Er 2  18                   clc
00132Fr 2               L36C7:
00132Fr 2  A6 rr                ldx     FAC+1
001331r 2  D0 3E                bne     NORMALIZE_FAC4
001333r 2  A6 rr                ldx     FAC+2
001335r 2  86 rr                stx     FAC+1
001337r 2  A6 rr                ldx     FAC+3
001339r 2  86 rr                stx     FAC+2
00133Br 2               .ifdef CONFIG_SMALL
00133Br 2  A6 rr                ldx     FACEXTENSION
00133Dr 2  86 rr                stx     FAC+3
00133Fr 2               .else
00133Fr 2                       ldx     FAC+4
00133Fr 2                       stx     FAC+3
00133Fr 2                       ldx     FACEXTENSION
00133Fr 2                       stx     FAC+4
00133Fr 2               .endif
00133Fr 2  84 rr                sty     FACEXTENSION
001341r 2  69 08                adc     #$08
001343r 2               .ifdef CONFIG_2B
001343r 2               ; bugfix?
001343r 2               ; fix does not exist on AppleSoft 2
001343r 2  C9 20                cmp     #(MANTISSA_BYTES+1)*8
001345r 2               .else
001345r 2                       cmp     #MANTISSA_BYTES*8
001345r 2               .endif
001345r 2  D0 E8                bne     L36C7
001347r 2               
001347r 2               ; ----------------------------------------------------------------------------
001347r 2               ; SET FAC = 0
001347r 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
001347r 2               ; ----------------------------------------------------------------------------
001347r 2               ZERO_FAC:
001347r 2  A9 00                lda     #$00
001349r 2               STA_IN_FAC_SIGN_AND_EXP:
001349r 2  85 rr                sta     FAC
00134Br 2               STA_IN_FAC_SIGN:
00134Br 2  85 rr                sta     FACSIGN
00134Dr 2  60                   rts
00134Er 2               
00134Er 2               ; ----------------------------------------------------------------------------
00134Er 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
00134Er 2               ; ----------------------------------------------------------------------------
00134Er 2               FADD4:
00134Er 2  65 rr                adc     ARGEXTENSION
001350r 2  85 rr                sta     FACEXTENSION
001352r 2               .ifndef CONFIG_SMALL
001352r 2                       lda     FAC+4
001352r 2                       adc     ARG+4
001352r 2                       sta     FAC+4
001352r 2               .endif
001352r 2  A5 rr                lda     FAC+3
001354r 2  65 rr                adc     ARG+3
001356r 2  85 rr                sta     FAC+3
001358r 2  A5 rr                lda     FAC+2
00135Ar 2  65 rr                adc     ARG+2
00135Cr 2  85 rr                sta     FAC+2
00135Er 2  A5 rr                lda     FAC+1
001360r 2  65 rr                adc     ARG+1
001362r 2  85 rr                sta     FAC+1
001364r 2  4C rr rr             jmp     NORMALIZE_FAC5
001367r 2               
001367r 2               ; ----------------------------------------------------------------------------
001367r 2               ; FINISH NORMALIZING FAC
001367r 2               ; ----------------------------------------------------------------------------
001367r 2               NORMALIZE_FAC3:
001367r 2  69 01                adc     #$01
001369r 2  06 rr                asl     FACEXTENSION
00136Br 2               .ifndef CONFIG_SMALL
00136Br 2                       rol     FAC+4
00136Br 2               .endif
00136Br 2  26 rr                rol     FAC+3
00136Dr 2  26 rr                rol     FAC+2
00136Fr 2  26 rr                rol     FAC+1
001371r 2               NORMALIZE_FAC4:
001371r 2  10 F4                bpl     NORMALIZE_FAC3
001373r 2  38                   sec
001374r 2  E5 rr                sbc     FAC
001376r 2  B0 CF                bcs     ZERO_FAC
001378r 2  49 FF                eor     #$FF
00137Ar 2  69 01                adc     #$01
00137Cr 2  85 rr                sta     FAC
00137Er 2               NORMALIZE_FAC5:
00137Er 2  90 0C                bcc     L3764
001380r 2               NORMALIZE_FAC6:
001380r 2  E6 rr                inc     FAC
001382r 2  F0 36                beq     OVERFLOW
001384r 2               .ifndef CONFIG_ROR_WORKAROUND
001384r 2  66 rr                ror     FAC+1
001386r 2  66 rr                ror     FAC+2
001388r 2  66 rr                ror     FAC+3
00138Ar 2                 .ifndef CONFIG_SMALL
00138Ar 2                       ror     FAC+4
00138Ar 2                 .endif
00138Ar 2  66 rr                ror     FACEXTENSION
00138Cr 2               .else
00138Cr 2                       lda     #$00
00138Cr 2                       bcc     L372E
00138Cr 2                       lda     #$80
00138Cr 2               L372E:
00138Cr 2                       lsr     FAC+1
00138Cr 2                       ora     FAC+1
00138Cr 2                       sta     FAC+1
00138Cr 2                       lda     #$00
00138Cr 2                       bcc     L373A
00138Cr 2                       lda     #$80
00138Cr 2               L373A:
00138Cr 2                       lsr     FAC+2
00138Cr 2                       ora     FAC+2
00138Cr 2                       sta     FAC+2
00138Cr 2                       lda     #$00
00138Cr 2                       bcc     L3746
00138Cr 2                       lda     #$80
00138Cr 2               L3746:
00138Cr 2                       lsr     FAC+3
00138Cr 2                       ora     FAC+3
00138Cr 2                       sta     FAC+3
00138Cr 2                       lda     #$00
00138Cr 2                       bcc     L3752
00138Cr 2                       lda     #$80
00138Cr 2               L3752:
00138Cr 2                       lsr     FAC+4
00138Cr 2                       ora     FAC+4
00138Cr 2                       sta     FAC+4
00138Cr 2                       lda     #$00
00138Cr 2                       bcc     L375E
00138Cr 2                       lda     #$80
00138Cr 2               L375E:
00138Cr 2                       lsr     FACEXTENSION
00138Cr 2                       ora     FACEXTENSION
00138Cr 2                       sta     FACEXTENSION
00138Cr 2               .endif
00138Cr 2               L3764:
00138Cr 2  60                   rts
00138Dr 2               
00138Dr 2               ; ----------------------------------------------------------------------------
00138Dr 2               ; 2'S COMPLEMENT OF FAC
00138Dr 2               ; ----------------------------------------------------------------------------
00138Dr 2               COMPLEMENT_FAC:
00138Dr 2  A5 rr                lda     FACSIGN
00138Fr 2  49 FF                eor     #$FF
001391r 2  85 rr                sta     FACSIGN
001393r 2               
001393r 2               ; ----------------------------------------------------------------------------
001393r 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
001393r 2               ; ----------------------------------------------------------------------------
001393r 2               COMPLEMENT_FAC_MANTISSA:
001393r 2  A5 rr                lda     FAC+1
001395r 2  49 FF                eor     #$FF
001397r 2  85 rr                sta     FAC+1
001399r 2  A5 rr                lda     FAC+2
00139Br 2  49 FF                eor     #$FF
00139Dr 2  85 rr                sta     FAC+2
00139Fr 2  A5 rr                lda     FAC+3
0013A1r 2  49 FF                eor     #$FF
0013A3r 2  85 rr                sta     FAC+3
0013A5r 2               .ifndef CONFIG_SMALL
0013A5r 2                       lda     FAC+4
0013A5r 2                       eor     #$FF
0013A5r 2                       sta     FAC+4
0013A5r 2               .endif
0013A5r 2  A5 rr                lda     FACEXTENSION
0013A7r 2  49 FF                eor     #$FF
0013A9r 2  85 rr                sta     FACEXTENSION
0013ABr 2  E6 rr                inc     FACEXTENSION
0013ADr 2  D0 0A                bne     RTS12
0013AFr 2               
0013AFr 2               ; ----------------------------------------------------------------------------
0013AFr 2               ; INCREMENT FAC MANTISSA
0013AFr 2               ; ----------------------------------------------------------------------------
0013AFr 2               INCREMENT_FAC_MANTISSA:
0013AFr 2               .ifndef CONFIG_SMALL
0013AFr 2                       inc     FAC+4
0013AFr 2                       bne     RTS12
0013AFr 2               .endif
0013AFr 2  E6 rr                inc     FAC+3
0013B1r 2  D0 06                bne     RTS12
0013B3r 2  E6 rr                inc     FAC+2
0013B5r 2  D0 02                bne     RTS12
0013B7r 2  E6 rr                inc     FAC+1
0013B9r 2               RTS12:
0013B9r 2  60                   rts
0013BAr 2               OVERFLOW:
0013BAr 2  A2 0A                ldx     #ERR_OVERFLOW
0013BCr 2  4C rr rr             jmp     ERROR
0013BFr 2               
0013BFr 2               ; ----------------------------------------------------------------------------
0013BFr 2               ; SHIFT 1,X THRU 5,X RIGHT
0013BFr 2               ; (A) = NEGATIVE OF SHIFT COUNT
0013BFr 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
0013BFr 2               ;
0013BFr 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
0013BFr 2               ; ----------------------------------------------------------------------------
0013BFr 2               SHIFT_RIGHT1:
0013BFr 2  A2 rr                ldx     #RESULT-1
0013C1r 2               SHIFT_RIGHT2:
0013C1r 2               .ifdef CONFIG_SMALL
0013C1r 2  B4 03                ldy     3,x
0013C3r 2               .else
0013C3r 2                       ldy     4,x
0013C3r 2               .endif
0013C3r 2  84 rr                sty     FACEXTENSION
0013C5r 2               .ifndef CONFIG_SMALL
0013C5r 2                       ldy     3,x
0013C5r 2                       sty     4,x
0013C5r 2               .endif
0013C5r 2  B4 02                ldy     2,x
0013C7r 2  94 03                sty     3,x
0013C9r 2  B4 01                ldy     1,x
0013CBr 2  94 02                sty     2,x
0013CDr 2  A4 rr                ldy     SHIFTSIGNEXT
0013CFr 2  94 01                sty     1,x
0013D1r 2               
0013D1r 2               ; ----------------------------------------------------------------------------
0013D1r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0013D1r 2               ; ----------------------------------------------------------------------------
0013D1r 2               SHIFT_RIGHT:
0013D1r 2  69 08                adc     #$08
0013D3r 2  30 EC                bmi     SHIFT_RIGHT2
0013D5r 2  F0 EA                beq     SHIFT_RIGHT2
0013D7r 2  E9 08                sbc     #$08
0013D9r 2  A8                   tay
0013DAr 2  A5 rr                lda     FACEXTENSION
0013DCr 2  B0 12                bcs     SHIFT_RIGHT5
0013DEr 2               .ifndef CONFIG_ROR_WORKAROUND
0013DEr 2               LB588:
0013DEr 2  16 01                asl     1,x
0013E0r 2  90 02                bcc     LB58E
0013E2r 2  F6 01                inc     1,x
0013E4r 2               LB58E:
0013E4r 2  76 01                ror     1,x
0013E6r 2  76 01                ror     1,x
0013E8r 2               
0013E8r 2               ; ----------------------------------------------------------------------------
0013E8r 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
0013E8r 2               ; ----------------------------------------------------------------------------
0013E8r 2               SHIFT_RIGHT4:
0013E8r 2  76 02                ror     2,x
0013EAr 2  76 03                ror     3,x
0013ECr 2                 .ifndef CONFIG_SMALL
0013ECr 2                       ror     4,x
0013ECr 2                 .endif
0013ECr 2  6A                   ror     a
0013EDr 2  C8                   iny
0013EEr 2  D0 EE                bne     LB588
0013F0r 2               .else
0013F0r 2               L37C4:
0013F0r 2                       pha
0013F0r 2                       lda     1,x
0013F0r 2                       and     #$80
0013F0r 2                       lsr     1,x
0013F0r 2                       ora     1,x
0013F0r 2                       sta     1,x
0013F0r 2                       .byte   $24
0013F0r 2               SHIFT_RIGHT4:
0013F0r 2                       pha
0013F0r 2                       lda     #$00
0013F0r 2                       bcc     L37D7
0013F0r 2                       lda     #$80
0013F0r 2               L37D7:
0013F0r 2                       lsr     2,x
0013F0r 2                       ora     2,x
0013F0r 2                       sta     2,x
0013F0r 2                       lda     #$00
0013F0r 2                       bcc     L37E3
0013F0r 2                       lda     #$80
0013F0r 2               L37E3:
0013F0r 2                       lsr     3,x
0013F0r 2                       ora     3,x
0013F0r 2                       sta     3,x
0013F0r 2                       lda     #$00
0013F0r 2                       bcc     L37EF
0013F0r 2                       lda     #$80
0013F0r 2               L37EF:
0013F0r 2                       lsr     4,x
0013F0r 2                       ora     4,x
0013F0r 2                       sta     4,x
0013F0r 2                       pla
0013F0r 2                       php
0013F0r 2                       lsr     a
0013F0r 2                       plp
0013F0r 2                       bcc     L37FD
0013F0r 2                       ora     #$80
0013F0r 2               L37FD:
0013F0r 2                       iny
0013F0r 2                       bne     L37C4
0013F0r 2               .endif
0013F0r 2               SHIFT_RIGHT5:
0013F0r 2  18                   clc
0013F1r 2  60                   rts
0013F2r 2               
0013F2r 2               ; ----------------------------------------------------------------------------
0013F2r 2               .ifdef CONFIG_SMALL
0013F2r 2               CON_ONE:
0013F2r 2  81 00 00 00          .byte   $81,$00,$00,$00
0013F6r 2               POLY_LOG:
0013F6r 2  02           		.byte	$02
0013F7r 2  80 19 56 62  		.byte   $80,$19,$56,$62
0013FBr 2  80 76 22 F3  		.byte   $80,$76,$22,$F3
0013FFr 2  82 38 AA 40  		.byte   $82,$38,$AA,$40
001403r 2               CON_SQR_HALF:
001403r 2  80 35 04 F3  		.byte   $80,$35,$04,$F3
001407r 2               CON_SQR_TWO:
001407r 2  81 35 04 F3  		.byte   $81,$35,$04,$F3
00140Br 2               CON_NEG_HALF:
00140Br 2  80 80 00 00  		.byte   $80,$80,$00,$00
00140Fr 2               CON_LOG_TWO:
00140Fr 2  80 31 72 18  		.byte   $80,$31,$72,$18
001413r 2               .else
001413r 2               CON_ONE:
001413r 2                       .byte   $81,$00,$00,$00,$00
001413r 2               POLY_LOG:
001413r 2                       .byte   $03
001413r 2               		.byte   $7F,$5E,$56,$CB,$79
001413r 2               		.byte   $80,$13,$9B,$0B,$64
001413r 2               		.byte   $80,$76,$38,$93,$16
001413r 2                       .byte   $82,$38,$AA,$3B,$20
001413r 2               CON_SQR_HALF:
001413r 2                       .byte   $80,$35,$04,$F3,$34
001413r 2               CON_SQR_TWO:
001413r 2                       .byte   $81,$35,$04,$F3,$34
001413r 2               CON_NEG_HALF:
001413r 2                       .byte   $80,$80,$00,$00,$00
001413r 2               CON_LOG_TWO:
001413r 2                       .byte   $80,$31,$72,$17,$F8
001413r 2               .endif
001413r 2               
001413r 2               ; ----------------------------------------------------------------------------
001413r 2               ; "LOG" FUNCTION
001413r 2               ; ----------------------------------------------------------------------------
001413r 2               LOG:
001413r 2  20 rr rr             jsr     SIGN
001416r 2  F0 02                beq     GIQ
001418r 2  10 03                bpl     LOG2
00141Ar 2               GIQ:
00141Ar 2  4C rr rr             jmp     IQERR
00141Dr 2               LOG2:
00141Dr 2  A5 rr                lda     FAC
00141Fr 2  E9 7F                sbc     #$7F
001421r 2  48                   pha
001422r 2  A9 80                lda     #$80
001424r 2  85 rr                sta     FAC
001426r 2  A9 rr                lda     #<CON_SQR_HALF
001428r 2  A0 rr                ldy     #>CON_SQR_HALF
00142Ar 2  20 rr rr             jsr     FADD
00142Dr 2  A9 rr                lda     #<CON_SQR_TWO
00142Fr 2  A0 rr                ldy     #>CON_SQR_TWO
001431r 2  20 rr rr             jsr     FDIV
001434r 2  A9 rr                lda     #<CON_ONE
001436r 2  A0 rr                ldy     #>CON_ONE
001438r 2  20 rr rr             jsr     FSUB
00143Br 2  A9 rr                lda     #<POLY_LOG
00143Dr 2  A0 rr                ldy     #>POLY_LOG
00143Fr 2  20 rr rr             jsr     POLYNOMIAL_ODD
001442r 2  A9 rr                lda     #<CON_NEG_HALF
001444r 2  A0 rr                ldy     #>CON_NEG_HALF
001446r 2  20 rr rr             jsr     FADD
001449r 2  68                   pla
00144Ar 2  20 rr rr             jsr     ADDACC
00144Dr 2  A9 rr                lda     #<CON_LOG_TWO
00144Fr 2  A0 rr                ldy     #>CON_LOG_TWO
001451r 2               
001451r 2               ; ----------------------------------------------------------------------------
001451r 2               ; FAC = (Y,A) * FAC
001451r 2               ; ----------------------------------------------------------------------------
001451r 2               FMULT:
001451r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001454r 2               
001454r 2               ; ----------------------------------------------------------------------------
001454r 2               ; FAC = ARG * FAC
001454r 2               ; ----------------------------------------------------------------------------
001454r 2               FMULTT:
001454r 2               .ifndef CONFIG_11
001454r 2                       beq     L3903
001454r 2               .else
001454r 2  D0 03 4C rr          jeq     L3903
001458r 2  rr           
001459r 2               .endif
001459r 2  20 rr rr             jsr     ADD_EXPONENTS
00145Cr 2  A9 00                lda     #$00
00145Er 2  85 rr                sta     RESULT
001460r 2  85 rr                sta     RESULT+1
001462r 2  85 rr                sta     RESULT+2
001464r 2               .ifndef CONFIG_SMALL
001464r 2                       sta     RESULT+3
001464r 2               .endif
001464r 2  A5 rr                lda     FACEXTENSION
001466r 2  20 rr rr             jsr     MULTIPLY1
001469r 2               .ifndef CONFIG_SMALL
001469r 2                       lda     FAC+4
001469r 2                       jsr     MULTIPLY1
001469r 2               .endif
001469r 2  A5 rr                lda     FAC+3
00146Br 2  20 rr rr             jsr     MULTIPLY1
00146Er 2  A5 rr                lda     FAC+2
001470r 2  20 rr rr             jsr     MULTIPLY1
001473r 2  A5 rr                lda     FAC+1
001475r 2  20 rr rr             jsr     MULTIPLY2
001478r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
00147Br 2               
00147Br 2               ; ----------------------------------------------------------------------------
00147Br 2               ; MULTIPLY ARG BY (A) INTO RESULT
00147Br 2               ; ----------------------------------------------------------------------------
00147Br 2               MULTIPLY1:
00147Br 2  D0 03                bne     MULTIPLY2
00147Dr 2  4C rr rr             jmp     SHIFT_RIGHT1
001480r 2               MULTIPLY2:
001480r 2  4A                   lsr     a
001481r 2  09 80                ora     #$80
001483r 2               L38A7:
001483r 2  A8                   tay
001484r 2  90 13                bcc     L38C3
001486r 2  18                   clc
001487r 2               .ifndef CONFIG_SMALL
001487r 2                       lda     RESULT+3
001487r 2                       adc     ARG+4
001487r 2                       sta     RESULT+3
001487r 2               .endif
001487r 2  A5 rr                lda     RESULT+2
001489r 2  65 rr                adc     ARG+3
00148Br 2  85 rr                sta     RESULT+2
00148Dr 2  A5 rr                lda     RESULT+1
00148Fr 2  65 rr                adc     ARG+2
001491r 2  85 rr                sta     RESULT+1
001493r 2  A5 rr                lda     RESULT
001495r 2  65 rr                adc     ARG+1
001497r 2  85 rr                sta     RESULT
001499r 2               L38C3:
001499r 2               .ifndef CONFIG_ROR_WORKAROUND
001499r 2  66 rr                ror     RESULT
00149Br 2  66 rr                ror     RESULT+1
00149Dr 2               .ifdef APPLE_BAD_BYTE
00149Dr 2               ; this seems to be a bad byte in the dump
00149Dr 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
00149Dr 2               .else
00149Dr 2  66 rr                ror     RESULT+2
00149Fr 2               .endif
00149Fr 2               .ifndef CONFIG_SMALL
00149Fr 2                       ror     RESULT+3
00149Fr 2               .endif
00149Fr 2  66 rr                ror     FACEXTENSION
0014A1r 2               .else
0014A1r 2                       lda     #$00
0014A1r 2                       bcc     L38C9
0014A1r 2                       lda     #$80
0014A1r 2               L38C9:
0014A1r 2                       lsr     RESULT
0014A1r 2                       ora     RESULT
0014A1r 2                       sta     RESULT
0014A1r 2                       lda     #$00
0014A1r 2                       bcc     L38D5
0014A1r 2                       lda     #$80
0014A1r 2               L38D5:
0014A1r 2                       lsr     RESULT+1
0014A1r 2                       ora     RESULT+1
0014A1r 2                       sta     RESULT+1
0014A1r 2                       lda     #$00
0014A1r 2                       bcc     L38E1
0014A1r 2                       lda     #$80
0014A1r 2               L38E1:
0014A1r 2                       lsr     RESULT+2
0014A1r 2                       ora     RESULT+2
0014A1r 2                       sta     RESULT+2
0014A1r 2                       lda     #$00
0014A1r 2                       bcc     L38ED
0014A1r 2                       lda     #$80
0014A1r 2               L38ED:
0014A1r 2                       lsr     RESULT+3
0014A1r 2                       ora     RESULT+3
0014A1r 2                       sta     RESULT+3
0014A1r 2                       lda     #$00
0014A1r 2                       bcc     L38F9
0014A1r 2                       lda     #$80
0014A1r 2               L38F9:
0014A1r 2                       lsr     FACEXTENSION
0014A1r 2                       ora     FACEXTENSION
0014A1r 2                       sta     FACEXTENSION
0014A1r 2               .endif
0014A1r 2  98                   tya
0014A2r 2  4A                   lsr     a
0014A3r 2  D0 DE                bne     L38A7
0014A5r 2               L3903:
0014A5r 2  60                   rts
0014A6r 2               
0014A6r 2               ; ----------------------------------------------------------------------------
0014A6r 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0014A6r 2               ; ----------------------------------------------------------------------------
0014A6r 2               LOAD_ARG_FROM_YA:
0014A6r 2  85 rr                sta     INDEX
0014A8r 2  84 rr                sty     INDEX+1
0014AAr 2  A0 03                ldy     #BYTES_FP-1
0014ACr 2               .ifndef CONFIG_SMALL
0014ACr 2                       lda     (INDEX),y
0014ACr 2                       sta     ARG+4
0014ACr 2                       dey
0014ACr 2               .endif
0014ACr 2  B1 rr                lda     (INDEX),y
0014AEr 2  85 rr                sta     ARG+3
0014B0r 2  88                   dey
0014B1r 2  B1 rr                lda     (INDEX),y
0014B3r 2  85 rr                sta     ARG+2
0014B5r 2  88                   dey
0014B6r 2  B1 rr                lda     (INDEX),y
0014B8r 2  85 rr                sta     ARGSIGN
0014BAr 2  45 rr                eor     FACSIGN
0014BCr 2  85 rr                sta     SGNCPR
0014BEr 2  A5 rr                lda     ARGSIGN
0014C0r 2  09 80                ora     #$80
0014C2r 2  85 rr                sta     ARG+1
0014C4r 2  88                   dey
0014C5r 2  B1 rr                lda     (INDEX),y
0014C7r 2  85 rr                sta     ARG
0014C9r 2  A5 rr                lda     FAC
0014CBr 2  60                   rts
0014CCr 2               
0014CCr 2               ; ----------------------------------------------------------------------------
0014CCr 2               ; ADD EXPONENTS OF ARG AND FAC
0014CCr 2               ; (CALLED BY FMULT AND FDIV)
0014CCr 2               ;
0014CCr 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0014CCr 2               ; ----------------------------------------------------------------------------
0014CCr 2               ADD_EXPONENTS:
0014CCr 2  A5 rr                lda     ARG
0014CEr 2               ADD_EXPONENTS1:
0014CEr 2  F0 1F                beq     ZERO
0014D0r 2  18                   clc
0014D1r 2  65 rr                adc     FAC
0014D3r 2  90 04                bcc     L393C
0014D5r 2  30 1D                bmi     JOV
0014D7r 2  18                   clc
0014D8r 2  2C                   .byte   $2C
0014D9r 2               L393C:
0014D9r 2  10 14                bpl     ZERO
0014DBr 2  69 80                adc     #$80
0014DDr 2  85 rr                sta     FAC
0014DFr 2  D0 03                bne     L3947
0014E1r 2  4C rr rr             jmp     STA_IN_FAC_SIGN
0014E4r 2               L3947:
0014E4r 2  A5 rr                lda     SGNCPR
0014E6r 2  85 rr                sta     FACSIGN
0014E8r 2  60                   rts
0014E9r 2               
0014E9r 2               ; ----------------------------------------------------------------------------
0014E9r 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
0014E9r 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
0014E9r 2               ; CALLED FROM "EXP" FUNCTION
0014E9r 2               ; ----------------------------------------------------------------------------
0014E9r 2               OUTOFRNG:
0014E9r 2  A5 rr                lda     FACSIGN
0014EBr 2  49 FF                eor     #$FF
0014EDr 2  30 05                bmi     JOV
0014EFr 2               
0014EFr 2               ; ----------------------------------------------------------------------------
0014EFr 2               ; POP RETURN ADDRESS AND SET FAC=0
0014EFr 2               ; ----------------------------------------------------------------------------
0014EFr 2               ZERO:
0014EFr 2  68                   pla
0014F0r 2  68                   pla
0014F1r 2  4C rr rr             jmp     ZERO_FAC
0014F4r 2               JOV:
0014F4r 2  4C rr rr             jmp     OVERFLOW
0014F7r 2               
0014F7r 2               ; ----------------------------------------------------------------------------
0014F7r 2               ; MULTIPLY FAC BY 10
0014F7r 2               ; ----------------------------------------------------------------------------
0014F7r 2               MUL10:
0014F7r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0014FAr 2  AA                   tax
0014FBr 2  F0 10                beq     L3970
0014FDr 2  18                   clc
0014FEr 2  69 02                adc     #$02
001500r 2  B0 F2                bcs     JOV
001502r 2               LD9BF:
001502r 2  A2 00                ldx     #$00
001504r 2  86 rr                stx     SGNCPR
001506r 2  20 rr rr             jsr     FADD2
001509r 2  E6 rr                inc     FAC
00150Br 2  F0 E7                beq     JOV
00150Dr 2               L3970:
00150Dr 2  60                   rts
00150Er 2               
00150Er 2               ; ----------------------------------------------------------------------------
00150Er 2               CONTEN:
00150Er 2               .ifdef CONFIG_SMALL
00150Er 2  84 20 00 00          .byte   $84,$20,$00,$00
001512r 2               .else
001512r 2                       .byte   $84,$20,$00,$00,$00
001512r 2               .endif
001512r 2               
001512r 2               ; ----------------------------------------------------------------------------
001512r 2               ; DIVIDE FAC BY 10
001512r 2               ; ----------------------------------------------------------------------------
001512r 2               DIV10:
001512r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001515r 2  A9 rr                lda     #<CONTEN
001517r 2  A0 rr                ldy     #>CONTEN
001519r 2  A2 00                ldx     #$00
00151Br 2               
00151Br 2               ; ----------------------------------------------------------------------------
00151Br 2               ; FAC = ARG / (Y,A)
00151Br 2               ; ----------------------------------------------------------------------------
00151Br 2               DIV:
00151Br 2  86 rr                stx     SGNCPR
00151Dr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001520r 2  4C rr rr             jmp     FDIVT
001523r 2               
001523r 2               ; ----------------------------------------------------------------------------
001523r 2               ; FAC = (Y,A) / FAC
001523r 2               ; ----------------------------------------------------------------------------
001523r 2               FDIV:
001523r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001526r 2               
001526r 2               ; ----------------------------------------------------------------------------
001526r 2               ; FAC = ARG / FAC
001526r 2               ; ----------------------------------------------------------------------------
001526r 2               FDIVT:
001526r 2  F0 68                beq     L3A02
001528r 2  20 rr rr             jsr     ROUND_FAC
00152Br 2  A9 00                lda     #$00
00152Dr 2  38                   sec
00152Er 2  E5 rr                sbc     FAC
001530r 2  85 rr                sta     FAC
001532r 2  20 rr rr             jsr     ADD_EXPONENTS
001535r 2  E6 rr                inc     FAC
001537r 2  F0 BB                beq     JOV
001539r 2  A2 FD                ldx     #<-MANTISSA_BYTES
00153Br 2  A9 01                lda     #$01
00153Dr 2               L39A1:
00153Dr 2  A4 rr                ldy     ARG+1
00153Fr 2  C4 rr                cpy     FAC+1
001541r 2  D0 0A                bne     L39B7
001543r 2  A4 rr                ldy     ARG+2
001545r 2  C4 rr                cpy     FAC+2
001547r 2  D0 04                bne     L39B7
001549r 2  A4 rr                ldy     ARG+3
00154Br 2  C4 rr                cpy     FAC+3
00154Dr 2               .ifndef CONFIG_SMALL
00154Dr 2                       bne     L39B7
00154Dr 2                       ldy     ARG+4
00154Dr 2                       cpy     FAC+4
00154Dr 2               .endif
00154Dr 2               L39B7:
00154Dr 2  08                   php
00154Er 2  2A                   rol     a
00154Fr 2  90 09                bcc     L39C4
001551r 2  E8                   inx
001552r 2  95 rr                sta     RESULT_LAST-1,x
001554r 2  F0 2A                beq     L39F2
001556r 2  10 2C                bpl     L39F6
001558r 2  A9 01                lda     #$01
00155Ar 2               L39C4:
00155Ar 2  28                   plp
00155Br 2  B0 0C                bcs     L39D5
00155Dr 2               L39C7:
00155Dr 2  06 rr                asl     ARG_LAST
00155Fr 2               .ifndef CONFIG_SMALL
00155Fr 2                       rol     ARG+3
00155Fr 2               .endif
00155Fr 2  26 rr                rol     ARG+2
001561r 2  26 rr                rol     ARG+1
001563r 2  B0 E8                bcs     L39B7
001565r 2  30 D6                bmi     L39A1
001567r 2  10 E4                bpl     L39B7
001569r 2               L39D5:
001569r 2  A8                   tay
00156Ar 2               .ifndef CONFIG_SMALL
00156Ar 2                       lda     ARG+4
00156Ar 2                       sbc     FAC+4
00156Ar 2                       sta     ARG+4
00156Ar 2               .endif
00156Ar 2  A5 rr                lda     ARG+3
00156Cr 2  E5 rr                sbc     FAC+3
00156Er 2  85 rr                sta     ARG+3
001570r 2  A5 rr                lda     ARG+2
001572r 2  E5 rr                sbc     FAC+2
001574r 2  85 rr                sta     ARG+2
001576r 2  A5 rr                lda     ARG+1
001578r 2  E5 rr                sbc     FAC+1
00157Ar 2  85 rr                sta     ARG+1
00157Cr 2  98                   tya
00157Dr 2  4C rr rr             jmp     L39C7
001580r 2               L39F2:
001580r 2  A9 40                lda     #$40
001582r 2  D0 D6                bne     L39C4
001584r 2               L39F6:
001584r 2  0A                   asl     a
001585r 2  0A                   asl     a
001586r 2  0A                   asl     a
001587r 2  0A                   asl     a
001588r 2  0A                   asl     a
001589r 2  0A                   asl     a
00158Ar 2  85 rr                sta     FACEXTENSION
00158Cr 2  28                   plp
00158Dr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001590r 2               L3A02:
001590r 2  A2 14                ldx     #ERR_ZERODIV
001592r 2  4C rr rr             jmp     ERROR
001595r 2               
001595r 2               ; ----------------------------------------------------------------------------
001595r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
001595r 2               ; ----------------------------------------------------------------------------
001595r 2               COPY_RESULT_INTO_FAC:
001595r 2  A5 rr                lda     RESULT
001597r 2  85 rr                sta     FAC+1
001599r 2  A5 rr                lda     RESULT+1
00159Br 2  85 rr                sta     FAC+2
00159Dr 2  A5 rr                lda     RESULT+2
00159Fr 2  85 rr                sta     FAC+3
0015A1r 2               .ifndef CONFIG_SMALL
0015A1r 2                       lda     RESULT+3
0015A1r 2                       sta     FAC+4
0015A1r 2               .endif
0015A1r 2  4C rr rr             jmp     NORMALIZE_FAC2
0015A4r 2               
0015A4r 2               ; ----------------------------------------------------------------------------
0015A4r 2               ; UNPACK (Y,A) INTO FAC
0015A4r 2               ; ----------------------------------------------------------------------------
0015A4r 2               LOAD_FAC_FROM_YA:
0015A4r 2  85 rr                sta     INDEX
0015A6r 2  84 rr                sty     INDEX+1
0015A8r 2  A0 03                ldy     #MANTISSA_BYTES
0015AAr 2               .ifndef CONFIG_SMALL
0015AAr 2                       lda     (INDEX),y
0015AAr 2                       sta     FAC+4
0015AAr 2                       dey
0015AAr 2               .endif
0015AAr 2  B1 rr                lda     (INDEX),y
0015ACr 2  85 rr                sta     FAC+3
0015AEr 2  88                   dey
0015AFr 2  B1 rr                lda     (INDEX),y
0015B1r 2  85 rr                sta     FAC+2
0015B3r 2  88                   dey
0015B4r 2  B1 rr                lda     (INDEX),y
0015B6r 2  85 rr                sta     FACSIGN
0015B8r 2  09 80                ora     #$80
0015BAr 2  85 rr                sta     FAC+1
0015BCr 2  88                   dey
0015BDr 2  B1 rr                lda     (INDEX),y
0015BFr 2  85 rr                sta     FAC
0015C1r 2  84 rr                sty     FACEXTENSION
0015C3r 2  60                   rts
0015C4r 2               
0015C4r 2               ; ----------------------------------------------------------------------------
0015C4r 2               ; ROUND FAC, STORE IN TEMP2
0015C4r 2               ; ----------------------------------------------------------------------------
0015C4r 2               STORE_FAC_IN_TEMP2_ROUNDED:
0015C4r 2  A2 rr                ldx     #TEMP2
0015C6r 2  2C                   .byte   $2C
0015C7r 2               
0015C7r 2               ; ----------------------------------------------------------------------------
0015C7r 2               ; ROUND FAC, STORE IN TEMP1
0015C7r 2               ; ----------------------------------------------------------------------------
0015C7r 2               STORE_FAC_IN_TEMP1_ROUNDED:
0015C7r 2  A2 rr                ldx     #TEMP1X
0015C9r 2  A0 00                ldy     #$00
0015CBr 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0015CDr 2               
0015CDr 2               ; ----------------------------------------------------------------------------
0015CDr 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0015CDr 2               ; ----------------------------------------------------------------------------
0015CDr 2               SETFOR:
0015CDr 2  A6 rr                ldx     FORPNT
0015CFr 2  A4 rr                ldy     FORPNT+1
0015D1r 2               
0015D1r 2               ; ----------------------------------------------------------------------------
0015D1r 2               ; ROUND FAC, AND STORE AT (Y,X)
0015D1r 2               ; ----------------------------------------------------------------------------
0015D1r 2               STORE_FAC_AT_YX_ROUNDED:
0015D1r 2  20 rr rr             jsr     ROUND_FAC
0015D4r 2  86 rr                stx     INDEX
0015D6r 2  84 rr                sty     INDEX+1
0015D8r 2  A0 03                ldy     #MANTISSA_BYTES
0015DAr 2               .ifndef CONFIG_SMALL
0015DAr 2                       lda     FAC+4
0015DAr 2                       sta     (INDEX),y
0015DAr 2                       dey
0015DAr 2               .endif
0015DAr 2  A5 rr                lda     FAC+3
0015DCr 2  91 rr                sta     (INDEX),y
0015DEr 2  88                   dey
0015DFr 2  A5 rr                lda     FAC+2
0015E1r 2  91 rr                sta     (INDEX),y
0015E3r 2  88                   dey
0015E4r 2  A5 rr                lda     FACSIGN
0015E6r 2  09 7F                ora     #$7F
0015E8r 2  25 rr                and     FAC+1
0015EAr 2  91 rr                sta     (INDEX),y
0015ECr 2  88                   dey
0015EDr 2  A5 rr                lda     FAC
0015EFr 2  91 rr                sta     (INDEX),y
0015F1r 2  84 rr                sty     FACEXTENSION
0015F3r 2  60                   rts
0015F4r 2               
0015F4r 2               ; ----------------------------------------------------------------------------
0015F4r 2               ; COPY ARG INTO FAC
0015F4r 2               ; ----------------------------------------------------------------------------
0015F4r 2               COPY_ARG_TO_FAC:
0015F4r 2  A5 rr                lda     ARGSIGN
0015F6r 2               MFA:
0015F6r 2  85 rr                sta     FACSIGN
0015F8r 2  A2 04                ldx     #BYTES_FP
0015FAr 2               L3A7A:
0015FAr 2  B5 rr                lda     SHIFTSIGNEXT,x
0015FCr 2  95 rr                sta     EXPSGN,x
0015FEr 2  CA                   dex
0015FFr 2  D0 F9                bne     L3A7A
001601r 2  86 rr                stx     FACEXTENSION
001603r 2  60                   rts
001604r 2               
001604r 2               ; ----------------------------------------------------------------------------
001604r 2               ; ROUND FAC AND COPY TO ARG
001604r 2               ; ----------------------------------------------------------------------------
001604r 2               COPY_FAC_TO_ARG_ROUNDED:
001604r 2  20 rr rr             jsr     ROUND_FAC
001607r 2               MAF:
001607r 2  A2 05                ldx     #BYTES_FP+1
001609r 2               L3A89:
001609r 2  B5 rr                lda     EXPSGN,x
00160Br 2  95 rr                sta     SHIFTSIGNEXT,x
00160Dr 2  CA                   dex
00160Er 2  D0 F9                bne     L3A89
001610r 2  86 rr                stx     FACEXTENSION
001612r 2               RTS14:
001612r 2  60                   rts
001613r 2               
001613r 2               ; ----------------------------------------------------------------------------
001613r 2               ; ROUND FAC USING EXTENSION BYTE
001613r 2               ; ----------------------------------------------------------------------------
001613r 2               ROUND_FAC:
001613r 2  A5 rr                lda     FAC
001615r 2  F0 FB                beq     RTS14
001617r 2  06 rr                asl     FACEXTENSION
001619r 2  90 F7                bcc     RTS14
00161Br 2               
00161Br 2               ; ----------------------------------------------------------------------------
00161Br 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00161Br 2               ; ----------------------------------------------------------------------------
00161Br 2               INCREMENT_MANTISSA:
00161Br 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
00161Er 2  D0 F2                bne     RTS14
001620r 2  4C rr rr             jmp     NORMALIZE_FAC6
001623r 2               
001623r 2               ; ----------------------------------------------------------------------------
001623r 2               ; TEST FAC FOR ZERO AND SIGN
001623r 2               ;
001623r 2               ; FAC > 0, RETURN +1
001623r 2               ; FAC = 0, RETURN  0
001623r 2               ; FAC < 0, RETURN -1
001623r 2               ; ----------------------------------------------------------------------------
001623r 2               SIGN:
001623r 2  A5 rr                lda     FAC
001625r 2  F0 09                beq     RTS15
001627r 2               L3AA7:
001627r 2  A5 rr                lda     FACSIGN
001629r 2               SIGN2:
001629r 2  2A                   rol     a
00162Ar 2  A9 FF                lda     #$FF
00162Cr 2  B0 02                bcs     RTS15
00162Er 2  A9 01                lda     #$01
001630r 2               RTS15:
001630r 2  60                   rts
001631r 2               
001631r 2               ; ----------------------------------------------------------------------------
001631r 2               ; "SGN" FUNCTION
001631r 2               ; ----------------------------------------------------------------------------
001631r 2               SGN:
001631r 2  20 rr rr             jsr     SIGN
001634r 2               
001634r 2               ; ----------------------------------------------------------------------------
001634r 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001634r 2               ; ----------------------------------------------------------------------------
001634r 2               FLOAT:
001634r 2  85 rr                sta     FAC+1
001636r 2  A9 00                lda     #$00
001638r 2  85 rr                sta     FAC+2
00163Ar 2  A2 88                ldx     #$88
00163Cr 2               
00163Cr 2               ; ----------------------------------------------------------------------------
00163Cr 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00163Cr 2               ; (X) = EXPONENT
00163Cr 2               ; ----------------------------------------------------------------------------
00163Cr 2               FLOAT1:
00163Cr 2  A5 rr                lda     FAC+1
00163Er 2  49 FF                eor     #$FF
001640r 2  2A                   rol     a
001641r 2               
001641r 2               ; ----------------------------------------------------------------------------
001641r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001641r 2               ; (X) = EXPONENT
001641r 2               ; C=0 TO MAKE VALUE NEGATIVE
001641r 2               ; C=1 TO MAKE VALUE POSITIVE
001641r 2               ; ----------------------------------------------------------------------------
001641r 2               FLOAT2:
001641r 2  A9 00                lda     #$00
001643r 2               .ifndef CONFIG_SMALL
001643r 2                       sta     FAC+4
001643r 2               .endif
001643r 2  85 rr                sta     FAC+3
001645r 2               LDB21:
001645r 2  86 rr                stx     FAC
001647r 2  85 rr                sta     FACEXTENSION
001649r 2  85 rr                sta     FACSIGN
00164Br 2  4C rr rr             jmp     NORMALIZE_FAC1
00164Er 2               
00164Er 2               ; ----------------------------------------------------------------------------
00164Er 2               ; "ABS" FUNCTION
00164Er 2               ; ----------------------------------------------------------------------------
00164Er 2               ABS:
00164Er 2  46 rr                lsr     FACSIGN
001650r 2  60                   rts
001651r 2               
001651r 2               ; ----------------------------------------------------------------------------
001651r 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
001651r 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
001651r 2               ; ----------------------------------------------------------------------------
001651r 2               FCOMP:
001651r 2  85 rr                sta     DEST
001653r 2               
001653r 2               ; ----------------------------------------------------------------------------
001653r 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001653r 2               ; "DEST" ALREADY SET UP
001653r 2               ; ----------------------------------------------------------------------------
001653r 2               FCOMP2:
001653r 2  84 rr                sty     DEST+1
001655r 2  A0 00                ldy     #$00
001657r 2  B1 rr                lda     (DEST),y
001659r 2  C8                   iny
00165Ar 2  AA                   tax
00165Br 2  F0 C6                beq     SIGN
00165Dr 2  B1 rr                lda     (DEST),y
00165Fr 2  45 rr                eor     FACSIGN
001661r 2  30 C4                bmi     L3AA7
001663r 2  E4 rr                cpx     FAC
001665r 2  D0 1A                bne     L3B0A
001667r 2  B1 rr                lda     (DEST),y
001669r 2  09 80                ora     #$80
00166Br 2  C5 rr                cmp     FAC+1
00166Dr 2  D0 12                bne     L3B0A
00166Fr 2  C8                   iny
001670r 2  B1 rr                lda     (DEST),y
001672r 2  C5 rr                cmp     FAC+2
001674r 2  D0 0B                bne     L3B0A
001676r 2  C8                   iny
001677r 2               .ifndef CONFIG_SMALL
001677r 2                       lda     (DEST),y
001677r 2                       cmp     FAC+3
001677r 2                       bne     L3B0A
001677r 2                       iny
001677r 2               .endif
001677r 2  A9 7F                lda     #$7F
001679r 2  C5 rr                cmp     FACEXTENSION
00167Br 2  B1 rr                lda     (DEST),y
00167Dr 2  E5 rr                sbc     FAC_LAST
00167Fr 2  F0 28                beq     L3B32
001681r 2               L3B0A:
001681r 2  A5 rr                lda     FACSIGN
001683r 2  90 02                bcc     L3B10
001685r 2  49 FF                eor     #$FF
001687r 2               L3B10:
001687r 2  4C rr rr             jmp     SIGN2
00168Ar 2               
00168Ar 2               ; ----------------------------------------------------------------------------
00168Ar 2               ; QUICK INTEGER FUNCTION
00168Ar 2               ;
00168Ar 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00168Ar 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00168Ar 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00168Ar 2               ;
00168Ar 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00168Ar 2               ; ----------------------------------------------------------------------------
00168Ar 2               QINT:
00168Ar 2  A5 rr                lda     FAC
00168Cr 2  F0 4A                beq     QINT3
00168Er 2  38                   sec
00168Fr 2  E9 98                sbc     #120+8*BYTES_FP
001691r 2  24 rr                bit     FACSIGN
001693r 2  10 09                bpl     L3B27
001695r 2  AA                   tax
001696r 2  A9 FF                lda     #$FF
001698r 2  85 rr                sta     SHIFTSIGNEXT
00169Ar 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
00169Dr 2  8A                   txa
00169Er 2               L3B27:
00169Er 2  A2 rr                ldx     #FAC
0016A0r 2  C9 F9                cmp     #$F9
0016A2r 2  10 06                bpl     QINT2
0016A4r 2  20 rr rr             jsr     SHIFT_RIGHT
0016A7r 2  84 rr                sty     SHIFTSIGNEXT
0016A9r 2               L3B32:
0016A9r 2  60                   rts
0016AAr 2               QINT2:
0016AAr 2  A8                   tay
0016ABr 2  A5 rr                lda     FACSIGN
0016ADr 2  29 80                and     #$80
0016AFr 2  46 rr                lsr     FAC+1
0016B1r 2  05 rr                ora     FAC+1
0016B3r 2  85 rr                sta     FAC+1
0016B5r 2  20 rr rr             jsr     SHIFT_RIGHT4
0016B8r 2  84 rr                sty     SHIFTSIGNEXT
0016BAr 2  60                   rts
0016BBr 2               
0016BBr 2               ; ----------------------------------------------------------------------------
0016BBr 2               ; "INT" FUNCTION
0016BBr 2               ;
0016BBr 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0016BBr 2               ; AND THEN REFLOATS THE INTEGER.
0016BBr 2               ; ----------------------------------------------------------------------------
0016BBr 2               INT:
0016BBr 2  A5 rr                lda     FAC
0016BDr 2  C9 98                cmp     #120+8*BYTES_FP
0016BFr 2  B0 1E                bcs     RTS17
0016C1r 2  20 rr rr             jsr     QINT
0016C4r 2  84 rr                sty     FACEXTENSION
0016C6r 2  A5 rr                lda     FACSIGN
0016C8r 2  84 rr                sty     FACSIGN
0016CAr 2  49 80                eor     #$80
0016CCr 2  2A                   rol     a
0016CDr 2  A9 98                lda     #120+8*BYTES_FP
0016CFr 2  85 rr                sta     FAC
0016D1r 2  A5 rr                lda     FAC_LAST
0016D3r 2  85 rr                sta     CHARAC
0016D5r 2  4C rr rr             jmp     NORMALIZE_FAC1
0016D8r 2               QINT3:
0016D8r 2  85 rr                sta     FAC+1
0016DAr 2  85 rr                sta     FAC+2
0016DCr 2  85 rr                sta     FAC+3
0016DEr 2               .ifndef CONFIG_SMALL
0016DEr 2                       sta     FAC+4
0016DEr 2               .endif
0016DEr 2  A8                   tay
0016DFr 2               RTS17:
0016DFr 2  60                   rts
0016E0r 2               
0016E0r 2               ; ----------------------------------------------------------------------------
0016E0r 2               ; CONVERT STRING TO FP VALUE IN FAC
0016E0r 2               ;
0016E0r 2               ; STRING POINTED TO BY TXTPTR
0016E0r 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
0016E0r 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
0016E0r 2               ; ----------------------------------------------------------------------------
0016E0r 2               FIN:
0016E0r 2  A0 00                ldy     #$00
0016E2r 2  A2 09                ldx     #SERLEN-TMPEXP
0016E4r 2               L3B6F:
0016E4r 2  94 rr                sty     TMPEXP,x
0016E6r 2  CA                   dex
0016E7r 2  10 FB                bpl     L3B6F
0016E9r 2  90 0F                bcc     FIN2
0016EBr 2               .ifdef SYM1
0016EBr 2                       cmp     #$26
0016EBr 2                       bne     LDABB
0016EBr 2                       jmp     LCDFE
0016EBr 2               LDABB:
0016EBr 2               .endif
0016EBr 2  C9 2D                cmp     #$2D
0016EDr 2  D0 04                bne     L3B7E
0016EFr 2  86 rr                stx     SERLEN
0016F1r 2  F0 04                beq     FIN1
0016F3r 2               L3B7E:
0016F3r 2  C9 2B                cmp     #$2B
0016F5r 2  D0 05                bne     FIN3
0016F7r 2               FIN1:
0016F7r 2  20 rr rr             jsr     CHRGET
0016FAr 2               FIN2:
0016FAr 2  90 5B                bcc     FIN9
0016FCr 2               FIN3:
0016FCr 2  C9 2E                cmp     #$2E
0016FEr 2  F0 2E                beq     FIN10
001700r 2  C9 45                cmp     #$45
001702r 2  D0 30                bne     FIN7
001704r 2  20 rr rr             jsr     CHRGET
001707r 2  90 17                bcc     FIN5
001709r 2  C9 A5                cmp     #TOKEN_MINUS
00170Br 2  F0 0E                beq     L3BA6
00170Dr 2  C9 2D                cmp     #$2D
00170Fr 2  F0 0A                beq     L3BA6
001711r 2  C9 A4                cmp     #TOKEN_PLUS
001713r 2  F0 08                beq     FIN4
001715r 2  C9 2B                cmp     #$2B
001717r 2  F0 04                beq     FIN4
001719r 2  D0 07                bne     FIN6
00171Br 2               L3BA6:
00171Br 2               .ifndef CONFIG_ROR_WORKAROUND
00171Br 2  66 rr                ror     EXPSGN
00171Dr 2               .else
00171Dr 2                       lda     #$00
00171Dr 2                       bcc     L3BAC
00171Dr 2                       lda     #$80
00171Dr 2               L3BAC:
00171Dr 2                       lsr     EXPSGN
00171Dr 2                       ora     EXPSGN
00171Dr 2                       sta     EXPSGN
00171Dr 2               .endif
00171Dr 2               FIN4:
00171Dr 2  20 rr rr             jsr     CHRGET
001720r 2               FIN5:
001720r 2  90 5C                bcc     GETEXP
001722r 2               FIN6:
001722r 2  24 rr                bit     EXPSGN
001724r 2  10 0E                bpl     FIN7
001726r 2  A9 00                lda     #$00
001728r 2  38                   sec
001729r 2  E5 rr                sbc     EXPON
00172Br 2  4C rr rr             jmp     FIN8
00172Er 2               
00172Er 2               ; ----------------------------------------------------------------------------
00172Er 2               ; FOUND A DECIMAL POINT
00172Er 2               ; ----------------------------------------------------------------------------
00172Er 2               FIN10:
00172Er 2               .ifndef CONFIG_ROR_WORKAROUND
00172Er 2  66 rr                ror     LOWTR
001730r 2               .else
001730r 2                       lda     #$00
001730r 2                       bcc     L3BC9
001730r 2                       lda     #$80
001730r 2               L3BC9:
001730r 2                       lsr     LOWTR
001730r 2                       ora     LOWTR
001730r 2                       sta     LOWTR
001730r 2               .endif
001730r 2  24 rr                bit     LOWTR
001732r 2  50 C3                bvc     FIN1
001734r 2               
001734r 2               ; ----------------------------------------------------------------------------
001734r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001734r 2               ; ----------------------------------------------------------------------------
001734r 2               FIN7:
001734r 2  A5 rr                lda     EXPON
001736r 2               FIN8:
001736r 2  38                   sec
001737r 2  E5 rr                sbc     INDX
001739r 2  85 rr                sta     EXPON
00173Br 2  F0 12                beq     L3BEE
00173Dr 2  10 09                bpl     L3BE7
00173Fr 2               L3BDE:
00173Fr 2  20 rr rr             jsr     DIV10
001742r 2  E6 rr                inc     EXPON
001744r 2  D0 F9                bne     L3BDE
001746r 2  F0 07                beq     L3BEE
001748r 2               L3BE7:
001748r 2  20 rr rr             jsr     MUL10
00174Br 2  C6 rr                dec     EXPON
00174Dr 2  D0 F9                bne     L3BE7
00174Fr 2               L3BEE:
00174Fr 2  A5 rr                lda     SERLEN
001751r 2  30 01                bmi     L3BF3
001753r 2  60                   rts
001754r 2               L3BF3:
001754r 2  4C rr rr             jmp     NEGOP
001757r 2               
001757r 2               ; ----------------------------------------------------------------------------
001757r 2               ; ACCUMULATE A DIGIT INTO FAC
001757r 2               ; ----------------------------------------------------------------------------
001757r 2               FIN9:
001757r 2  48                   pha
001758r 2  24 rr                bit     LOWTR
00175Ar 2  10 02                bpl     L3BFD
00175Cr 2  E6 rr                inc     INDX
00175Er 2               L3BFD:
00175Er 2  20 rr rr             jsr     MUL10
001761r 2  68                   pla
001762r 2  38                   sec
001763r 2  E9 30                sbc     #$30
001765r 2  20 rr rr             jsr     ADDACC
001768r 2  4C rr rr             jmp     FIN1
00176Br 2               
00176Br 2               ; ----------------------------------------------------------------------------
00176Br 2               ; ADD (A) TO FAC
00176Br 2               ; ----------------------------------------------------------------------------
00176Br 2               ADDACC:
00176Br 2  48                   pha
00176Cr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00176Fr 2  68                   pla
001770r 2  20 rr rr             jsr     FLOAT
001773r 2  A5 rr                lda     ARGSIGN
001775r 2  45 rr                eor     FACSIGN
001777r 2  85 rr                sta     SGNCPR
001779r 2  A6 rr                ldx     FAC
00177Br 2  4C rr rr             jmp     FADDT
00177Er 2               
00177Er 2               ; ----------------------------------------------------------------------------
00177Er 2               ; ACCUMULATE DIGIT OF EXPONENT
00177Er 2               ; ----------------------------------------------------------------------------
00177Er 2               GETEXP:
00177Er 2  A5 rr                lda     EXPON
001780r 2  C9 0A                cmp     #MAX_EXPON
001782r 2  90 09                bcc     L3C2C
001784r 2               .ifdef CONFIG_10A
001784r 2  A9 64                lda     #$64
001786r 2               .endif
001786r 2  24 rr                bit     EXPSGN
001788r 2               .ifdef CONFIG_10A
001788r 2  30 11                bmi     L3C3A
00178Ar 2               .else
00178Ar 2                       bmi     LDC70
00178Ar 2               .endif
00178Ar 2  4C rr rr             jmp     OVERFLOW
00178Dr 2               LDC70:
00178Dr 2               .ifndef CONFIG_10A
00178Dr 2                       lda     #$0B
00178Dr 2               .endif
00178Dr 2               L3C2C:
00178Dr 2  0A                   asl     a
00178Er 2  0A                   asl     a
00178Fr 2  18                   clc
001790r 2  65 rr                adc     EXPON
001792r 2  0A                   asl     a
001793r 2  18                   clc
001794r 2  A0 00                ldy     #$00
001796r 2  71 rr                adc     (TXTPTR),y
001798r 2  38                   sec
001799r 2  E9 30                sbc     #$30
00179Br 2               L3C3A:
00179Br 2  85 rr                sta     EXPON
00179Dr 2  4C rr rr             jmp     FIN4
0017A0r 2               
0017A0r 2               ; ----------------------------------------------------------------------------
0017A0r 2               .ifdef CONFIG_SMALL
0017A0r 2               ; these values are /1000 of what the labels say
0017A0r 2               CON_99999999_9:
0017A0r 2  91 43 4F F8          .byte   $91,$43,$4F,$F8
0017A4r 2               CON_999999999:
0017A4r 2  94 74 23 F7  		.byte   $94,$74,$23,$F7
0017A8r 2               CON_BILLION:
0017A8r 2  94 74 24 00          .byte   $94,$74,$24,$00
0017ACr 2               .else
0017ACr 2               CON_99999999_9:
0017ACr 2                       .byte   $9B,$3E,$BC,$1F,$FD
0017ACr 2               CON_999999999:
0017ACr 2               .ifndef CONFIG_10A
0017ACr 2                       .byte   $9E,$6E,$6B,$27,$FE
0017ACr 2               .else
0017ACr 2                       .byte   $9E,$6E,$6B,$27,$FD
0017ACr 2               .endif
0017ACr 2               CON_BILLION:
0017ACr 2                       .byte   $9E,$6E,$6B,$28,$00
0017ACr 2               .endif
0017ACr 2               
0017ACr 2               ; ----------------------------------------------------------------------------
0017ACr 2               ; PRINT "IN <LINE #>"
0017ACr 2               ; ----------------------------------------------------------------------------
0017ACr 2               INPRT:
0017ACr 2               .ifdef KBD
0017ACr 2                       jsr     LFE0B
0017ACr 2                       .byte	" in"
0017ACr 2                       .byte	0
0017ACr 2               .else
0017ACr 2  A9 rr                lda     #<QT_IN
0017AEr 2  A0 rr                ldy     #>QT_IN
0017B0r 2  20 rr rr             jsr     GOSTROUT2
0017B3r 2               .endif
0017B3r 2  A5 rr                lda     CURLIN+1
0017B5r 2  A6 rr                ldx     CURLIN
0017B7r 2               
0017B7r 2               ; ----------------------------------------------------------------------------
0017B7r 2               ; PRINT A,X AS DECIMAL INTEGER
0017B7r 2               ; ----------------------------------------------------------------------------
0017B7r 2               LINPRT:
0017B7r 2  85 rr                sta     FAC+1
0017B9r 2  86 rr                stx     FAC+2
0017BBr 2  A2 90                ldx     #$90
0017BDr 2  38                   sec
0017BEr 2  20 rr rr             jsr     FLOAT2
0017C1r 2  20 rr rr             jsr     FOUT
0017C4r 2               GOSTROUT2:
0017C4r 2  4C rr rr             jmp     STROUT
0017C7r 2               
0017C7r 2               ; ----------------------------------------------------------------------------
0017C7r 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
0017C7r 2               ; RETURN WITH (Y,A) POINTING AT STRING
0017C7r 2               ; ----------------------------------------------------------------------------
0017C7r 2               FOUT:
0017C7r 2  A0 01                ldy     #$01
0017C9r 2               
0017C9r 2               ; ----------------------------------------------------------------------------
0017C9r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
0017C9r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
0017C9r 2               ; (THIS IS USED AS A FLAG)
0017C9r 2               ; ----------------------------------------------------------------------------
0017C9r 2               FOUT1:
0017C9r 2  A9 20                lda     #$20
0017CBr 2  24 rr                bit     FACSIGN
0017CDr 2  10 02                bpl     L3C73
0017CFr 2  A9 2D                lda     #$2D
0017D1r 2               L3C73:
0017D1r 2  99 rr rr             sta     STACK2-1,y
0017D4r 2  85 rr                sta     FACSIGN
0017D6r 2  84 rr                sty     STRNG2
0017D8r 2  C8                   iny
0017D9r 2  A9 30                lda     #$30
0017DBr 2  A6 rr                ldx     FAC
0017DDr 2  D0 03                bne     L3C84
0017DFr 2  4C rr rr             jmp     FOUT4
0017E2r 2               L3C84:
0017E2r 2  A9 00                lda     #$00
0017E4r 2  E0 80                cpx     #$80
0017E6r 2  F0 02                beq     L3C8C
0017E8r 2  B0 09                bcs     L3C95
0017EAr 2               L3C8C:
0017EAr 2  A9 rr                lda     #<CON_BILLION
0017ECr 2  A0 rr                ldy     #>CON_BILLION
0017EEr 2  20 rr rr             jsr     FMULT
0017F1r 2               .ifdef CONFIG_SMALL
0017F1r 2  A9 FA                lda     #<-6 ; exponent adjustment
0017F3r 2               .else
0017F3r 2                       lda     #<-9
0017F3r 2               .endif
0017F3r 2               L3C95:
0017F3r 2  85 rr                sta     INDX
0017F5r 2               ; ----------------------------------------------------------------------------
0017F5r 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
0017F5r 2               ; ----------------------------------------------------------------------------
0017F5r 2               L3C97:
0017F5r 2  A9 rr                lda     #<CON_999999999
0017F7r 2  A0 rr                ldy     #>CON_999999999
0017F9r 2  20 rr rr             jsr     FCOMP
0017FCr 2  F0 1E                beq     L3CBE
0017FEr 2  10 12                bpl     L3CB4
001800r 2               L3CA2:
001800r 2  A9 rr                lda     #<CON_99999999_9
001802r 2  A0 rr                ldy     #>CON_99999999_9
001804r 2  20 rr rr             jsr     FCOMP
001807r 2  F0 02                beq     L3CAD
001809r 2  10 0E                bpl     L3CBB
00180Br 2               L3CAD:
00180Br 2  20 rr rr             jsr     MUL10
00180Er 2  C6 rr                dec     INDX
001810r 2  D0 EE                bne     L3CA2
001812r 2               L3CB4:
001812r 2  20 rr rr             jsr     DIV10
001815r 2  E6 rr                inc     INDX
001817r 2  D0 DC                bne     L3C97
001819r 2               L3CBB:
001819r 2  20 rr rr             jsr     FADDH
00181Cr 2               L3CBE:
00181Cr 2  20 rr rr             jsr     QINT
00181Fr 2               ; ----------------------------------------------------------------------------
00181Fr 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
00181Fr 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
00181Fr 2               ;
00181Fr 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
00181Fr 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
00181Fr 2               ; ----------------------------------------------------------------------------
00181Fr 2  A2 01                ldx     #$01
001821r 2  A5 rr                lda     INDX
001823r 2  18                   clc
001824r 2  69 07                adc     #3*BYTES_FP-5
001826r 2  30 09                bmi     L3CD3
001828r 2  C9 08                cmp     #3*BYTES_FP-4
00182Ar 2  B0 06                bcs     L3CD4
00182Cr 2  69 FF                adc     #$FF
00182Er 2  AA                   tax
00182Fr 2  A9 02                lda     #$02
001831r 2               L3CD3:
001831r 2  38                   sec
001832r 2               L3CD4:
001832r 2  E9 02                sbc     #$02
001834r 2  85 rr                sta     EXPON
001836r 2  86 rr                stx     INDX
001838r 2  8A                   txa
001839r 2  F0 02                beq     L3CDF
00183Br 2  10 13                bpl     L3CF2
00183Dr 2               L3CDF:
00183Dr 2  A4 rr                ldy     STRNG2
00183Fr 2  A9 2E                lda     #$2E
001841r 2  C8                   iny
001842r 2  99 rr rr             sta     STACK2-1,y
001845r 2  8A                   txa
001846r 2  F0 06                beq     L3CF0
001848r 2  A9 30                lda     #$30
00184Ar 2  C8                   iny
00184Br 2  99 rr rr             sta     STACK2-1,y
00184Er 2               L3CF0:
00184Er 2  84 rr                sty     STRNG2
001850r 2               ; ----------------------------------------------------------------------------
001850r 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001850r 2               ; ----------------------------------------------------------------------------
001850r 2               L3CF2:
001850r 2  A0 00                ldy     #$00
001852r 2               LDD3A:
001852r 2  A2 80                ldx     #$80
001854r 2               L3CF6:
001854r 2  A5 rr                lda     FAC_LAST
001856r 2  18                   clc
001857r 2               .ifndef CONFIG_SMALL
001857r 2                       adc     DECTBL+3,y
001857r 2                       sta     FAC+4
001857r 2                       lda     FAC+3
001857r 2               .endif
001857r 2  79 rr rr             adc     DECTBL+2,y
00185Ar 2  85 rr                sta     FAC+3
00185Cr 2  A5 rr                lda     FAC+2
00185Er 2  79 rr rr             adc     DECTBL+1,y
001861r 2  85 rr                sta     FAC+2
001863r 2  A5 rr                lda     FAC+1
001865r 2  79 rr rr             adc     DECTBL,y
001868r 2  85 rr                sta     FAC+1
00186Ar 2  E8                   inx
00186Br 2  B0 04                bcs     L3D1A
00186Dr 2  10 E5                bpl     L3CF6
00186Fr 2  30 02                bmi     L3D1C
001871r 2               L3D1A:
001871r 2  30 E1                bmi     L3CF6
001873r 2               L3D1C:
001873r 2  8A                   txa
001874r 2  90 04                bcc     L3D23
001876r 2  49 FF                eor     #$FF
001878r 2  69 0A                adc     #$0A
00187Ar 2               L3D23:
00187Ar 2  69 2F                adc     #$2F
00187Cr 2  C8                   iny
00187Dr 2  C8                   iny
00187Er 2  C8                   iny
00187Fr 2               .ifndef CONFIG_SMALL
00187Fr 2                       iny
00187Fr 2               .endif
00187Fr 2  84 rr                sty     VARPNT
001881r 2  A4 rr                ldy     STRNG2
001883r 2  C8                   iny
001884r 2  AA                   tax
001885r 2  29 7F                and     #$7F
001887r 2  99 rr rr             sta     STACK2-1,y
00188Ar 2  C6 rr                dec     INDX
00188Cr 2  D0 06                bne     L3D3E
00188Er 2  A9 2E                lda     #$2E
001890r 2  C8                   iny
001891r 2  99 rr rr             sta     STACK2-1,y
001894r 2               L3D3E:
001894r 2  84 rr                sty     STRNG2
001896r 2  A4 rr                ldy     VARPNT
001898r 2  8A                   txa
001899r 2  49 FF                eor     #$FF
00189Br 2  29 80                and     #$80
00189Dr 2  AA                   tax
00189Er 2  C0 12                cpy     #DECTBL_END-DECTBL
0018A0r 2               .ifdef CONFIG_CBM_ALL
0018A0r 2                       beq     LDD96
0018A0r 2                       cpy     #$3C ; XXX
0018A0r 2               .endif
0018A0r 2  D0 B2                bne     L3CF6
0018A2r 2               ; ----------------------------------------------------------------------------
0018A2r 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
0018A2r 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
0018A2r 2               ; DECIMAL POINT.
0018A2r 2               ; ----------------------------------------------------------------------------
0018A2r 2               LDD96:
0018A2r 2  A4 rr                ldy     STRNG2
0018A4r 2               L3D4E:
0018A4r 2  B9 rr rr             lda     STACK2-1,y
0018A7r 2  88                   dey
0018A8r 2  C9 30                cmp     #$30
0018AAr 2  F0 F8                beq     L3D4E
0018ACr 2  C9 2E                cmp     #$2E
0018AEr 2  F0 01                beq     L3D5B
0018B0r 2  C8                   iny
0018B1r 2               L3D5B:
0018B1r 2  A9 2B                lda     #$2B
0018B3r 2  A6 rr                ldx     EXPON
0018B5r 2  F0 2E                beq     L3D8F
0018B7r 2  10 08                bpl     L3D6B
0018B9r 2  A9 00                lda     #$00
0018BBr 2  38                   sec
0018BCr 2  E5 rr                sbc     EXPON
0018BEr 2  AA                   tax
0018BFr 2  A9 2D                lda     #$2D
0018C1r 2               L3D6B:
0018C1r 2  99 rr rr             sta     STACK2+1,y
0018C4r 2  A9 45                lda     #$45
0018C6r 2  99 rr rr             sta     STACK2,y
0018C9r 2  8A                   txa
0018CAr 2  A2 2F                ldx     #$2F
0018CCr 2  38                   sec
0018CDr 2               L3D77:
0018CDr 2  E8                   inx
0018CEr 2  E9 0A                sbc     #$0A
0018D0r 2  B0 FB                bcs     L3D77
0018D2r 2  69 3A                adc     #$3A
0018D4r 2  99 rr rr             sta     STACK2+3,y
0018D7r 2  8A                   txa
0018D8r 2  99 rr rr             sta     STACK2+2,y
0018DBr 2  A9 00                lda     #$00
0018DDr 2  99 rr rr             sta     STACK2+4,y
0018E0r 2  F0 08                beq     L3D94
0018E2r 2               FOUT4:
0018E2r 2  99 rr rr             sta     STACK2-1,y
0018E5r 2               L3D8F:
0018E5r 2  A9 00                lda     #$00
0018E7r 2  99 rr rr             sta     STACK2,y
0018EAr 2               L3D94:
0018EAr 2  A9 rr                lda     #<STACK2
0018ECr 2  A0 rr                ldy     #>STACK2
0018EEr 2  60                   rts
0018EFr 2               
0018EFr 2               ; ----------------------------------------------------------------------------
0018EFr 2               CON_HALF:
0018EFr 2               .ifdef CONFIG_SMALL
0018EFr 2  80 00 00 00          .byte   $80,$00,$00,$00
0018F3r 2               .else
0018F3r 2                       .byte   $80,$00,$00,$00,$00
0018F3r 2               .endif
0018F3r 2               
0018F3r 2               ; ----------------------------------------------------------------------------
0018F3r 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
0018F3r 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
0018F3r 2               ; ----------------------------------------------------------------------------
0018F3r 2               DECTBL:
0018F3r 2               .ifdef CONFIG_SMALL
0018F3r 2  FE 79 60             .byte   $FE,$79,$60 ; -100000
0018F6r 2  00 27 10     		.byte	$00,$27,$10 ; 10000
0018F9r 2  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
0018FCr 2  00 00 64     		.byte	$00,$00,$64 ; 100
0018FFr 2  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
001902r 2  00 00 01     		.byte	$00,$00,$01 ; 1
001905r 2               .else
001905r 2               		.byte	$FA,$0A,$1F,$00	; -100000000
001905r 2               		.byte	$00,$98,$96,$80	; 10000000
001905r 2               		.byte	$FF,$F0,$BD,$C0	; -1000000
001905r 2               		.byte	$00,$01,$86,$A0	; 100000
001905r 2               		.byte	$FF,$FF,$D8,$F0	; -10000
001905r 2               		.byte   $00,$00,$03,$E8	; 1000
001905r 2               		.byte	$FF,$FF,$FF,$9C	; -100
001905r 2               		.byte   $00,$00,$00,$0A	; 10
001905r 2               		.byte	$FF,$FF,$FF,$FF	; -1
001905r 2               .endif
001905r 2               DECTBL_END:
001905r 2               .ifdef CONFIG_CBM_ALL
001905r 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001905r 2               		.byte	$00,$03,$4B,$C0
001905r 2               		.byte	$FF,$FF,$73,$60
001905r 2               		.byte	$00,$00,$0E,$10
001905r 2               		.byte	$FF,$FF,$FD,$A8
001905r 2               		.byte	$00,$00,$00,$3C
001905r 2               .endif
001905r 2               .ifdef CONFIG_2
001905r 2               C_ZERO = CON_HALF + 2
001905r 2               .endif
001905r 2               
001905r 2               ; ----------------------------------------------------------------------------
001905r 2               ; "SQR" FUNCTION
001905r 2               ; ----------------------------------------------------------------------------
001905r 2               SQR:
001905r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001908r 2  A9 rr                lda     #<CON_HALF
00190Ar 2  A0 rr                ldy     #>CON_HALF
00190Cr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00190Fr 2               
00190Fr 2               ; ----------------------------------------------------------------------------
00190Fr 2               ; EXPONENTIATION OPERATION
00190Fr 2               ;
00190Fr 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
00190Fr 2               ; ----------------------------------------------------------------------------
00190Fr 2               FPWRT:
00190Fr 2  F0 63                beq     EXP
001911r 2  A5 rr                lda     ARG
001913r 2  D0 03                bne     L3DD5
001915r 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001918r 2               L3DD5:
001918r 2  A2 rr                ldx     #TEMP3
00191Ar 2  A0 00                ldy     #$00
00191Cr 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
00191Fr 2  A5 rr                lda     ARGSIGN
001921r 2  10 0F                bpl     L3DEF
001923r 2  20 rr rr             jsr     INT
001926r 2  A9 rr                lda     #TEMP3
001928r 2  A0 00                ldy     #$00
00192Ar 2  20 rr rr             jsr     FCOMP
00192Dr 2  D0 03                bne     L3DEF
00192Fr 2  98                   tya
001930r 2  A4 rr                ldy     CHARAC
001932r 2               L3DEF:
001932r 2  20 rr rr             jsr     MFA
001935r 2  98                   tya
001936r 2  48                   pha
001937r 2  20 rr rr             jsr     LOG
00193Ar 2  A9 rr                lda     #TEMP3
00193Cr 2  A0 00                ldy     #$00
00193Er 2  20 rr rr             jsr     FMULT
001941r 2  20 rr rr             jsr     EXP
001944r 2  68                   pla
001945r 2  4A                   lsr     a
001946r 2  90 0A                bcc     L3E0F
001948r 2               
001948r 2               ; ----------------------------------------------------------------------------
001948r 2               ; NEGATE VALUE IN FAC
001948r 2               ; ----------------------------------------------------------------------------
001948r 2               NEGOP:
001948r 2  A5 rr                lda     FAC
00194Ar 2  F0 06                beq     L3E0F
00194Cr 2  A5 rr                lda     FACSIGN
00194Er 2  49 FF                eor     #$FF
001950r 2  85 rr                sta     FACSIGN
001952r 2               L3E0F:
001952r 2  60                   rts
001953r 2               
001953r 2               ; ----------------------------------------------------------------------------
001953r 2               .ifdef CONFIG_SMALL
001953r 2               CON_LOG_E:
001953r 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B
001957r 2               POLY_EXP:
001957r 2  06           		.byte	$06
001958r 2  74 63 90 8C  		.byte	$74,$63,$90,$8C
00195Cr 2  77 23 0C AB  		.byte	$77,$23,$0C,$AB
001960r 2  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
001964r 2  7C 63 42 80  		.byte	$7C,$63,$42,$80
001968r 2  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
00196Cr 2  80 31 72 15  		.byte	$80,$31,$72,$15
001970r 2  81 00 00 00  		.byte	$81,$00,$00,$00
001974r 2               .else
001974r 2               CON_LOG_E:
001974r 2                       .byte   $81,$38,$AA,$3B,$29
001974r 2               POLY_EXP:
001974r 2                       .byte   $07
001974r 2               		.byte	$71,$34,$58,$3E,$56
001974r 2               		.byte	$74,$16,$7E,$B3,$1B
001974r 2               		.byte	$77,$2F,$EE,$E3,$85
001974r 2                       .byte   $7A,$1D,$84,$1C,$2A
001974r 2               		.byte	$7C,$63,$59,$58,$0A
001974r 2               		.byte	$7E,$75,$FD,$E7,$C6
001974r 2               		.byte	$80,$31,$72,$18,$10
001974r 2               		.byte	$81,$00,$00,$00,$00
001974r 2               .endif
001974r 2               
001974r 2               ; ----------------------------------------------------------------------------
001974r 2               ; "EXP" FUNCTION
001974r 2               ;
001974r 2               ; FAC = E ^ FAC
001974r 2               ; ----------------------------------------------------------------------------
001974r 2               EXP:
001974r 2  A9 rr                lda     #<CON_LOG_E
001976r 2  A0 rr                ldy     #>CON_LOG_E
001978r 2  20 rr rr             jsr     FMULT
00197Br 2  A5 rr                lda     FACEXTENSION
00197Dr 2  69 50                adc     #$50
00197Fr 2  90 03                bcc     L3E4E
001981r 2  20 rr rr             jsr     INCREMENT_MANTISSA
001984r 2               L3E4E:
001984r 2  85 rr                sta     ARGEXTENSION
001986r 2  20 rr rr             jsr     MAF
001989r 2  A5 rr                lda     FAC
00198Br 2  C9 88                cmp     #$88
00198Dr 2  90 03                bcc     L3E5C
00198Fr 2               L3E59:
00198Fr 2  20 rr rr             jsr     OUTOFRNG
001992r 2               L3E5C:
001992r 2  20 rr rr             jsr     INT
001995r 2  A5 rr                lda     CHARAC
001997r 2  18                   clc
001998r 2  69 81                adc     #$81
00199Ar 2  F0 F3                beq     L3E59
00199Cr 2  38                   sec
00199Dr 2  E9 01                sbc     #$01
00199Fr 2  48                   pha
0019A0r 2  A2 04                ldx     #BYTES_FP
0019A2r 2               L3E6C:
0019A2r 2  B5 rr                lda     ARG,x
0019A4r 2  B4 rr                ldy     FAC,x
0019A6r 2  95 rr                sta     FAC,x
0019A8r 2  94 rr                sty     ARG,x
0019AAr 2  CA                   dex
0019ABr 2  10 F5                bpl     L3E6C
0019ADr 2  A5 rr                lda     ARGEXTENSION
0019AFr 2  85 rr                sta     FACEXTENSION
0019B1r 2  20 rr rr             jsr     FSUBT
0019B4r 2  20 rr rr             jsr     NEGOP
0019B7r 2  A9 rr                lda     #<POLY_EXP
0019B9r 2  A0 rr                ldy     #>POLY_EXP
0019BBr 2  20 rr rr             jsr     POLYNOMIAL
0019BEr 2  A9 00                lda     #$00
0019C0r 2  85 rr                sta     SGNCPR
0019C2r 2  68                   pla
0019C3r 2  20 rr rr             jsr     ADD_EXPONENTS1
0019C6r 2  60                   rts
0019C7r 2               
0019C7r 2               ; ----------------------------------------------------------------------------
0019C7r 2               ; ODD POLYNOMIAL SUBROUTINE
0019C7r 2               ;
0019C7r 2               ; F(X) = X * P(X^2)
0019C7r 2               ;
0019C7r 2               ; WHERE:  X IS VALUE IN FAC
0019C7r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
0019C7r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
0019C7r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
0019C7r 2               ;
0019C7r 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
0019C7r 2               ; ----------------------------------------------------------------------------
0019C7r 2               POLYNOMIAL_ODD:
0019C7r 2  85 rr                sta     STRNG2
0019C9r 2  84 rr                sty     STRNG2+1
0019CBr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
0019CEr 2  A9 rr                lda     #TEMP1X
0019D0r 2  20 rr rr             jsr     FMULT
0019D3r 2  20 rr rr             jsr     SERMAIN
0019D6r 2  A9 rr                lda     #TEMP1X
0019D8r 2  A0 00                ldy     #$00
0019DAr 2  4C rr rr             jmp     FMULT
0019DDr 2               
0019DDr 2               ; ----------------------------------------------------------------------------
0019DDr 2               ; NORMAL POLYNOMIAL SUBROUTINE
0019DDr 2               ;
0019DDr 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
0019DDr 2               ;
0019DDr 2               ; WHERE:  X IS VALUE IN FAC
0019DDr 2               ;	Y,A POINTS AT COEFFICIENT TABLE
0019DDr 2               ;	FIRST BYTE OF COEFF. TABLE IS N
0019DDr 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
0019DDr 2               ; ----------------------------------------------------------------------------
0019DDr 2               POLYNOMIAL:
0019DDr 2  85 rr                sta     STRNG2
0019DFr 2  84 rr                sty     STRNG2+1
0019E1r 2               SERMAIN:
0019E1r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
0019E4r 2  B1 rr                lda     (STRNG2),y
0019E6r 2  85 rr                sta     SERLEN
0019E8r 2  A4 rr                ldy     STRNG2
0019EAr 2  C8                   iny
0019EBr 2  98                   tya
0019ECr 2  D0 02                bne     L3EBA
0019EEr 2  E6 rr                inc     STRNG2+1
0019F0r 2               L3EBA:
0019F0r 2  85 rr                sta     STRNG2
0019F2r 2  A4 rr                ldy     STRNG2+1
0019F4r 2               L3EBE:
0019F4r 2  20 rr rr             jsr     FMULT
0019F7r 2  A5 rr                lda     STRNG2
0019F9r 2  A4 rr                ldy     STRNG2+1
0019FBr 2  18                   clc
0019FCr 2  69 04                adc     #BYTES_FP
0019FEr 2  90 01                bcc     L3ECB
001A00r 2  C8                   iny
001A01r 2               L3ECB:
001A01r 2  85 rr                sta     STRNG2
001A03r 2  84 rr                sty     STRNG2+1
001A05r 2  20 rr rr             jsr     FADD
001A08r 2  A9 rr                lda     #TEMP2
001A0Ar 2  A0 00                ldy     #$00
001A0Cr 2  C6 rr                dec     SERLEN
001A0Er 2  D0 E4                bne     L3EBE
001A10r 2               RTS19:
001A10r 2  60                   rts
001A11r 2               
001A11r 1               .include "chrget.s"
001A11r 2               .ifndef DB6502
001A11r 2               .segment "CHRGET"
001A11r 2               RAMSTART1:
001A11r 2               GENERIC_CHRGET:
001A11r 2                       inc     TXTPTR
001A11r 2                       bne     GENERIC_CHRGOT
001A11r 2                       inc     TXTPTR+1
001A11r 2               GENERIC_CHRGOT:
001A11r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
001A11r 2                       lda     $EA60
001A11r 2               .ifdef KBD
001A11r 2                       jsr     LF430
001A11r 2               .endif
001A11r 2                       cmp     #$3A
001A11r 2                       bcs     L4058
001A11r 2               GENERIC_CHRGOT2:
001A11r 2                       cmp     #$20
001A11r 2                       beq     GENERIC_CHRGET
001A11r 2                       sec
001A11r 2                       sbc     #$30
001A11r 2                       sec
001A11r 2                       sbc     #$D0
001A11r 2               L4058:
001A11r 2                       rts
001A11r 2               .else
001A11r 2               .segment "CODE"
001A11r 2               CHRGET:
001A11r 2  E6 rr                inc     TXTPTR
001A13r 2  D0 02                bne     CHRGOT
001A15r 2  E6 rr                inc     TXTPTR+1
001A17r 2               CHRGOT:
001A17r 2  B2 rr                lda     (TXTPTR)
001A19r 2  C9 3A                cmp     #$3A
001A1Br 2  B0 0A                bcs     L4058
001A1Dr 2               CHRGOT2:
001A1Dr 2  C9 20                cmp     #$20
001A1Fr 2  F0 F0                beq     CHRGET
001A21r 2  38                   sec
001A22r 2  E9 30                sbc     #$30
001A24r 2  38                   sec
001A25r 2  E9 D0                sbc     #$D0
001A27r 2               L4058:
001A27r 2  60                   rts
001A28r 2               .endif
001A28r 2               
001A28r 1               .include "rnd.s"
001A28r 2               .segment "CODE"
001A28r 2               
001A28r 2               ; ----------------------------------------------------------------------------
001A28r 2               ; "RND" FUNCTION
001A28r 2               ; ----------------------------------------------------------------------------
001A28r 2               
001A28r 2               .ifdef KBD
001A28r 2               RND:
001A28r 2                       ldx     #$10
001A28r 2                       jsr     SIGN
001A28r 2                       beq     LFC26
001A28r 2                       bmi     LFC10
001A28r 2                       lda     RNDSEED
001A28r 2                       ldy     RNDSEED+1
001A28r 2               LFBFA:
001A28r 2                       sta     FAC+2
001A28r 2                       sty     FAC+1
001A28r 2               LFBFE:
001A28r 2                       asl     a
001A28r 2                       asl     a
001A28r 2                       eor     FAC+2
001A28r 2                       asl     a
001A28r 2                       eor     FAC+1
001A28r 2                       asl     a
001A28r 2                       asl     a
001A28r 2                       asl     a
001A28r 2                       asl     a
001A28r 2                       eor     FAC+1
001A28r 2                       asl     a
001A28r 2                       rol     FAC+2
001A28r 2                       rol     FAC+1
001A28r 2               LFC10:
001A28r 2                       lda     FAC+2
001A28r 2                       dex
001A28r 2                       bne     LFBFE
001A28r 2                       sta     RNDSEED
001A28r 2                       sta     FAC+3
001A28r 2                       lda     FAC+1
001A28r 2                       sta     RNDSEED+1
001A28r 2                       lda     #$80
001A28r 2                       sta     FAC
001A28r 2                       stx     FACSIGN
001A28r 2                       jmp     NORMALIZE_FAC2
001A28r 2               LFC26:
001A28r 2                       ldy     $03CA
001A28r 2                       lda     $03C7
001A28r 2                       ora     #$01
001A28r 2               GOMOVMF:
001A28r 2                       bne     LFBFA
001A28r 2                       .byte   $F0
001A28r 2               .else
001A28r 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001A28r 2               ; (non CONFIG_SMALL)
001A28r 2               CONRND1:
001A28r 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001A2Cr 2               CONRND2:
001A2Cr 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001A30r 2               RND:
001A30r 2  20 rr rr             jsr     SIGN
001A33r 2               .ifdef CONFIG_CBM_ALL
001A33r 2                       bmi     L3F01
001A33r 2                       bne     LDF63
001A33r 2                       lda     ENTROPY
001A33r 2                       sta     FAC+1
001A33r 2                       lda     ENTROPY+4
001A33r 2                       sta     FAC+2
001A33r 2                       lda     ENTROPY+1
001A33r 2                       sta     FAC+3
001A33r 2                       lda     ENTROPY+5
001A33r 2                       sta     FAC+4
001A33r 2                       jmp     LDF88
001A33r 2               LDF63:
001A33r 2               .else
001A33r 2  AA                   tax
001A34r 2  30 18                bmi     L3F01
001A36r 2               .endif
001A36r 2  A9 rr                lda     #<RNDSEED
001A38r 2  A0 rr                ldy     #>RNDSEED
001A3Ar 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001A3Dr 2               .ifndef CONFIG_CBM_ALL
001A3Dr 2  8A                   txa
001A3Er 2  F0 D0                beq     RTS19
001A40r 2               .endif
001A40r 2  A9 rr                lda     #<CONRND1
001A42r 2  A0 rr                ldy     #>CONRND1
001A44r 2  20 rr rr             jsr     FMULT
001A47r 2  A9 rr                lda     #<CONRND2
001A49r 2  A0 rr                ldy     #>CONRND2
001A4Br 2  20 rr rr             jsr     FADD
001A4Er 2               L3F01:
001A4Er 2  A6 rr                ldx     FAC_LAST
001A50r 2  A5 rr                lda     FAC+1
001A52r 2  85 rr                sta     FAC_LAST
001A54r 2  86 rr                stx     FAC+1
001A56r 2               .ifdef CONFIG_CBM_ALL
001A56r 2                       ldx     FAC+2
001A56r 2                       lda     FAC+3
001A56r 2                       sta     FAC+2
001A56r 2                       stx     FAC+3
001A56r 2               LDF88:
001A56r 2               .endif
001A56r 2  A9 00                lda     #$00
001A58r 2  85 rr                sta     FACSIGN
001A5Ar 2  A5 rr                lda     FAC
001A5Cr 2  85 rr                sta     FACEXTENSION
001A5Er 2  A9 80                lda     #$80
001A60r 2  85 rr                sta     FAC
001A62r 2  20 rr rr             jsr     NORMALIZE_FAC2
001A65r 2  A2 rr                ldx     #<RNDSEED
001A67r 2  A0 rr                ldy     #>RNDSEED
001A69r 2               GOMOVMF:
001A69r 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001A6Cr 2               .endif
001A6Cr 2               
001A6Cr 2               .ifndef DB6502
001A6Cr 2               .segment "CHRGET"
001A6Cr 2               .else
001A6Cr 2               .segment "RODATA"
000000r 2               .endif
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000000r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000000r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000000r 2               ; (on all non-CONFIG_SMALL)
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               GENERIC_RNDSEED:
000000r 2               .ifndef KBD
000000r 2               ; random number seed
000000r 2                 .ifdef CONFIG_SMALL
000000r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52
000004r 2                 .else
000004r 2                   .ifdef CONFIG_11
000004r 2                       .byte   $80,$4F,$C7,$52,$58
000004r 2                   .else
000004r 2                       .byte   $80,$4F,$C7,$52,$59
000004r 2                   .endif
000004r 2                 .endif
000004r 2               .endif
000004r 2               GENERIC_CHRGET_END:
000004r 2               
000004r 1               .include "trig.s"
000004r 2               .segment "CODE"
001A6Cr 2               
001A6Cr 2               .ifndef SYM1
001A6Cr 2               SIN_COS_TAN_ATN:
001A6Cr 2               ; ----------------------------------------------------------------------------
001A6Cr 2               ; "COS" FUNCTION
001A6Cr 2               ; ----------------------------------------------------------------------------
001A6Cr 2               COS:
001A6Cr 2  A9 rr                lda     #<CON_PI_HALF
001A6Er 2  A0 rr                ldy     #>CON_PI_HALF
001A70r 2  20 rr rr             jsr     FADD
001A73r 2               
001A73r 2               ; ----------------------------------------------------------------------------
001A73r 2               ; "SIN" FUNCTION
001A73r 2               ; ----------------------------------------------------------------------------
001A73r 2               SIN:
001A73r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A76r 2  A9 rr                lda     #<CON_PI_DOUB
001A78r 2  A0 rr                ldy     #>CON_PI_DOUB
001A7Ar 2  A6 rr                ldx     ARGSIGN
001A7Cr 2  20 rr rr             jsr     DIV
001A7Fr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A82r 2  20 rr rr             jsr     INT
001A85r 2  A9 00                lda     #$00
001A87r 2  85 rr                sta     STRNG1
001A89r 2  20 rr rr             jsr     FSUBT
001A8Cr 2               ; ----------------------------------------------------------------------------
001A8Cr 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001A8Cr 2               ;
001A8Cr 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001A8Cr 2               ;
001A8Cr 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001A8Cr 2               ; ----------------------------------------------------------------------------
001A8Cr 2  A9 rr                lda     #<QUARTER
001A8Er 2  A0 rr                ldy     #>QUARTER
001A90r 2  20 rr rr             jsr     FSUB
001A93r 2  A5 rr                lda     FACSIGN
001A95r 2  48                   pha
001A96r 2  10 0D                bpl     SIN1
001A98r 2  20 rr rr             jsr     FADDH
001A9Br 2  A5 rr                lda     FACSIGN
001A9Dr 2  30 09                bmi     L3F5B
001A9Fr 2  A5 rr                lda     CPRMASK
001AA1r 2  49 FF                eor     #$FF
001AA3r 2  85 rr                sta     CPRMASK
001AA5r 2               ; ----------------------------------------------------------------------------
001AA5r 2               ; IF FALL THRU, RANGE IS 0...1/2
001AA5r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001AA5r 2               ; ----------------------------------------------------------------------------
001AA5r 2               SIN1:
001AA5r 2  20 rr rr             jsr     NEGOP
001AA8r 2               ; ----------------------------------------------------------------------------
001AA8r 2               ; IF FALL THRU, RANGE IS -1/2...0
001AA8r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001AA8r 2               ; ----------------------------------------------------------------------------
001AA8r 2               L3F5B:
001AA8r 2  A9 rr                lda     #<QUARTER
001AAAr 2  A0 rr                ldy     #>QUARTER
001AACr 2  20 rr rr             jsr     FADD
001AAFr 2  68                   pla
001AB0r 2  10 03                bpl     L3F68
001AB2r 2  20 rr rr             jsr     NEGOP
001AB5r 2               L3F68:
001AB5r 2  A9 rr                lda     #<POLY_SIN
001AB7r 2  A0 rr                ldy     #>POLY_SIN
001AB9r 2  4C rr rr             jmp     POLYNOMIAL_ODD
001ABCr 2               
001ABCr 2               ; ----------------------------------------------------------------------------
001ABCr 2               ; "TAN" FUNCTION
001ABCr 2               ;
001ABCr 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001ABCr 2               ; ----------------------------------------------------------------------------
001ABCr 2               TAN:
001ABCr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001ABFr 2  A9 00                lda     #$00
001AC1r 2  85 rr                sta     CPRMASK
001AC3r 2  20 rr rr             jsr     SIN
001AC6r 2  A2 rr                ldx     #TEMP3
001AC8r 2  A0 00                ldy     #$00
001ACAr 2  20 rr rr             jsr     GOMOVMF
001ACDr 2  A9 rr                lda     #TEMP1+(5-BYTES_FP)
001ACFr 2  A0 00                ldy     #$00
001AD1r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001AD4r 2  A9 00                lda     #$00
001AD6r 2  85 rr                sta     FACSIGN
001AD8r 2  A5 rr                lda     CPRMASK
001ADAr 2  20 rr rr             jsr     TAN1
001ADDr 2  A9 rr                lda     #TEMP3
001ADFr 2  A0 00                ldy     #$00
001AE1r 2  4C rr rr             jmp     FDIV
001AE4r 2               TAN1:
001AE4r 2  48                   pha
001AE5r 2  4C rr rr             jmp     SIN1
001AE8r 2               
001AE8r 2               ; ----------------------------------------------------------------------------
001AE8r 2               .ifdef CONFIG_SMALL
001AE8r 2               CON_PI_HALF:
001AE8r 2  81 49 0F DB          .byte   $81,$49,$0F,$DB
001AECr 2               CON_PI_DOUB:
001AECr 2  83 49 0F DB          .byte   $83,$49,$0F,$DB
001AF0r 2               QUARTER:
001AF0r 2  7F 00 00 00          .byte   $7F,$00,$00,$00
001AF4r 2               POLY_SIN:
001AF4r 2  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001AF8r 2  FB 87 99 26  
001AFCr 2  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001B00r 2  58 86 A5 5D  
001B04r 2  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
001B08r 2  DB           
001B09r 2               .else
001B09r 2               CON_PI_HALF:
001B09r 2                       .byte   $81,$49,$0F,$DA,$A2
001B09r 2               CON_PI_DOUB:
001B09r 2                       .byte   $83,$49,$0F,$DA,$A2
001B09r 2               QUARTER:
001B09r 2                       .byte   $7F,$00,$00,$00,$00
001B09r 2               POLY_SIN:
001B09r 2                       .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001B09r 2                       .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001B09r 2                       .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001B09r 2                       .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001B09r 2                 .ifndef CONFIG_11
001B09r 2               ; no easter egg text before BASIC 1.1
001B09r 2                 .elseif !.def(CONFIG_2A)
001B09r 2               ; ASCII encoded easter egg
001B09r 2               MICROSOFT:
001B09r 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001B09r 2                       .byte   $CE,$CA
001B09r 2                 .else
001B09r 2               ; PET encoded easter egg text since CBM2
001B09r 2               MICROSOFT:
001B09r 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001B09r 2                       .byte   $89,$CD
001B09r 2                 .endif
001B09r 2               .endif
001B09r 2               
001B09r 2               .ifndef AIM65
001B09r 2               ; ----------------------------------------------------------------------------
001B09r 2               ; "ATN" FUNCTION
001B09r 2               ; ----------------------------------------------------------------------------
001B09r 2               ATN:
001B09r 2  A5 rr                lda     FACSIGN
001B0Br 2  48                   pha
001B0Cr 2  10 03                bpl     L3FDB
001B0Er 2  20 rr rr             jsr     NEGOP
001B11r 2               L3FDB:
001B11r 2  A5 rr                lda     FAC
001B13r 2  48                   pha
001B14r 2  C9 81                cmp     #$81
001B16r 2  90 07                bcc     L3FE9
001B18r 2  A9 rr                lda     #<CON_ONE
001B1Ar 2  A0 rr                ldy     #>CON_ONE
001B1Cr 2  20 rr rr             jsr     FDIV
001B1Fr 2               ; ----------------------------------------------------------------------------
001B1Fr 2               ; 0 <= X <= 1
001B1Fr 2               ; 0 <= ATN(X) <= PI/8
001B1Fr 2               ; ----------------------------------------------------------------------------
001B1Fr 2               L3FE9:
001B1Fr 2  A9 rr                lda     #<POLY_ATN
001B21r 2  A0 rr                ldy     #>POLY_ATN
001B23r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001B26r 2  68                   pla
001B27r 2  C9 81                cmp     #$81
001B29r 2  90 07                bcc     L3FFC
001B2Br 2  A9 rr                lda     #<CON_PI_HALF
001B2Dr 2  A0 rr                ldy     #>CON_PI_HALF
001B2Fr 2  20 rr rr             jsr     FSUB
001B32r 2               L3FFC:
001B32r 2  68                   pla
001B33r 2  10 03                bpl     L4002
001B35r 2  4C rr rr             jmp     NEGOP
001B38r 2               L4002:
001B38r 2  60                   rts
001B39r 2               
001B39r 2               ; ----------------------------------------------------------------------------
001B39r 2               POLY_ATN:
001B39r 2               .ifdef CONFIG_SMALL
001B39r 2  08                   .byte   $08
001B3Ar 2  78 3A C5 37  		.byte	$78,$3A,$C5,$37
001B3Er 2  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
001B42r 2  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
001B46r 2  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
001B4Ar 2  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
001B4Er 2  7E 91 72 00  		.byte	$7E,$91,$72,$00
001B52r 2  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
001B56r 2  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
001B5Ar 2  81 00 00 00  		.byte	$81,$00,$00,$00
001B5Er 2               .else
001B5Er 2                       .byte   $0B
001B5Er 2               		.byte	$76,$B3,$83,$BD,$D3
001B5Er 2               		.byte	$79,$1E,$F4,$A6,$F5
001B5Er 2               		.byte	$7B,$83,$FC,$B0,$10
001B5Er 2                       .byte   $7C,$0C,$1F,$67,$CA
001B5Er 2               		.byte	$7C,$DE,$53,$CB,$C1
001B5Er 2               		.byte	$7D,$14,$64,$70,$4C
001B5Er 2               		.byte	$7D,$B7,$EA,$51,$7A
001B5Er 2               		.byte	$7D,$63,$30,$88,$7E
001B5Er 2               		.byte	$7E,$92,$44,$99,$3A
001B5Er 2               		.byte	$7E,$4C,$CC,$91,$C7
001B5Er 2               		.byte	$7F,$AA,$AA,$AA,$13
001B5Er 2                       .byte   $81,$00,$00,$00,$00
001B5Er 2               .endif
001B5Er 2               
001B5Er 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001B5Er 2               		.byte	$00 ; XXX
001B5Er 2               .endif
001B5Er 2               .endif
001B5Er 2               .endif
001B5Er 2               
001B5Er 1               .include "init.s"
001B5Er 2               .ifndef DB6502
001B5Er 2               .segment "INIT"
001B5Er 2               .else
001B5Er 2               .segment "CODE"
001B5Er 2               .endif
001B5Er 2               
001B5Er 2               .ifdef KBD
001B5Er 2               FNDLIN2:
001B5Er 2                       php
001B5Er 2                       jmp     FNDLIN
001B5Er 2               .endif
001B5Er 2               
001B5Er 2               ; ----------------------------------------------------------------------------
001B5Er 2               PR_WRITTEN_BY:
001B5Er 2               .ifndef KBD
001B5Er 2                 .ifndef CONFIG_CBM_ALL
001B5Er 2                   .ifndef AIM65
001B5Er 2                     .ifndef SYM1
001B5Er 2  A9 rr                lda     #<QT_WRITTEN_BY
001B60r 2  A0 rr                ldy     #>QT_WRITTEN_BY
001B62r 2  20 rr rr             jsr     STROUT
001B65r 2                     .endif
001B65r 2                   .endif
001B65r 2                 .endif
001B65r 2               .endif
001B65r 2               COLD_START:
001B65r 2               .ifdef SYM1
001B65r 2                       jsr     ACCESS
001B65r 2               .endif
001B65r 2               .ifdef KBD
001B65r 2                       lda     #<LFD81
001B65r 2                       sta     $03A0
001B65r 2                       lda     #>LFD81
001B65r 2                       sta     $03A1
001B65r 2                       lda     #$20
001B65r 2                       sta     $0480
001B65r 2                       lda     $0352
001B65r 2                       sta     $04
001B65r 2                       lda     $0353
001B65r 2                       sta     $05
001B65r 2               .else
001B65r 2                 .ifndef CBM2
001B65r 2  A2 FF                ldx     #$FF
001B67r 2  86 rr                stx     CURLIN+1
001B69r 2                 .endif
001B69r 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
001B69r 2  A2 FB                ldx     #$FB
001B6Br 2                 .elseif .def(AIM65)
001B6Br 2                       ldx     #$FE
001B6Br 2                 .endif
001B6Br 2                 .ifdef DB6502
001B6Br 2  BA                   tsx
001B6Cr 2  86 rr                stx INIT_STACK
001B6Er 2                 .else
001B6Er 2                       txs
001B6Er 2                 .endif
001B6Er 2                 .ifndef CONFIG_CBM_ALL
001B6Er 2  A9 rr                lda     #<COLD_START
001B70r 2  A0 rr                ldy     #>COLD_START
001B72r 2  85 rr                sta     GORESTART+1
001B74r 2  84 rr                sty     GORESTART+2
001B76r 2                   .ifndef AIM65
001B76r 2  85 rr                sta     GOSTROUT+1
001B78r 2  84 rr                sty     GOSTROUT+2
001B7Ar 2  A9 rr                lda     #<AYINT
001B7Cr 2  A0 rr                ldy     #>AYINT
001B7Er 2  85 rr                sta     GOAYINT
001B80r 2  84 rr                sty     GOAYINT+1
001B82r 2  A9 rr                lda     #<GIVAYF
001B84r 2  A0 rr                ldy     #>GIVAYF
001B86r 2  85 rr                sta     GOGIVEAYF
001B88r 2  84 rr                sty     GOGIVEAYF+1
001B8Ar 2                   .endif
001B8Ar 2                 .endif
001B8Ar 2  A9 4C                lda     #$4C
001B8Cr 2                 .ifdef CONFIG_CBM_ALL
001B8Cr 2                       sta     JMPADRS
001B8Cr 2                 .endif
001B8Cr 2  85 rr                sta     GORESTART
001B8Er 2                 .ifdef AIM65
001B8Er 2                       sta     JMPADRS
001B8Er 2                       sta     ATN
001B8Er 2                       sta     GOSTROUT
001B8Er 2                 .else
001B8Er 2                 .ifndef CONFIG_CBM_ALL
001B8Er 2  85 rr                sta     GOSTROUT
001B90r 2  85 rr                sta     JMPADRS
001B92r 2                 .endif
001B92r 2                 .ifdef SYM1
001B92r 2                       sta     USR1
001B92r 2                       sta     USR3
001B92r 2                       sta     USR2
001B92r 2                 .endif
001B92r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
001B92r 2  85 0A                sta     USR
001B94r 2                 .endif
001B94r 2                 .endif
001B94r 2               
001B94r 2                 .ifndef CONFIG_RAM
001B94r 2                   .ifdef APPLE
001B94r 2                         lda     #<USR_FUNC
001B94r 2                         ldy     #>USR_FUNC
001B94r 2                   .else
001B94r 2  A9 rr                  lda     #<IQERR
001B96r 2  A0 rr                  ldy     #>IQERR
001B98r 2                   .endif
001B98r 2                   .ifdef AIM65
001B98r 2                         sta     ATN+1
001B98r 2                         sty     ATN+2
001B98r 2                         sta     GOSTROUT+1
001B98r 2                         sty     GOSTROUT+2
001B98r 2                   .else
001B98r 2  85 0B                  sta     USR+1
001B9Ar 2  84 0C                  sty     USR+2
001B9Cr 2                     .ifdef SYM1
001B9Cr 2                         sta     USR1+1
001B9Cr 2                         sty     USR1+2
001B9Cr 2                         lda     #<DUMPT
001B9Cr 2                         ldy     #>DUMPT
001B9Cr 2                         sta     USR2+1
001B9Cr 2                         sty     USR2+2
001B9Cr 2                         lda     #<L8C78
001B9Cr 2                         ldy     #>L8C78
001B9Cr 2                         sta     USR3+1
001B9Cr 2                         sty     USR3+2
001B9Cr 2                     .endif
001B9Cr 2                   .endif
001B9Cr 2                 .endif
001B9Cr 2                 .ifndef CBM1
001B9Cr 2  A9 48                lda     #WIDTH
001B9Er 2  85 rr                sta     Z17
001BA0r 2  A9 38                lda     #WIDTH2
001BA2r 2  85 rr                sta     Z18
001BA4r 2                 .endif
001BA4r 2               .endif
001BA4r 2               
001BA4r 2               ; All non-CONFIG_SMALL versions of BASIC have
001BA4r 2               ; the same bug here: While the number of bytes
001BA4r 2               ; to be copied is correct for CONFIG_SMALL,
001BA4r 2               ; it is one byte short on non-CONFIG_SMALL:
001BA4r 2               ; It seems the "ldx" value below has been
001BA4r 2               ; hardcoded. So on these configurations,
001BA4r 2               ; the last byte of GENERIC_RNDSEED, which
001BA4r 2               ; is 5 bytes instead of 4, does not get copied -
001BA4r 2               ; which is nothing major, because it is just
001BA4r 2               ; the least significant 8 bits of the mantissa
001BA4r 2               ; of the random number seed.
001BA4r 2               ; KBD added three bytes to CHRGET and removed
001BA4r 2               ; the random number seed, but only adjusted
001BA4r 2               ; the number of bytes by adding 3 - this
001BA4r 2               ; copies four bytes too many, which is no
001BA4r 2               ; problem.
001BA4r 2               .ifndef DB6502
001BA4r 2               .ifdef CONFIG_SMALL
001BA4r 2                 .ifdef KBD
001BA4r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
001BA4r 2                 .else
001BA4r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
001BA4r 2                 .endif
001BA4r 2               .else
001BA4r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
001BA4r 2               .endif
001BA4r 2               L4098:
001BA4r 2                       lda     GENERIC_CHRGET-1,x
001BA4r 2                       sta     CHRGET-1,x
001BA4r 2                       dex
001BA4r 2                       bne     L4098
001BA4r 2               .else
001BA4r 2  A2 04                ldx     #(GENERIC_CHRGET_END-GENERIC_RNDSEED)
001BA6r 2               L4098:
001BA6r 2  BD rr rr             lda     GENERIC_RNDSEED-1, x
001BA9r 2  95 rr                sta     RNDSEED-1,x
001BABr 2  CA                   dex
001BACr 2  D0 F8                bne     L4098
001BAEr 2               .endif
001BAEr 2               .ifdef CONFIG_2
001BAEr 2  A9 03                lda     #$03
001BB0r 2  85 rr                sta     DSCLEN
001BB2r 2               .endif
001BB2r 2               .ifndef KBD
001BB2r 2  8A                   txa
001BB3r 2  85 rr                sta     SHIFTSIGNEXT
001BB5r 2                 .ifdef CONFIG_CBM_ALL
001BB5r 2                       sta     CURDVC
001BB5r 2                 .endif
001BB5r 2  85 rr                sta     LASTPT+1
001BB7r 2                 .ifndef AIM65
001BB7r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
001BB7r 2  85 rr                sta     Z15
001BB9r 2                 .endif
001BB9r 2                 .endif
001BB9r 2                 .ifndef CONFIG_11
001BB9r 2                       sta     POSX
001BB9r 2                 .endif
001BB9r 2  48                   pha
001BBAr 2  85 rr                sta     Z14
001BBCr 2                 .ifndef CBM2
001BBCr 2                  .ifndef AIM65
001BBCr 2                  .ifndef SYM1
001BBCr 2                   .ifndef MICROTAN
001BBCr 2  A9 03                lda     #$03
001BBEr 2  85 rr                sta     DSCLEN
001BC0r 2                   .endif
001BC0r 2                  .endif
001BC0r 2                  .endif
001BC0r 2                   .ifndef CONFIG_11
001BC0r 2                       lda     #$2C
001BC0r 2                       sta     LINNUM+1
001BC0r 2                   .endif
001BC0r 2  20 rr rr             jsr     CRDO
001BC3r 2                 .endif
001BC3r 2                 .ifdef CBM2
001BC3r 2                       inx
001BC3r 2                       stx     INPUTBUFFER-3
001BC3r 2                       stx     INPUTBUFFER-4
001BC3r 2                 .endif
001BC3r 2                 .ifdef APPLE
001BC3r 2                       lda     #$01
001BC3r 2                       sta     INPUTBUFFER-3
001BC3r 2                       sta     INPUTBUFFER-4
001BC3r 2                 .endif
001BC3r 2  A2 rr                ldx     #TEMPST
001BC5r 2  86 rr                stx     TEMPPT
001BC7r 2               .ifndef CONFIG_CBM_ALL
001BC7r 2  A9 rr                lda     #<QT_MEMORY_SIZE
001BC9r 2  A0 rr                ldy     #>QT_MEMORY_SIZE
001BCBr 2  20 rr rr             jsr     STROUT
001BCEr 2                 .ifdef APPLE
001BCEr 2                       jsr     INLINX
001BCEr 2                 .else
001BCEr 2  20 rr rr             jsr     NXIN
001BD1r 2                 .endif
001BD1r 2  86 rr                stx     TXTPTR
001BD3r 2  84 rr                sty     TXTPTR+1
001BD5r 2  20 rr rr             jsr     CHRGET
001BD8r 2                 .ifndef AIM65
001BD8r 2                   .ifndef SYM1
001BD8r 2  C9 41                cmp     #$41
001BDAr 2  F0 82                beq     PR_WRITTEN_BY
001BDCr 2                   .endif
001BDCr 2                 .endif
001BDCr 2  A8                   tay
001BDDr 2  D0 25                bne     L40EE
001BDFr 2               .endif
001BDFr 2               .ifndef CBM2
001BDFr 2  A9 rr                lda     #<RAMSTART2
001BE1r 2               .endif
001BE1r 2  A0 rr                ldy     #>RAMSTART2
001BE3r 2               .ifdef CONFIG_2
001BE3r 2  85 rr                sta     TXTTAB
001BE5r 2  84 rr                sty     TXTTAB+1
001BE7r 2               .endif
001BE7r 2  85 rr                sta     LINNUM
001BE9r 2  84 rr                sty     LINNUM+1
001BEBr 2               .ifdef CBM2
001BEBr 2               		tay
001BEBr 2               .else
001BEBr 2  A0 00                ldy     #$00
001BEDr 2               .endif
001BEDr 2               L40D7:
001BEDr 2  E6 rr                inc     LINNUM
001BEFr 2  D0 02                bne     L40DD
001BF1r 2  E6 rr                inc     LINNUM+1
001BF3r 2               .ifdef CBM1
001BF3r 2               ; CBM: hard RAM top limit is $8000
001BF3r 2                       lda     LINNUM+1
001BF3r 2                       cmp     #$80
001BF3r 2                       beq     L40FA
001BF3r 2               .endif
001BF3r 2               .ifdef CBM2
001BF3r 2               ; optimized version of the CBM1 code
001BF3r 2                       bmi     L40FA
001BF3r 2               .endif
001BF3r 2               .if .def(AIM65)
001BF3r 2               ; AIM65: hard RAM top limit is $A000
001BF3r 2                       lda     LINNUM+1
001BF3r 2                       cmp     #$A0
001BF3r 2                       beq     L40FA
001BF3r 2               .endif
001BF3r 2               L40DD:
001BF3r 2               .ifdef CONFIG_2
001BF3r 2  A9 55                lda     #$55 ; 01010101 / 10101010
001BF5r 2               .else
001BF5r 2                       lda     #$92 ; 10010010 / 00100100
001BF5r 2               .endif
001BF5r 2  91 rr                sta     (LINNUM),y
001BF7r 2  D1 rr                cmp     (LINNUM),y
001BF9r 2  D0 15                bne     L40FA
001BFBr 2  0A                   asl     a
001BFCr 2  91 rr                sta     (LINNUM),y
001BFEr 2  D1 rr                cmp     (LINNUM),y
001C00r 2               .ifdef CONFIG_CBM_ALL
001C00r 2                       beq     L40D7
001C00r 2               .else
001C00r 2                 .ifndef CONFIG_11
001C00r 2                       beq     L40D7; old: faster
001C00r 2                       bne     L40FA
001C00r 2                 .else
001C00r 2  D0 0E                bne     L40FA; new: slower
001C02r 2  F0 E9                beq     L40D7
001C04r 2                 .endif
001C04r 2               L40EE:
001C04r 2  20 rr rr             jsr     CHRGOT
001C07r 2  20 rr rr             jsr     LINGET
001C0Ar 2  A8                   tay
001C0Br 2  F0 03                beq     L40FA
001C0Dr 2  4C rr rr             jmp     SYNERR
001C10r 2               .endif
001C10r 2               L40FA:
001C10r 2  A5 rr                lda     LINNUM
001C12r 2  A4 rr                ldy     LINNUM+1
001C14r 2  85 rr                sta     MEMSIZ
001C16r 2  84 rr                sty     MEMSIZ+1
001C18r 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
001C18r 2  85 rr                sta     FRETOP
001C1Ar 2  84 rr                sty     FRETOP+1
001C1Cr 2               .endif
001C1Cr 2               L4106:
001C1Cr 2               .ifndef CONFIG_CBM_ALL
001C1Cr 2                 .ifdef APPLE
001C1Cr 2                       lda     #$FF
001C1Cr 2                       jmp     L2829
001C1Cr 2                       .word	STROUT ; PATCH!
001C1Cr 2                       jsr     NXIN
001C1Cr 2                 .else
001C1Cr 2  A9 rr                lda     #<QT_TERMINAL_WIDTH
001C1Er 2  A0 rr                ldy     #>QT_TERMINAL_WIDTH
001C20r 2  20 rr rr             jsr     STROUT
001C23r 2  20 rr rr             jsr     NXIN
001C26r 2                 .endif
001C26r 2  86 rr                stx     TXTPTR
001C28r 2  84 rr                sty     TXTPTR+1
001C2Ar 2  20 rr rr             jsr     CHRGET
001C2Dr 2  A8                   tay
001C2Er 2  F0 1C                beq     L4136
001C30r 2  20 rr rr             jsr     LINGET
001C33r 2  A5 rr                lda     LINNUM+1
001C35r 2  D0 E5                bne     L4106
001C37r 2  A5 rr                lda     LINNUM
001C39r 2  C9 10                cmp     #$10
001C3Br 2  90 DF                bcc     L4106
001C3Dr 2               L2829:
001C3Dr 2  85 rr                sta     Z17
001C3Fr 2               L4129:
001C3Fr 2                 .ifdef AIM65
001C3Fr 2                       sbc     #$0A
001C3Fr 2                 .else
001C3Fr 2  E9 0E                sbc     #$0E
001C41r 2                 .endif
001C41r 2  B0 FC                bcs     L4129
001C43r 2  49 FF                eor     #$FF
001C45r 2                 .ifdef AIM65
001C45r 2                       sbc     #$08
001C45r 2                 .else
001C45r 2  E9 0C                sbc     #$0C
001C47r 2                 .endif
001C47r 2  18                   clc
001C48r 2  65 rr                adc     Z17
001C4Ar 2  85 rr                sta     Z18
001C4Cr 2               .endif
001C4Cr 2               L4136:
001C4Cr 2               .ifdef CONFIG_RAM
001C4Cr 2                       lda     #<QT_WANT
001C4Cr 2                       ldy     #>QT_WANT
001C4Cr 2                       jsr     STROUT
001C4Cr 2                       jsr     NXIN
001C4Cr 2                       stx     TXTPTR
001C4Cr 2                       sty     TXTPTR+1
001C4Cr 2                       jsr     CHRGET
001C4Cr 2                       ldx     #<RAMSTART1
001C4Cr 2                       ldy     #>RAMSTART1
001C4Cr 2                       cmp     #'Y'
001C4Cr 2                       beq     L4183
001C4Cr 2                       cmp     #'A'
001C4Cr 2                       beq     L4157
001C4Cr 2                       cmp     #'N'
001C4Cr 2                       bne     L4136
001C4Cr 2               L4157:
001C4Cr 2                       ldx     #<IQERR
001C4Cr 2                       ldy     #>IQERR
001C4Cr 2                       stx     UNFNC_ATN
001C4Cr 2                       sty     UNFNC_ATN+1
001C4Cr 2                       ldx     #<ATN	; overwrite starting
001C4Cr 2                       ldy     #>ATN	; with ATN
001C4Cr 2                       cmp     #'A'
001C4Cr 2                       beq     L4183
001C4Cr 2                       ldx     #<IQERR
001C4Cr 2                       ldy     #>IQERR
001C4Cr 2                       stx     UNFNC_COS
001C4Cr 2                       sty     UNFNC_COS+1
001C4Cr 2                       stx     UNFNC_TAN
001C4Cr 2                       sty     UNFNC_TAN+1
001C4Cr 2                       stx     UNFNC_SIN
001C4Cr 2                       sty     UNFNC_SIN+1
001C4Cr 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
001C4Cr 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
001C4Cr 2               L4183:
001C4Cr 2               .else
001C4Cr 2  A2 rr                ldx     #<RAMSTART2
001C4Er 2  A0 rr                ldy     #>RAMSTART2
001C50r 2               .endif
001C50r 2  86 rr                stx     TXTTAB
001C52r 2  84 rr                sty     TXTTAB+1
001C54r 2  A0 00                ldy     #$00
001C56r 2  98                   tya
001C57r 2  91 rr                sta     (TXTTAB),y
001C59r 2  E6 rr                inc     TXTTAB
001C5Br 2               .ifndef CBM2
001C5Br 2  D0 02                bne     L4192
001C5Dr 2  E6 rr                inc     TXTTAB+1
001C5Fr 2               L4192:
001C5Fr 2               .endif
001C5Fr 2               .if CONFIG_SCRTCH_ORDER = 1
001C5Fr 2                       jsr     SCRTCH
001C5Fr 2               .endif
001C5Fr 2  A5 rr                lda     TXTTAB
001C61r 2  A4 rr                ldy     TXTTAB+1
001C63r 2  20 rr rr             jsr     REASON
001C66r 2               .ifdef CBM2
001C66r 2                       lda     #<QT_BASIC
001C66r 2                       ldy     #>QT_BASIC
001C66r 2                       jsr     STROUT
001C66r 2               .else
001C66r 2  20 rr rr             jsr     CRDO
001C69r 2               .endif
001C69r 2  A5 rr                lda     MEMSIZ
001C6Br 2  38                   sec
001C6Cr 2  E5 rr                sbc     TXTTAB
001C6Er 2  AA                   tax
001C6Fr 2  A5 rr                lda     MEMSIZ+1
001C71r 2  E5 rr                sbc     TXTTAB+1
001C73r 2  20 rr rr             jsr     LINPRT
001C76r 2  A9 rr                lda     #<QT_BYTES_FREE
001C78r 2  A0 rr                ldy     #>QT_BYTES_FREE
001C7Ar 2  20 rr rr             jsr     STROUT
001C7Dr 2               .if CONFIG_SCRTCH_ORDER = 2
001C7Dr 2                       jsr     SCRTCH
001C7Dr 2               .endif
001C7Dr 2               .ifdef CONFIG_CBM_ALL
001C7Dr 2                       jmp     RESTART
001C7Dr 2               .elseif .def(AIM65)
001C7Dr 2                       lda     #<CRDO
001C7Dr 2                       ldy     #>CRDO
001C7Dr 2                       sta     GORESTART+1
001C7Dr 2                       sty     GORESTART+2
001C7Dr 2                       jmp     RESTART
001C7Dr 2               .else
001C7Dr 2  A9 rr                lda     #<STROUT
001C7Fr 2  A0 rr                ldy     #>STROUT
001C81r 2  85 rr                sta     GOSTROUT+1
001C83r 2  84 rr                sty     GOSTROUT+2
001C85r 2                 .if CONFIG_SCRTCH_ORDER = 3
001C85r 2  20 rr rr              jsr     SCRTCH
001C88r 2                 .endif
001C88r 2  A9 rr                lda     #<RESTART
001C8Ar 2  A0 rr                ldy     #>RESTART
001C8Cr 2  85 rr                sta     GORESTART+1
001C8Er 2  84 rr                sty     GORESTART+2
001C90r 2  6C rr rr             jmp     (GORESTART+1)
001C93r 2               .endif
001C93r 2               
001C93r 2               .ifdef DB6502
001C93r 2               .segment "RODATA"
000004r 2               .endif
000004r 2               
000004r 2                 .if .def(CONFIG_RAM) || .def(OSI)
000004r 2               ; OSI is compiled for ROM, but includes
000004r 2               ; this unused string
000004r 2               QT_WANT:
000004r 2                       .byte   "WANT SIN-COS-TAN-ATN"
000004r 2                       .byte   0
000004r 2                 .endif
000004r 2               QT_WRITTEN_BY:
000004r 2                 .ifndef CONFIG_CBM_ALL
000004r 2                 .if !(.def(AIM65) || .def(SYM1))
000004r 2                   .ifdef APPLE
000004r 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
000004r 2               		.byte	CR,0
000004r 2                   .else
000004r 2  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
000007r 2                     .ifndef CONFIG_11
000007r 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
000007r 2                     .else
000007r 2  57 52 49 54          .byte   "WRITTEN BY WEILAND & GATES"
00000Br 2  54 45 4E 20  
00000Fr 2  42 59 20 57  
000021r 2                     .endif
000021r 2  0D 0A 00             .byte   CR,LF,0
000024r 2                   .endif
000024r 2                  .endif
000024r 2               QT_MEMORY_SIZE:
000024r 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
000028r 2  52 59 20 53  
00002Cr 2  49 5A 45     
00002Fr 2  00                   .byte   0
000030r 2               QT_TERMINAL_WIDTH:
000030r 2                   .if !(.def(AIM65) || .def(SYM1))
000030r 2  54 45 52 4D          .byte   "TERMINAL "
000034r 2  49 4E 41 4C  
000038r 2  20           
000039r 2                   .endif
000039r 2  57 49 44 54          .byte   "WIDTH"
00003Dr 2  48           
00003Er 2  00                   .byte   0
00003Fr 2                 .endif
00003Fr 2               QT_BYTES_FREE:
00003Fr 2  20 42 59 54          .byte   " BYTES FREE"
000043r 2  45 53 20 46  
000047r 2  52 45 45     
00004Ar 2                 .ifdef CBM1
00004Ar 2                 .elseif .def(CBM2)
00004Ar 2                       .byte   CR,0
00004Ar 2                 .elseif .def(APPLE)
00004Ar 2                       .byte   0
00004Ar 2                 .else
00004Ar 2  0D 0A 0D 0A          .byte   CR,LF,CR,LF
00004Er 2                 .endif
00004Er 2               QT_BASIC:
00004Er 2                 .ifdef DB6502
00004Er 2  44 42 36 35          .byte   "DB6502 BASIC VERSION 2C"
000052r 2  30 32 20 42  
000056r 2  41 53 49 43  
000065r 2                 .endif
000065r 2                 .ifdef OSI
000065r 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
000065r 2                 .endif
000065r 2                 .ifdef KIM
000065r 2                       .byte   "MOS TECH 6502 BASIC V1.1"
000065r 2                 .endif
000065r 2                 .ifdef MICROTAN
000065r 2                       .byte   "MICROTAN BASIC"
000065r 2                 .endif
000065r 2                 .ifdef AIM65
000065r 2                       .byte   "  AIM 65 BASIC V1.1"
000065r 2                 .endif
000065r 2                 .ifdef SYM1
000065r 2                       .byte   "BASIC V1.1"
000065r 2                 .endif
000065r 2                 .ifdef CBM1
000065r 2                       .byte   $13 ; HOME
000065r 2                       .byte   "*** COMMODORE BASIC ***"
000065r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
000065r 2                 .endif
000065r 2                 .ifdef CBM2
000065r 2                       .byte   "### COMMODORE BASIC ###"
000065r 2                       .byte   CR,CR,0
000065r 2                 .endif
000065r 2                 .ifdef APPLE
000065r 2                       .byte   LF,CR,LF
000065r 2               		.byte	"APPLE BASIC V1.1"
000065r 2                 .endif
000065r 2                 .ifndef CONFIG_CBM_ALL
000065r 2  0D 0A                .byte   CR,LF
000067r 2                   .ifdef MICROTAN
000067r 2                       .byte   "(C) 1980 MICROSOFT"
000067r 2                   .elseif .def(AIM65)
000067r 2                       .byte   0
000067r 2                       .byte   "(C) 1978 MICROSOFT"
000067r 2                   .elseif .def(SYM1)
000067r 2                       .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
000067r 2                   .else
000067r 2  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
00006Br 2  52 49 47 48  
00006Fr 2  54 20 31 39  
000086r 2                   .endif
000086r 2  0D 0A                .byte   CR,LF
000088r 2                     .ifndef AIM65
000088r 2  00                   .byte   0
000089r 2                     .endif
000089r 2                 .endif
000089r 2               .endif
000089r 2               
000089r 1               .include "extra.s"
000089r 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef MICROTAN
000000r 2               .include "microtan_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef AIM65
000000r 2               .include "aim65_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef SYM1
000000r 2                       .byte   0,0,0
000000r 2               .endif
000000r 2               
000000r 2               .ifdef DB6502
000000r 2               .include "db6502_extra.s"
000000r 3                     .include "acia.inc"
000000r 4                       .include "zeropage.inc"
000000r 5               .globalzp sp
000000r 5               .globalzp sreg
000000r 5               .globalzp regsave
000000r 5               .globalzp tmp1
000000r 5               .globalzp tmp2
000000r 5               .globalzp tmp3
000000r 5               .globalzp tmp4
000000r 5               .globalzp ptr1
000000r 5               .globalzp ptr2
000000r 5               .globalzp ptr3
000000r 5               .globalzp ptr4
000000r 5               .globalzp lcd_temp_char1
000000r 5               .globalzp lcd_temp_char2
000000r 5               .globalzp lcd_temp_char3
000000r 5               .globalzp acia_conn
000000r 5               .globalzp acia_rx_rptr
000000r 5               .globalzp acia_rx_wptr
000000r 5               .globalzp acia_tx_rptr
000000r 5               .globalzp acia_tx_wptr
000000r 5               .globalzp keyboard_conn
000000r 5               .globalzp keyboard_rptr
000000r 5               .globalzp keyboard_wptr
000000r 5               .globalzp tty_config
000000r 5               .globalzp system_break_flag
000000r 5               .globalzp system_break_address
000000r 5               .globalzp system_break_sp
000000r 5               .globalzp user_break_address
000000r 5               .globalzp user_break_sp
000000r 5               .globalzp user_irq_address
000000r 5               .globalzp zp_sd_address  ; 2 bytes
000000r 5               .globalzp zp_sd_currentsector  ; 4 bytes
000000r 5               .globalzp zp_fat32_variables  ; 24 bytes
000000r 5               
000000r 5               
000000r 5               
000000r 4               
000000r 4                       .import _acia_init
000000r 4                       .import _handle_acia_irq
000000r 4                       .import _acia_is_data_available
000000r 4                       .import _acia_read_byte
000000r 4                       .import _acia_write_byte
000000r 4                       .import _acia_write_string
000000r 4                       .import ACIA_STATUS
000000r 4               
000000r 4               ACIA_DATA_AVAILABLE    = $01
000000r 4               ACIA_NO_DATA_AVAILABLE = $00
000000r 4               
000000r 4                       .macro write_acia string
000000r 4                       pha
000000r 4                       phx
000000r 4                       .if (.match (.left (1, {string}), #))
000000r 4                           ; immediate mode
000000r 4                           lda #<(.right (.tcount ({string})-1, {string}))
000000r 4                           ldx #>(.right (.tcount ({string})-1, {string}))
000000r 4                       .else
000000r 4                           ; assume absolute or zero page
000000r 4                           lda string
000000r 4                           ldx 1+(string)
000000r 4                       .endif
000000r 4                       jsr _acia_write_string
000000r 4                       plx
000000r 4                       pla
000000r 4                       .endmacro
000000r 4               
000000r 3                     .include "keyboard.inc"
000000r 4                     .import _keyboard_init
000000r 4                     .import _handle_keyboard_irq
000000r 4                     .import _keyboard_is_connected
000000r 4                     .import _keyboard_is_data_available
000000r 4                     .import _keyboard_read_char
000000r 4               
000000r 4               KEY_SPACE        = $20
000000r 4               KEY_ENTER        = $0d
000000r 4               KEY_ESCAPE       = $1b
000000r 4               KEY_BACKSPACE    = $7f
000000r 4               KEY_ARROW_UP     = $0b
000000r 4               KEY_ARROW_DOWN   = $0a
000000r 4               KEY_ARROW_LEFT   = $08
000000r 4               KEY_ARROW_RIGHT  = $15
000000r 4               KEY_TAB          = $09
000000r 4               KEY_PAGE_UP      = $19
000000r 4               KEY_PAGE_DOWN    = $1a
000000r 4               KEY_CTRL_X       = $18
000000r 4               
000000r 4               KEYBOARD_NOT_CONNECTED     = $00
000000r 4               KEYBOARD_CONNECTED         = $01
000000r 4               
000000r 4               KEYBOARD_NO_DATA_AVAILABLE = $00
000000r 4               KEYBOARD_DATA_AVAILABLE    = $01
000000r 4               
000000r 3               
000000r 3                     .export _start_msbasic
000000r 3               
000000r 3               .segment "CODE"
001C93r 3               
001C93r 3               ISCNTC:
001C93r 3  4C rr rr               jmp MONISCNTC
001C96r 3               ;!!! *used*to* run into "STOP"
001C96r 3               
001C96r 3               init:
001C96r 3               _start_msbasic:
001C96r 3  64 rr              stz EXITFLAG
001C98r 3               
001C98r 3               ; Display startup message
001C98r 3               ShowStartMsg:
001C98r 3  48 DA A9 rr        writeln_tty #StartupMessage
001C9Cr 3  A2 rr 20 rr  
001CA0r 3  rr FA 68     
001CA3r 3               
001CA3r 3               ; Wait for a cold/warm start selection
001CA3r 3               WaitForKeypress:
001CA3r 3  20 rr rr     	JSR	MONRDKEY
001CA6r 3  90 FB        	BCC	WaitForKeypress
001CA8r 3               
001CA8r 3  29 DF        	AND	#$DF			; Make upper case
001CAAr 3  C9 57        	CMP	#'W'			; compare with [W]arm start
001CACr 3  F0 07        	BEQ	WarmStart
001CAEr 3               
001CAEr 3  C9 43        	CMP	#'C'			; compare with [C]old start
001CB0r 3  D0 E6        	BNE	ShowStartMsg
001CB2r 3               
001CB2r 3  4C rr rr     	JMP	COLD_START	; BASIC cold start
001CB5r 3               
001CB5r 3               WarmStart:
001CB5r 3  4C rr rr     	JMP	RESTART		; BASIC warm start
001CB8r 3               
001CB8r 3               MONCOUT:
001CB8r 3               
001CB8r 3  20 rr rr         jsr _tty_send_character
001CBBr 3  60           	RTS
001CBCr 3               
001CBCr 3               MONRDKEY:
001CBCr 3               ; 	LDA	ACIA_STATUS
001CBCr 3               ; 	AND	#ACIA_STATUS_RX_FULL
001CBCr 3               ; 	BEQ	NoDataIn
001CBCr 3               ; 	LDA	ACIA_DATA
001CBCr 3               ; 	SEC		; Carry set if key available
001CBCr 3               ; 	RTS
001CBCr 3               ; NoDataIn:
001CBCr 3               ; 	CLC		; Carry clear if no key pressed
001CBCr 3  20 rr rr       jsr _acia_is_data_available
001CBFr 3                 ; skip, no data available at this point
001CBFr 3  C9 00          cmp #(ACIA_NO_DATA_AVAILABLE)
001CC1r 3  F0 06          beq isPS2KeyboardAvailable
001CC3r 3  20 rr rr       jsr _acia_read_byte
001CC6r 3  4C rr rr       jmp donereading
001CC9r 3               isPS2KeyboardAvailable:
001CC9r 3  20 rr rr       jsr _keyboard_is_data_available
001CCCr 3  C9 00          cmp #(KEYBOARD_NO_DATA_AVAILABLE)
001CCEr 3  F0 05          beq NoDataIn
001CD0r 3  20 rr rr       jsr _keyboard_read_char
001CD3r 3               donereading:
001CD3r 3  38             sec
001CD4r 3  60             rts
001CD5r 3               NoDataIn:
001CD5r 3  18             clc
001CD6r 3  60           	RTS
001CD7r 3               
001CD7r 3               
001CD7r 3               MONISCNTC:
001CD7r 3  20 rr rr     	JSR	MONRDKEY
001CDAr 3  90 06        	BCC	NotCTRLC ; If no key pressed then exit
001CDCr 3  C9 03        	CMP	#3
001CDEr 3  D0 02        	BNE	NotCTRLC ; if CTRL-C not pressed then exit
001CE0r 3  38           	SEC		; Carry set if control C pressed
001CE1r 3  60           	RTS
001CE2r 3               NotCTRLC:
001CE2r 3  18           	CLC		; Carry clear if control C not pressed
001CE3r 3  60           	RTS
001CE4r 3               
001CE4r 3               StartupMessage:
001CE4r 3  43 6F 6C 64  	.byte	"Cold [C] or warm [W] start?",$0D,$0A,$00
001CE8r 3  20 5B 43 5D  
001CECr 3  20 6F 72 20  
001D02r 3               ;	.byte	"Cold [C] or warm [W] start?",$00
001D02r 3               
001D02r 3               LOAD:
001D02r 3  60           	RTS
001D03r 3               
001D03r 3               SAVE:
001D03r 3  60           	RTS
001D04r 3               
001D04r 3               .segment "STARTUP"
000000r 3  4C rr rr       jmp init
000003r 3               
000003r 3               .segment "SYSRAM"
000000r 3               TXTBUFFER:
000000r 3  xx xx xx xx    .res 64
000004r 3  xx xx xx xx  
000008r 3  xx xx xx xx  
000040r 3               
000040r 2               .endif
000040r 2               
000040r 1               
000040r 1               
